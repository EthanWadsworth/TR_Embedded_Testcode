
test_remote_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009320  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080094d0  080094d0  000194d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095b8  080095b8  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080095b8  080095b8  000195b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095c0  080095c0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095c0  080095c0  000195c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095c4  080095c4  000195c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080095c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a0  20000088  08009650  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a28  08009650  00020a28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019bb8  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ef5  00000000  00000000  00039c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001178  00000000  00000000  0003cb68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001020  00000000  00000000  0003dce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002570c  00000000  00000000  0003ed00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e265  00000000  00000000  0006440c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dceca  00000000  00000000  00072671  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014f53b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004da4  00000000  00000000  0014f5b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080094b8 	.word	0x080094b8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	080094b8 	.word	0x080094b8

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2f>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b20:	bf24      	itt	cs
 8000b22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b2a:	d90d      	bls.n	8000b48 <__aeabi_d2f+0x30>
 8000b2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b40:	bf08      	it	eq
 8000b42:	f020 0001 	biceq.w	r0, r0, #1
 8000b46:	4770      	bx	lr
 8000b48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b4c:	d121      	bne.n	8000b92 <__aeabi_d2f+0x7a>
 8000b4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b52:	bfbc      	itt	lt
 8000b54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	4770      	bxlt	lr
 8000b5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b62:	f1c2 0218 	rsb	r2, r2, #24
 8000b66:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b72:	bf18      	it	ne
 8000b74:	f040 0001 	orrne.w	r0, r0, #1
 8000b78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b84:	ea40 000c 	orr.w	r0, r0, ip
 8000b88:	fa23 f302 	lsr.w	r3, r3, r2
 8000b8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b90:	e7cc      	b.n	8000b2c <__aeabi_d2f+0x14>
 8000b92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b96:	d107      	bne.n	8000ba8 <__aeabi_d2f+0x90>
 8000b98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b9c:	bf1e      	ittt	ne
 8000b9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ba2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ba6:	4770      	bxne	lr
 8000ba8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <processController>:
const float GIMBAL_JOYSTICK_SCALE = 0.4f;
const short MOTOR_BOUNDS = 10000;

short LF_curr,LB_curr,RF_curr,RB_curr,gimbal_yaw,gimbal_pitch,flywheel_speed;

void processController(){
 8000eb8:	b5b0      	push	{r4, r5, r7, lr}
 8000eba:	ed2d 8b02 	vpush	{d8}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
	gimbal_yaw = 0;
 8000ec2:	4bc5      	ldr	r3, [pc, #788]	; (80011d8 <processController+0x320>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	801a      	strh	r2, [r3, #0]
	gimbal_pitch = 0;
 8000ec8:	4bc4      	ldr	r3, [pc, #784]	; (80011dc <processController+0x324>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	801a      	strh	r2, [r3, #0]
	short joyLeftX = (short)(rc.ch1 * JOYSTICK_SCALE);
 8000ece:	4bc4      	ldr	r3, [pc, #784]	; (80011e0 <processController+0x328>)
 8000ed0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ed4:	ee07 3a90 	vmov	s15, r3
 8000ed8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000edc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000ee0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ee8:	ee17 3a90 	vmov	r3, s15
 8000eec:	80fb      	strh	r3, [r7, #6]
	short joyLeftY = (short)(rc.ch2 * JOYSTICK_SCALE);
 8000eee:	4bbc      	ldr	r3, [pc, #752]	; (80011e0 <processController+0x328>)
 8000ef0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ef4:	ee07 3a90 	vmov	s15, r3
 8000ef8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000efc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f08:	ee17 3a90 	vmov	r3, s15
 8000f0c:	80bb      	strh	r3, [r7, #4]
	short joyRightX;
	short joyRightY;
	switch(rc.sw1){
 8000f0e:	4bb4      	ldr	r3, [pc, #720]	; (80011e0 <processController+0x328>)
 8000f10:	7a9b      	ldrb	r3, [r3, #10]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d002      	beq.n	8000f1c <processController+0x64>
 8000f16:	2b03      	cmp	r3, #3
 8000f18:	d039      	beq.n	8000f8e <processController+0xd6>
 8000f1a:	e07b      	b.n	8001014 <processController+0x15c>
		case 1: //left up (left stick strafe, right stick bot rotation)
			joyRightX = (short)(rc.ch3 * JOYSTICK_SCALE);
 8000f1c:	4bb0      	ldr	r3, [pc, #704]	; (80011e0 <processController+0x328>)
 8000f1e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f22:	ee07 3a90 	vmov	s15, r3
 8000f26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f2a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f36:	ee17 3a90 	vmov	r3, s15
 8000f3a:	807b      	strh	r3, [r7, #2]
			LF_curr = joyLeftX + joyLeftY + joyRightX;
 8000f3c:	88fa      	ldrh	r2, [r7, #6]
 8000f3e:	88bb      	ldrh	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	887b      	ldrh	r3, [r7, #2]
 8000f46:	4413      	add	r3, r2
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	b21a      	sxth	r2, r3
 8000f4c:	4ba5      	ldr	r3, [pc, #660]	; (80011e4 <processController+0x32c>)
 8000f4e:	801a      	strh	r2, [r3, #0]
			RF_curr = joyLeftY - joyLeftX - joyRightX;
 8000f50:	88ba      	ldrh	r2, [r7, #4]
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	887b      	ldrh	r3, [r7, #2]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	b21a      	sxth	r2, r3
 8000f60:	4ba1      	ldr	r3, [pc, #644]	; (80011e8 <processController+0x330>)
 8000f62:	801a      	strh	r2, [r3, #0]
			LB_curr = joyLeftY - joyLeftX + joyRightX;
 8000f64:	88ba      	ldrh	r2, [r7, #4]
 8000f66:	88fb      	ldrh	r3, [r7, #6]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	887b      	ldrh	r3, [r7, #2]
 8000f6e:	4413      	add	r3, r2
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	b21a      	sxth	r2, r3
 8000f74:	4b9d      	ldr	r3, [pc, #628]	; (80011ec <processController+0x334>)
 8000f76:	801a      	strh	r2, [r3, #0]
			RB_curr = joyLeftX + joyLeftY - joyRightX;
 8000f78:	88fa      	ldrh	r2, [r7, #6]
 8000f7a:	88bb      	ldrh	r3, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	887b      	ldrh	r3, [r7, #2]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	b21a      	sxth	r2, r3
 8000f88:	4b99      	ldr	r3, [pc, #612]	; (80011f0 <processController+0x338>)
 8000f8a:	801a      	strh	r2, [r3, #0]
		break;
 8000f8c:	e04f      	b.n	800102e <processController+0x176>
		case 3: //left middle (left stick strafe, right stick aim)
			joyRightX = (short)(rc.ch3 * GIMBAL_JOYSTICK_SCALE);
 8000f8e:	4b94      	ldr	r3, [pc, #592]	; (80011e0 <processController+0x328>)
 8000f90:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f94:	ee07 3a90 	vmov	s15, r3
 8000f98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f9c:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80011f4 <processController+0x33c>
 8000fa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fa8:	ee17 3a90 	vmov	r3, s15
 8000fac:	807b      	strh	r3, [r7, #2]
			joyRightY = (short)(rc.ch4 * GIMBAL_JOYSTICK_SCALE);
 8000fae:	4b8c      	ldr	r3, [pc, #560]	; (80011e0 <processController+0x328>)
 8000fb0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000fb4:	ee07 3a90 	vmov	s15, r3
 8000fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fbc:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80011f4 <processController+0x33c>
 8000fc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fc8:	ee17 3a90 	vmov	r3, s15
 8000fcc:	803b      	strh	r3, [r7, #0]
			LF_curr = joyLeftX + joyLeftY;
 8000fce:	88fa      	ldrh	r2, [r7, #6]
 8000fd0:	88bb      	ldrh	r3, [r7, #4]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	b21a      	sxth	r2, r3
 8000fd8:	4b82      	ldr	r3, [pc, #520]	; (80011e4 <processController+0x32c>)
 8000fda:	801a      	strh	r2, [r3, #0]
			RF_curr = joyLeftY - joyLeftX;
 8000fdc:	88ba      	ldrh	r2, [r7, #4]
 8000fde:	88fb      	ldrh	r3, [r7, #6]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	4b80      	ldr	r3, [pc, #512]	; (80011e8 <processController+0x330>)
 8000fe8:	801a      	strh	r2, [r3, #0]
			LB_curr = joyLeftY - joyLeftX;
 8000fea:	88ba      	ldrh	r2, [r7, #4]
 8000fec:	88fb      	ldrh	r3, [r7, #6]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	b21a      	sxth	r2, r3
 8000ff4:	4b7d      	ldr	r3, [pc, #500]	; (80011ec <processController+0x334>)
 8000ff6:	801a      	strh	r2, [r3, #0]
			RB_curr = joyLeftX + joyLeftY;
 8000ff8:	88fa      	ldrh	r2, [r7, #6]
 8000ffa:	88bb      	ldrh	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	b21a      	sxth	r2, r3
 8001002:	4b7b      	ldr	r3, [pc, #492]	; (80011f0 <processController+0x338>)
 8001004:	801a      	strh	r2, [r3, #0]
			gimbal_yaw = joyRightX;
 8001006:	4a74      	ldr	r2, [pc, #464]	; (80011d8 <processController+0x320>)
 8001008:	887b      	ldrh	r3, [r7, #2]
 800100a:	8013      	strh	r3, [r2, #0]
			gimbal_pitch = joyRightY;
 800100c:	4a73      	ldr	r2, [pc, #460]	; (80011dc <processController+0x324>)
 800100e:	883b      	ldrh	r3, [r7, #0]
 8001010:	8013      	strh	r3, [r2, #0]
		break;
 8001012:	e00c      	b.n	800102e <processController+0x176>
		default:
			LF_curr = 0;LB_curr = 0;RF_curr = 0;RB_curr = 0;
 8001014:	4b73      	ldr	r3, [pc, #460]	; (80011e4 <processController+0x32c>)
 8001016:	2200      	movs	r2, #0
 8001018:	801a      	strh	r2, [r3, #0]
 800101a:	4b74      	ldr	r3, [pc, #464]	; (80011ec <processController+0x334>)
 800101c:	2200      	movs	r2, #0
 800101e:	801a      	strh	r2, [r3, #0]
 8001020:	4b71      	ldr	r3, [pc, #452]	; (80011e8 <processController+0x330>)
 8001022:	2200      	movs	r2, #0
 8001024:	801a      	strh	r2, [r3, #0]
 8001026:	4b72      	ldr	r3, [pc, #456]	; (80011f0 <processController+0x338>)
 8001028:	2200      	movs	r2, #0
 800102a:	801a      	strh	r2, [r3, #0]
			break;
 800102c:	bf00      	nop
	}
	LF_curr = fmax(fmin(LF_curr,MOTOR_BOUNDS),-MOTOR_BOUNDS);
 800102e:	4b6d      	ldr	r3, [pc, #436]	; (80011e4 <processController+0x32c>)
 8001030:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fa2d 	bl	8000494 <__aeabi_i2d>
 800103a:	4604      	mov	r4, r0
 800103c:	460d      	mov	r5, r1
 800103e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fa26 	bl	8000494 <__aeabi_i2d>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	ec43 2b11 	vmov	d1, r2, r3
 8001050:	ec45 4b10 	vmov	d0, r4, r5
 8001054:	f007 fbd4 	bl	8008800 <fmin>
 8001058:	eeb0 8a40 	vmov.f32	s16, s0
 800105c:	eef0 8a60 	vmov.f32	s17, s1
 8001060:	f242 7310 	movw	r3, #10000	; 0x2710
 8001064:	425b      	negs	r3, r3
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fa14 	bl	8000494 <__aeabi_i2d>
 800106c:	4603      	mov	r3, r0
 800106e:	460c      	mov	r4, r1
 8001070:	ec44 3b11 	vmov	d1, r3, r4
 8001074:	eeb0 0a48 	vmov.f32	s0, s16
 8001078:	eef0 0a68 	vmov.f32	s1, s17
 800107c:	f007 fb99 	bl	80087b2 <fmax>
 8001080:	ec54 3b10 	vmov	r3, r4, d0
 8001084:	4618      	mov	r0, r3
 8001086:	4621      	mov	r1, r4
 8001088:	f7ff fd1e 	bl	8000ac8 <__aeabi_d2iz>
 800108c:	4603      	mov	r3, r0
 800108e:	b21a      	sxth	r2, r3
 8001090:	4b54      	ldr	r3, [pc, #336]	; (80011e4 <processController+0x32c>)
 8001092:	801a      	strh	r2, [r3, #0]
	LB_curr = fmax(fmin(LB_curr,MOTOR_BOUNDS),-MOTOR_BOUNDS);
 8001094:	4b55      	ldr	r3, [pc, #340]	; (80011ec <processController+0x334>)
 8001096:	f9b3 3000 	ldrsh.w	r3, [r3]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff f9fa 	bl	8000494 <__aeabi_i2d>
 80010a0:	4604      	mov	r4, r0
 80010a2:	460d      	mov	r5, r1
 80010a4:	f242 7310 	movw	r3, #10000	; 0x2710
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff f9f3 	bl	8000494 <__aeabi_i2d>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	ec43 2b11 	vmov	d1, r2, r3
 80010b6:	ec45 4b10 	vmov	d0, r4, r5
 80010ba:	f007 fba1 	bl	8008800 <fmin>
 80010be:	eeb0 8a40 	vmov.f32	s16, s0
 80010c2:	eef0 8a60 	vmov.f32	s17, s1
 80010c6:	f242 7310 	movw	r3, #10000	; 0x2710
 80010ca:	425b      	negs	r3, r3
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff f9e1 	bl	8000494 <__aeabi_i2d>
 80010d2:	4603      	mov	r3, r0
 80010d4:	460c      	mov	r4, r1
 80010d6:	ec44 3b11 	vmov	d1, r3, r4
 80010da:	eeb0 0a48 	vmov.f32	s0, s16
 80010de:	eef0 0a68 	vmov.f32	s1, s17
 80010e2:	f007 fb66 	bl	80087b2 <fmax>
 80010e6:	ec54 3b10 	vmov	r3, r4, d0
 80010ea:	4618      	mov	r0, r3
 80010ec:	4621      	mov	r1, r4
 80010ee:	f7ff fceb 	bl	8000ac8 <__aeabi_d2iz>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b21a      	sxth	r2, r3
 80010f6:	4b3d      	ldr	r3, [pc, #244]	; (80011ec <processController+0x334>)
 80010f8:	801a      	strh	r2, [r3, #0]
	RF_curr = fmax(fmin(RF_curr,MOTOR_BOUNDS),-MOTOR_BOUNDS);
 80010fa:	4b3b      	ldr	r3, [pc, #236]	; (80011e8 <processController+0x330>)
 80010fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff f9c7 	bl	8000494 <__aeabi_i2d>
 8001106:	4604      	mov	r4, r0
 8001108:	460d      	mov	r5, r1
 800110a:	f242 7310 	movw	r3, #10000	; 0x2710
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff f9c0 	bl	8000494 <__aeabi_i2d>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	ec43 2b11 	vmov	d1, r2, r3
 800111c:	ec45 4b10 	vmov	d0, r4, r5
 8001120:	f007 fb6e 	bl	8008800 <fmin>
 8001124:	eeb0 8a40 	vmov.f32	s16, s0
 8001128:	eef0 8a60 	vmov.f32	s17, s1
 800112c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001130:	425b      	negs	r3, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff f9ae 	bl	8000494 <__aeabi_i2d>
 8001138:	4603      	mov	r3, r0
 800113a:	460c      	mov	r4, r1
 800113c:	ec44 3b11 	vmov	d1, r3, r4
 8001140:	eeb0 0a48 	vmov.f32	s0, s16
 8001144:	eef0 0a68 	vmov.f32	s1, s17
 8001148:	f007 fb33 	bl	80087b2 <fmax>
 800114c:	ec54 3b10 	vmov	r3, r4, d0
 8001150:	4618      	mov	r0, r3
 8001152:	4621      	mov	r1, r4
 8001154:	f7ff fcb8 	bl	8000ac8 <__aeabi_d2iz>
 8001158:	4603      	mov	r3, r0
 800115a:	b21a      	sxth	r2, r3
 800115c:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <processController+0x330>)
 800115e:	801a      	strh	r2, [r3, #0]
	RB_curr = fmax(fmin(RB_curr,MOTOR_BOUNDS),-MOTOR_BOUNDS);
 8001160:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <processController+0x338>)
 8001162:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f994 	bl	8000494 <__aeabi_i2d>
 800116c:	4604      	mov	r4, r0
 800116e:	460d      	mov	r5, r1
 8001170:	f242 7310 	movw	r3, #10000	; 0x2710
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f98d 	bl	8000494 <__aeabi_i2d>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	ec43 2b11 	vmov	d1, r2, r3
 8001182:	ec45 4b10 	vmov	d0, r4, r5
 8001186:	f007 fb3b 	bl	8008800 <fmin>
 800118a:	eeb0 8a40 	vmov.f32	s16, s0
 800118e:	eef0 8a60 	vmov.f32	s17, s1
 8001192:	f242 7310 	movw	r3, #10000	; 0x2710
 8001196:	425b      	negs	r3, r3
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f97b 	bl	8000494 <__aeabi_i2d>
 800119e:	4603      	mov	r3, r0
 80011a0:	460c      	mov	r4, r1
 80011a2:	ec44 3b11 	vmov	d1, r3, r4
 80011a6:	eeb0 0a48 	vmov.f32	s0, s16
 80011aa:	eef0 0a68 	vmov.f32	s1, s17
 80011ae:	f007 fb00 	bl	80087b2 <fmax>
 80011b2:	ec54 3b10 	vmov	r3, r4, d0
 80011b6:	4618      	mov	r0, r3
 80011b8:	4621      	mov	r1, r4
 80011ba:	f7ff fc85 	bl	8000ac8 <__aeabi_d2iz>
 80011be:	4603      	mov	r3, r0
 80011c0:	b21a      	sxth	r2, r3
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <processController+0x338>)
 80011c4:	801a      	strh	r2, [r3, #0]
	switch(rc.sw2){
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <processController+0x328>)
 80011c8:	7adb      	ldrb	r3, [r3, #11]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d116      	bne.n	80011fc <processController+0x344>
	case 1:
		flywheel_speed = 300;
 80011ce:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <processController+0x340>)
 80011d0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011d4:	801a      	strh	r2, [r3, #0]
		break;
 80011d6:	e015      	b.n	8001204 <processController+0x34c>
 80011d8:	200003a0 	.word	0x200003a0
 80011dc:	200003a2 	.word	0x200003a2
 80011e0:	200009e8 	.word	0x200009e8
 80011e4:	20000232 	.word	0x20000232
 80011e8:	2000059c 	.word	0x2000059c
 80011ec:	20000274 	.word	0x20000274
 80011f0:	20000598 	.word	0x20000598
 80011f4:	3ecccccd 	.word	0x3ecccccd
 80011f8:	20000230 	.word	0x20000230
	default:
		flywheel_speed = 0;
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <processController+0x358>)
 80011fe:	2200      	movs	r2, #0
 8001200:	801a      	strh	r2, [r3, #0]
		break;
 8001202:	bf00      	nop
	}
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	ecbd 8b02 	vpop	{d8}
 800120e:	bdb0      	pop	{r4, r5, r7, pc}
 8001210:	20000230 	.word	0x20000230

08001214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  count = 0; // keep count in while loop and reset every 10s
 800121a:	4b4d      	ldr	r3, [pc, #308]	; (8001350 <main+0x13c>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001220:	f003 fbf8 	bl	8004a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001224:	f000 f8b6 	bl	8001394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001228:	f000 fc14 	bl	8001a54 <MX_GPIO_Init>
  MX_DMA_Init();
 800122c:	f000 fbd4 	bl	80019d8 <MX_DMA_Init>
  MX_CAN1_Init();
 8001230:	f000 f91a 	bl	8001468 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001234:	f000 f94e 	bl	80014d4 <MX_CAN2_Init>
  MX_SPI5_Init();
 8001238:	f000 f982 	bl	8001540 <MX_SPI5_Init>
  MX_TIM2_Init();
 800123c:	f000 f9b6 	bl	80015ac <MX_TIM2_Init>
  MX_TIM4_Init();
 8001240:	f000 fa88 	bl	8001754 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001244:	f000 fb48 	bl	80018d8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001248:	f000 fb72 	bl	8001930 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800124c:	f000 fb9a 	bl	8001984 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8001250:	f000 fa26 	bl	80016a0 <MX_TIM3_Init>
  MX_TIM12_Init();
 8001254:	f000 fafa 	bl	800184c <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  led_off();
 8001258:	f001 f934 	bl	80024c4 <led_off>
  power_on();
 800125c:	f001 f946 	bl	80024ec <power_on>
  dbus_uart_init();
 8001260:	f002 fefa 	bl	8004058 <dbus_uart_init>
  can_filter_init();
 8001264:	f000 fe5e 	bl	8001f24 <can_filter_init>
  mpu_device_init();
 8001268:	f001 fcd0 	bl	8002c0c <mpu_device_init>
  init_quaternion();
 800126c:	f001 fe0c 	bl	8002e88 <init_quaternion>
  pwm_imu_start();
 8001270:	f002 fcee 	bl	8003c50 <pwm_imu_start>
  pwm_flywheel_start();
 8001274:	f002 fd16 	bl	8003ca4 <pwm_flywheel_start>
  //pwm_buzzer_start();
  grand_pid_init();
 8001278:	f000 ff48 	bl	800210c <grand_pid_init>
  imu_calibration();
 800127c:	f000 ffec 	bl	8002258 <imu_calibration>

  yaw_target = YAW_POS_DEFAULT;
 8001280:	4b34      	ldr	r3, [pc, #208]	; (8001354 <main+0x140>)
 8001282:	4a35      	ldr	r2, [pc, #212]	; (8001358 <main+0x144>)
 8001284:	601a      	str	r2, [r3, #0]
  pit_target = PIT_POS_DEFAULT;
 8001286:	4b35      	ldr	r3, [pc, #212]	; (800135c <main+0x148>)
 8001288:	4a35      	ldr	r2, [pc, #212]	; (8001360 <main+0x14c>)
 800128a:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	mpu_get_data();
 800128c:	f001 fb64 	bl	8002958 <mpu_get_data>
	imu_ahrs_update();
 8001290:	f001 ff36 	bl	8003100 <imu_ahrs_update>
	imu_attitude_update();
 8001294:	f002 fbd4 	bl	8003a40 <imu_attitude_update>


	imu_temp_pid_ctrl(imu.temp, 50.0f);
 8001298:	4b32      	ldr	r3, [pc, #200]	; (8001364 <main+0x150>)
 800129a:	edd3 7a03 	vldr	s15, [r3, #12]
 800129e:	eddf 0a32 	vldr	s1, [pc, #200]	; 8001368 <main+0x154>
 80012a2:	eeb0 0a67 	vmov.f32	s0, s15
 80012a6:	f001 f8e1 	bl	800246c <imu_temp_pid_ctrl>
	processController();
 80012aa:	f7ff fe05 	bl	8000eb8 <processController>
	can_transmit(&hcan1, CAN_CHASSIS_ALL_ID, LF_curr,LB_curr,RF_curr,RB_curr);
 80012ae:	4b2f      	ldr	r3, [pc, #188]	; (800136c <main+0x158>)
 80012b0:	f9b3 1000 	ldrsh.w	r1, [r3]
 80012b4:	4b2e      	ldr	r3, [pc, #184]	; (8001370 <main+0x15c>)
 80012b6:	f9b3 0000 	ldrsh.w	r0, [r3]
 80012ba:	4b2e      	ldr	r3, [pc, #184]	; (8001374 <main+0x160>)
 80012bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c0:	4a2d      	ldr	r2, [pc, #180]	; (8001378 <main+0x164>)
 80012c2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80012c6:	9201      	str	r2, [sp, #4]
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	4603      	mov	r3, r0
 80012cc:	460a      	mov	r2, r1
 80012ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d2:	482a      	ldr	r0, [pc, #168]	; (800137c <main+0x168>)
 80012d4:	f000 fe60 	bl	8001f98 <can_transmit>
	can_transmit(&hcan1, CAN_GIMBAL_ALL_ID,gimbal_yaw,gimbal_pitch, 0,0);
 80012d8:	4b29      	ldr	r3, [pc, #164]	; (8001380 <main+0x16c>)
 80012da:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012de:	4b29      	ldr	r3, [pc, #164]	; (8001384 <main+0x170>)
 80012e0:	f9b3 1000 	ldrsh.w	r1, [r3]
 80012e4:	2300      	movs	r3, #0
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	2300      	movs	r3, #0
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	460b      	mov	r3, r1
 80012ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012f2:	4822      	ldr	r0, [pc, #136]	; (800137c <main+0x168>)
 80012f4:	f000 fe50 	bl	8001f98 <can_transmit>
	set_pwm_flywheel(flywheel_speed);
 80012f8:	4b23      	ldr	r3, [pc, #140]	; (8001388 <main+0x174>)
 80012fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	4618      	mov	r0, r3
 8001302:	f002 fcdd 	bl	8003cc0 <set_pwm_flywheel>


	if (count%100 == 0)
 8001306:	4b12      	ldr	r3, [pc, #72]	; (8001350 <main+0x13c>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <main+0x178>)
 800130c:	fb83 1302 	smull	r1, r3, r3, r2
 8001310:	1159      	asrs	r1, r3, #5
 8001312:	17d3      	asrs	r3, r2, #31
 8001314:	1acb      	subs	r3, r1, r3
 8001316:	2164      	movs	r1, #100	; 0x64
 8001318:	fb01 f303 	mul.w	r3, r1, r3
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d104      	bne.n	800132c <main+0x118>
	{
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001322:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001326:	481a      	ldr	r0, [pc, #104]	; (8001390 <main+0x17c>)
 8001328:	f005 f8d1 	bl	80064ce <HAL_GPIO_TogglePin>
	}

	/* reset count every 10s */
	if (count == 2000)
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <main+0x13c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001334:	d102      	bne.n	800133c <main+0x128>
	{
		count = 0;
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <main+0x13c>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
	}
	count++;
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <main+0x13c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	3301      	adds	r3, #1
 8001342:	4a03      	ldr	r2, [pc, #12]	; (8001350 <main+0x13c>)
 8001344:	6013      	str	r3, [r2, #0]



	HAL_Delay(5);
 8001346:	2005      	movs	r0, #5
 8001348:	f003 fbd6 	bl	8004af8 <HAL_Delay>
	mpu_get_data();
 800134c:	e79e      	b.n	800128c <main+0x78>
 800134e:	bf00      	nop
 8001350:	200003a4 	.word	0x200003a4
 8001354:	200000a4 	.word	0x200000a4
 8001358:	45239000 	.word	0x45239000
 800135c:	200000a8 	.word	0x200000a8
 8001360:	45933000 	.word	0x45933000
 8001364:	200000e0 	.word	0x200000e0
 8001368:	42480000 	.word	0x42480000
 800136c:	20000232 	.word	0x20000232
 8001370:	20000274 	.word	0x20000274
 8001374:	2000059c 	.word	0x2000059c
 8001378:	20000598 	.word	0x20000598
 800137c:	20000530 	.word	0x20000530
 8001380:	200003a0 	.word	0x200003a0
 8001384:	200003a2 	.word	0x200003a2
 8001388:	20000230 	.word	0x20000230
 800138c:	51eb851f 	.word	0x51eb851f
 8001390:	40021400 	.word	0x40021400

08001394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b094      	sub	sp, #80	; 0x50
 8001398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139a:	f107 0320 	add.w	r3, r7, #32
 800139e:	2230      	movs	r2, #48	; 0x30
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f007 f9fd 	bl	80087a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a8:	f107 030c 	add.w	r3, r7, #12
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	4b28      	ldr	r3, [pc, #160]	; (8001460 <SystemClock_Config+0xcc>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c0:	4a27      	ldr	r2, [pc, #156]	; (8001460 <SystemClock_Config+0xcc>)
 80013c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c6:	6413      	str	r3, [r2, #64]	; 0x40
 80013c8:	4b25      	ldr	r3, [pc, #148]	; (8001460 <SystemClock_Config+0xcc>)
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013d4:	2300      	movs	r3, #0
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	4b22      	ldr	r3, [pc, #136]	; (8001464 <SystemClock_Config+0xd0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a21      	ldr	r2, [pc, #132]	; (8001464 <SystemClock_Config+0xd0>)
 80013de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <SystemClock_Config+0xd0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013f0:	2301      	movs	r3, #1
 80013f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013fa:	2302      	movs	r3, #2
 80013fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001402:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001404:	2306      	movs	r3, #6
 8001406:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001408:	23a8      	movs	r3, #168	; 0xa8
 800140a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800140c:	2302      	movs	r3, #2
 800140e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001410:	2304      	movs	r3, #4
 8001412:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001414:	f107 0320 	add.w	r3, r7, #32
 8001418:	4618      	mov	r0, r3
 800141a:	f005 f873 	bl	8006504 <HAL_RCC_OscConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001424:	f000 fbda 	bl	8001bdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001428:	230f      	movs	r3, #15
 800142a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800142c:	2302      	movs	r3, #2
 800142e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001434:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001438:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800143a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800143e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	2105      	movs	r1, #5
 8001446:	4618      	mov	r0, r3
 8001448:	f005 facc 	bl	80069e4 <HAL_RCC_ClockConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001452:	f000 fbc3 	bl	8001bdc <Error_Handler>
  }
}
 8001456:	bf00      	nop
 8001458:	3750      	adds	r7, #80	; 0x50
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800
 8001464:	40007000 	.word	0x40007000

08001468 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800146c:	4b17      	ldr	r3, [pc, #92]	; (80014cc <MX_CAN1_Init+0x64>)
 800146e:	4a18      	ldr	r2, [pc, #96]	; (80014d0 <MX_CAN1_Init+0x68>)
 8001470:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001472:	4b16      	ldr	r3, [pc, #88]	; (80014cc <MX_CAN1_Init+0x64>)
 8001474:	2203      	movs	r2, #3
 8001476:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001478:	4b14      	ldr	r3, [pc, #80]	; (80014cc <MX_CAN1_Init+0x64>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <MX_CAN1_Init+0x64>)
 8001480:	2200      	movs	r2, #0
 8001482:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <MX_CAN1_Init+0x64>)
 8001486:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800148a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <MX_CAN1_Init+0x64>)
 800148e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001492:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001494:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <MX_CAN1_Init+0x64>)
 8001496:	2200      	movs	r2, #0
 8001498:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800149a:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <MX_CAN1_Init+0x64>)
 800149c:	2200      	movs	r2, #0
 800149e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80014a0:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <MX_CAN1_Init+0x64>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <MX_CAN1_Init+0x64>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <MX_CAN1_Init+0x64>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <MX_CAN1_Init+0x64>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80014b8:	4804      	ldr	r0, [pc, #16]	; (80014cc <MX_CAN1_Init+0x64>)
 80014ba:	f003 fb3f 	bl	8004b3c <HAL_CAN_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80014c4:	f000 fb8a 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000530 	.word	0x20000530
 80014d0:	40006400 	.word	0x40006400

080014d4 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80014d8:	4b17      	ldr	r3, [pc, #92]	; (8001538 <MX_CAN2_Init+0x64>)
 80014da:	4a18      	ldr	r2, [pc, #96]	; (800153c <MX_CAN2_Init+0x68>)
 80014dc:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 80014de:	4b16      	ldr	r3, [pc, #88]	; (8001538 <MX_CAN2_Init+0x64>)
 80014e0:	2203      	movs	r2, #3
 80014e2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <MX_CAN2_Init+0x64>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <MX_CAN2_Init+0x64>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_9TQ;
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <MX_CAN2_Init+0x64>)
 80014f2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80014f6:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 80014f8:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <MX_CAN2_Init+0x64>)
 80014fa:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80014fe:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001500:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <MX_CAN2_Init+0x64>)
 8001502:	2200      	movs	r2, #0
 8001504:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <MX_CAN2_Init+0x64>)
 8001508:	2200      	movs	r2, #0
 800150a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <MX_CAN2_Init+0x64>)
 800150e:	2200      	movs	r2, #0
 8001510:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <MX_CAN2_Init+0x64>)
 8001514:	2200      	movs	r2, #0
 8001516:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001518:	4b07      	ldr	r3, [pc, #28]	; (8001538 <MX_CAN2_Init+0x64>)
 800151a:	2200      	movs	r2, #0
 800151c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <MX_CAN2_Init+0x64>)
 8001520:	2200      	movs	r2, #0
 8001522:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001524:	4804      	ldr	r0, [pc, #16]	; (8001538 <MX_CAN2_Init+0x64>)
 8001526:	f003 fb09 	bl	8004b3c <HAL_CAN_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001530:	f000 fb54 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000278 	.word	0x20000278
 800153c:	40006800 	.word	0x40006800

08001540 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001544:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <MX_SPI5_Init+0x64>)
 8001546:	4a18      	ldr	r2, [pc, #96]	; (80015a8 <MX_SPI5_Init+0x68>)
 8001548:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <MX_SPI5_Init+0x64>)
 800154c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001550:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001552:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <MX_SPI5_Init+0x64>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <MX_SPI5_Init+0x64>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <MX_SPI5_Init+0x64>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <MX_SPI5_Init+0x64>)
 8001566:	2200      	movs	r2, #0
 8001568:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <MX_SPI5_Init+0x64>)
 800156c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001570:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001572:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <MX_SPI5_Init+0x64>)
 8001574:	2230      	movs	r2, #48	; 0x30
 8001576:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001578:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <MX_SPI5_Init+0x64>)
 800157a:	2200      	movs	r2, #0
 800157c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800157e:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <MX_SPI5_Init+0x64>)
 8001580:	2200      	movs	r2, #0
 8001582:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <MX_SPI5_Init+0x64>)
 8001586:	2200      	movs	r2, #0
 8001588:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <MX_SPI5_Init+0x64>)
 800158c:	220a      	movs	r2, #10
 800158e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001590:	4804      	ldr	r0, [pc, #16]	; (80015a4 <MX_SPI5_Init+0x64>)
 8001592:	f005 fbf3 	bl	8006d7c <HAL_SPI_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800159c:	f000 fb1e 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000198 	.word	0x20000198
 80015a8:	40015000 	.word	0x40015000

080015ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08a      	sub	sp, #40	; 0x28
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b2:	f107 0320 	add.w	r3, r7, #32
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	611a      	str	r2, [r3, #16]
 80015ca:	615a      	str	r2, [r3, #20]
 80015cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015ce:	4b33      	ldr	r3, [pc, #204]	; (800169c <MX_TIM2_Init+0xf0>)
 80015d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = TIM_PSC_APB1;
 80015d6:	4b31      	ldr	r3, [pc, #196]	; (800169c <MX_TIM2_Init+0xf0>)
 80015d8:	22a7      	movs	r2, #167	; 0xa7
 80015da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015dc:	4b2f      	ldr	r3, [pc, #188]	; (800169c <MX_TIM2_Init+0xf0>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = PWM_RESOLUTION-1;
 80015e2:	4b2e      	ldr	r3, [pc, #184]	; (800169c <MX_TIM2_Init+0xf0>)
 80015e4:	f242 720f 	movw	r2, #9999	; 0x270f
 80015e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ea:	4b2c      	ldr	r3, [pc, #176]	; (800169c <MX_TIM2_Init+0xf0>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f0:	4b2a      	ldr	r3, [pc, #168]	; (800169c <MX_TIM2_Init+0xf0>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015f6:	4829      	ldr	r0, [pc, #164]	; (800169c <MX_TIM2_Init+0xf0>)
 80015f8:	f005 fe72 	bl	80072e0 <HAL_TIM_PWM_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001602:	f000 faeb 	bl	8001bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800160e:	f107 0320 	add.w	r3, r7, #32
 8001612:	4619      	mov	r1, r3
 8001614:	4821      	ldr	r0, [pc, #132]	; (800169c <MX_TIM2_Init+0xf0>)
 8001616:	f006 fa09 	bl	8007a2c <HAL_TIMEx_MasterConfigSynchronization>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001620:	f000 fadc 	bl	8001bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001624:	2360      	movs	r3, #96	; 0x60
 8001626:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = PWM_DEFAULT_DUTY;
 8001628:	f241 3388 	movw	r3, #5000	; 0x1388
 800162c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	2200      	movs	r2, #0
 800163a:	4619      	mov	r1, r3
 800163c:	4817      	ldr	r0, [pc, #92]	; (800169c <MX_TIM2_Init+0xf0>)
 800163e:	f005 feb9 	bl	80073b4 <HAL_TIM_PWM_ConfigChannel>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001648:	f000 fac8 	bl	8001bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	2204      	movs	r2, #4
 8001650:	4619      	mov	r1, r3
 8001652:	4812      	ldr	r0, [pc, #72]	; (800169c <MX_TIM2_Init+0xf0>)
 8001654:	f005 feae 	bl	80073b4 <HAL_TIM_PWM_ConfigChannel>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800165e:	f000 fabd 	bl	8001bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	2208      	movs	r2, #8
 8001666:	4619      	mov	r1, r3
 8001668:	480c      	ldr	r0, [pc, #48]	; (800169c <MX_TIM2_Init+0xf0>)
 800166a:	f005 fea3 	bl	80073b4 <HAL_TIM_PWM_ConfigChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8001674:	f000 fab2 	bl	8001bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	220c      	movs	r2, #12
 800167c:	4619      	mov	r1, r3
 800167e:	4807      	ldr	r0, [pc, #28]	; (800169c <MX_TIM2_Init+0xf0>)
 8001680:	f005 fe98 	bl	80073b4 <HAL_TIM_PWM_ConfigChannel>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 800168a:	f000 faa7 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800168e:	4803      	ldr	r0, [pc, #12]	; (800169c <MX_TIM2_Init+0xf0>)
 8001690:	f002 feae 	bl	80043f0 <HAL_TIM_MspPostInit>

}
 8001694:	bf00      	nop
 8001696:	3728      	adds	r7, #40	; 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200004b0 	.word	0x200004b0

080016a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	; 0x28
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a6:	f107 0320 	add.w	r3, r7, #32
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
 80016bc:	611a      	str	r2, [r3, #16]
 80016be:	615a      	str	r2, [r3, #20]
 80016c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016c2:	4b22      	ldr	r3, [pc, #136]	; (800174c <MX_TIM3_Init+0xac>)
 80016c4:	4a22      	ldr	r2, [pc, #136]	; (8001750 <MX_TIM3_Init+0xb0>)
 80016c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016c8:	4b20      	ldr	r3, [pc, #128]	; (800174c <MX_TIM3_Init+0xac>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ce:	4b1f      	ldr	r3, [pc, #124]	; (800174c <MX_TIM3_Init+0xac>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 80016d4:	4b1d      	ldr	r3, [pc, #116]	; (800174c <MX_TIM3_Init+0xac>)
 80016d6:	f241 3287 	movw	r2, #4999	; 0x1387
 80016da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <MX_TIM3_Init+0xac>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e2:	4b1a      	ldr	r3, [pc, #104]	; (800174c <MX_TIM3_Init+0xac>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016e8:	4818      	ldr	r0, [pc, #96]	; (800174c <MX_TIM3_Init+0xac>)
 80016ea:	f005 fdf9 	bl	80072e0 <HAL_TIM_PWM_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80016f4:	f000 fa72 	bl	8001bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f8:	2300      	movs	r3, #0
 80016fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001700:	f107 0320 	add.w	r3, r7, #32
 8001704:	4619      	mov	r1, r3
 8001706:	4811      	ldr	r0, [pc, #68]	; (800174c <MX_TIM3_Init+0xac>)
 8001708:	f006 f990 	bl	8007a2c <HAL_TIMEx_MasterConfigSynchronization>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001712:	f000 fa63 	bl	8001bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001716:	2360      	movs	r3, #96	; 0x60
 8001718:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	2204      	movs	r2, #4
 800172a:	4619      	mov	r1, r3
 800172c:	4807      	ldr	r0, [pc, #28]	; (800174c <MX_TIM3_Init+0xac>)
 800172e:	f005 fe41 	bl	80073b4 <HAL_TIM_PWM_ConfigChannel>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001738:	f000 fa50 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800173c:	4803      	ldr	r0, [pc, #12]	; (800174c <MX_TIM3_Init+0xac>)
 800173e:	f002 fe57 	bl	80043f0 <HAL_TIM_MspPostInit>

}
 8001742:	bf00      	nop
 8001744:	3728      	adds	r7, #40	; 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000234 	.word	0x20000234
 8001750:	40000400 	.word	0x40000400

08001754 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	; 0x28
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800175a:	f107 0320 	add.w	r3, r7, #32
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001764:	1d3b      	adds	r3, r7, #4
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
 8001770:	611a      	str	r2, [r3, #16]
 8001772:	615a      	str	r2, [r3, #20]
 8001774:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001776:	4b33      	ldr	r3, [pc, #204]	; (8001844 <MX_TIM4_Init+0xf0>)
 8001778:	4a33      	ldr	r2, [pc, #204]	; (8001848 <MX_TIM4_Init+0xf4>)
 800177a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = TIM_PSC_APB1;
 800177c:	4b31      	ldr	r3, [pc, #196]	; (8001844 <MX_TIM4_Init+0xf0>)
 800177e:	22a7      	movs	r2, #167	; 0xa7
 8001780:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001782:	4b30      	ldr	r3, [pc, #192]	; (8001844 <MX_TIM4_Init+0xf0>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = PWM_RESOLUTION-1;
 8001788:	4b2e      	ldr	r3, [pc, #184]	; (8001844 <MX_TIM4_Init+0xf0>)
 800178a:	f242 720f 	movw	r2, #9999	; 0x270f
 800178e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001790:	4b2c      	ldr	r3, [pc, #176]	; (8001844 <MX_TIM4_Init+0xf0>)
 8001792:	2200      	movs	r2, #0
 8001794:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001796:	4b2b      	ldr	r3, [pc, #172]	; (8001844 <MX_TIM4_Init+0xf0>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800179c:	4829      	ldr	r0, [pc, #164]	; (8001844 <MX_TIM4_Init+0xf0>)
 800179e:	f005 fd9f 	bl	80072e0 <HAL_TIM_PWM_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80017a8:	f000 fa18 	bl	8001bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ac:	2300      	movs	r3, #0
 80017ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017b4:	f107 0320 	add.w	r3, r7, #32
 80017b8:	4619      	mov	r1, r3
 80017ba:	4822      	ldr	r0, [pc, #136]	; (8001844 <MX_TIM4_Init+0xf0>)
 80017bc:	f006 f936 	bl	8007a2c <HAL_TIMEx_MasterConfigSynchronization>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80017c6:	f000 fa09 	bl	8001bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ca:	2360      	movs	r3, #96	; 0x60
 80017cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = PWM_DEFAULT_DUTY;
 80017ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80017d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	2200      	movs	r2, #0
 80017e0:	4619      	mov	r1, r3
 80017e2:	4818      	ldr	r0, [pc, #96]	; (8001844 <MX_TIM4_Init+0xf0>)
 80017e4:	f005 fde6 	bl	80073b4 <HAL_TIM_PWM_ConfigChannel>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80017ee:	f000 f9f5 	bl	8001bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	2204      	movs	r2, #4
 80017f6:	4619      	mov	r1, r3
 80017f8:	4812      	ldr	r0, [pc, #72]	; (8001844 <MX_TIM4_Init+0xf0>)
 80017fa:	f005 fddb 	bl	80073b4 <HAL_TIM_PWM_ConfigChannel>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001804:	f000 f9ea 	bl	8001bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	2208      	movs	r2, #8
 800180c:	4619      	mov	r1, r3
 800180e:	480d      	ldr	r0, [pc, #52]	; (8001844 <MX_TIM4_Init+0xf0>)
 8001810:	f005 fdd0 	bl	80073b4 <HAL_TIM_PWM_ConfigChannel>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 800181a:	f000 f9df 	bl	8001bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	220c      	movs	r2, #12
 8001822:	4619      	mov	r1, r3
 8001824:	4807      	ldr	r0, [pc, #28]	; (8001844 <MX_TIM4_Init+0xf0>)
 8001826:	f005 fdc5 	bl	80073b4 <HAL_TIM_PWM_ConfigChannel>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8001830:	f000 f9d4 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001834:	4803      	ldr	r0, [pc, #12]	; (8001844 <MX_TIM4_Init+0xf0>)
 8001836:	f002 fddb 	bl	80043f0 <HAL_TIM_MspPostInit>

}
 800183a:	bf00      	nop
 800183c:	3728      	adds	r7, #40	; 0x28
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200001f0 	.word	0x200001f0
 8001848:	40000800 	.word	0x40000800

0800184c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b088      	sub	sp, #32
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
 8001860:	615a      	str	r2, [r3, #20]
 8001862:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001864:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <MX_TIM12_Init+0x84>)
 8001866:	4a1b      	ldr	r2, [pc, #108]	; (80018d4 <MX_TIM12_Init+0x88>)
 8001868:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 3;
 800186a:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <MX_TIM12_Init+0x84>)
 800186c:	2203      	movs	r2, #3
 800186e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001870:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <MX_TIM12_Init+0x84>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 7777;
 8001876:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <MX_TIM12_Init+0x84>)
 8001878:	f641 6261 	movw	r2, #7777	; 0x1e61
 800187c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187e:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <MX_TIM12_Init+0x84>)
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <MX_TIM12_Init+0x84>)
 8001886:	2200      	movs	r2, #0
 8001888:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800188a:	4811      	ldr	r0, [pc, #68]	; (80018d0 <MX_TIM12_Init+0x84>)
 800188c:	f005 fd28 	bl	80072e0 <HAL_TIM_PWM_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001896:	f000 f9a1 	bl	8001bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800189a:	2360      	movs	r3, #96	; 0x60
 800189c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	2200      	movs	r2, #0
 80018ae:	4619      	mov	r1, r3
 80018b0:	4807      	ldr	r0, [pc, #28]	; (80018d0 <MX_TIM12_Init+0x84>)
 80018b2:	f005 fd7f 	bl	80073b4 <HAL_TIM_PWM_ConfigChannel>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80018bc:	f000 f98e 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80018c0:	4803      	ldr	r0, [pc, #12]	; (80018d0 <MX_TIM12_Init+0x84>)
 80018c2:	f002 fd95 	bl	80043f0 <HAL_TIM_MspPostInit>

}
 80018c6:	bf00      	nop
 80018c8:	3720      	adds	r7, #32
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000558 	.word	0x20000558
 80018d4:	40001800 	.word	0x40001800

080018d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 80018de:	4a12      	ldr	r2, [pc, #72]	; (8001928 <MX_USART1_UART_Init+0x50>)
 80018e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 80018e2:	4b10      	ldr	r3, [pc, #64]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 80018e4:	4a11      	ldr	r2, [pc, #68]	; (800192c <MX_USART1_UART_Init+0x54>)
 80018e6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018e8:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018ee:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 80018f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 80018fe:	220c      	movs	r2, #12
 8001900:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 800190a:	2200      	movs	r2, #0
 800190c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800190e:	4805      	ldr	r0, [pc, #20]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 8001910:	f006 f908 	bl	8007b24 <HAL_UART_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800191a:	f000 f95f 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000360 	.word	0x20000360
 8001928:	40011000 	.word	0x40011000
 800192c:	000186a0 	.word	0x000186a0

08001930 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001934:	4b11      	ldr	r3, [pc, #68]	; (800197c <MX_USART2_UART_Init+0x4c>)
 8001936:	4a12      	ldr	r2, [pc, #72]	; (8001980 <MX_USART2_UART_Init+0x50>)
 8001938:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <MX_USART2_UART_Init+0x4c>)
 800193c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001940:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001942:	4b0e      	ldr	r3, [pc, #56]	; (800197c <MX_USART2_UART_Init+0x4c>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <MX_USART2_UART_Init+0x4c>)
 800194a:	2200      	movs	r2, #0
 800194c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <MX_USART2_UART_Init+0x4c>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001954:	4b09      	ldr	r3, [pc, #36]	; (800197c <MX_USART2_UART_Init+0x4c>)
 8001956:	220c      	movs	r2, #12
 8001958:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800195a:	4b08      	ldr	r3, [pc, #32]	; (800197c <MX_USART2_UART_Init+0x4c>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <MX_USART2_UART_Init+0x4c>)
 8001962:	2200      	movs	r2, #0
 8001964:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001966:	4805      	ldr	r0, [pc, #20]	; (800197c <MX_USART2_UART_Init+0x4c>)
 8001968:	f006 f8dc 	bl	8007b24 <HAL_UART_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001972:	f000 f933 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	200004f0 	.word	0x200004f0
 8001980:	40004400 	.word	0x40004400

08001984 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001988:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <MX_USART6_UART_Init+0x4c>)
 800198a:	4a12      	ldr	r2, [pc, #72]	; (80019d4 <MX_USART6_UART_Init+0x50>)
 800198c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <MX_USART6_UART_Init+0x4c>)
 8001990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001994:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <MX_USART6_UART_Init+0x4c>)
 8001998:	2200      	movs	r2, #0
 800199a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <MX_USART6_UART_Init+0x4c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <MX_USART6_UART_Init+0x4c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <MX_USART6_UART_Init+0x4c>)
 80019aa:	220c      	movs	r2, #12
 80019ac:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ae:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <MX_USART6_UART_Init+0x4c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <MX_USART6_UART_Init+0x4c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80019ba:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_USART6_UART_Init+0x4c>)
 80019bc:	f006 f8b2 	bl	8007b24 <HAL_UART_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80019c6:	f000 f909 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200003a8 	.word	0x200003a8
 80019d4:	40011400 	.word	0x40011400

080019d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <MX_DMA_Init+0x78>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a1a      	ldr	r2, [pc, #104]	; (8001a50 <MX_DMA_Init+0x78>)
 80019e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <MX_DMA_Init+0x78>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	603b      	str	r3, [r7, #0]
 80019fe:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <MX_DMA_Init+0x78>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a13      	ldr	r2, [pc, #76]	; (8001a50 <MX_DMA_Init+0x78>)
 8001a04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <MX_DMA_Init+0x78>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2100      	movs	r1, #0
 8001a1a:	2010      	movs	r0, #16
 8001a1c:	f003 ffe9 	bl	80059f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001a20:	2010      	movs	r0, #16
 8001a22:	f004 f802 	bl	8005a2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2100      	movs	r1, #0
 8001a2a:	2011      	movs	r0, #17
 8001a2c:	f003 ffe1 	bl	80059f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001a30:	2011      	movs	r0, #17
 8001a32:	f003 fffa 	bl	8005a2a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2100      	movs	r1, #0
 8001a3a:	203a      	movs	r0, #58	; 0x3a
 8001a3c:	f003 ffd9 	bl	80059f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a40:	203a      	movs	r0, #58	; 0x3a
 8001a42:	f003 fff2 	bl	8005a2a <HAL_NVIC_EnableIRQ>

}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800

08001a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08c      	sub	sp, #48	; 0x30
 8001a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5a:	f107 031c 	add.w	r3, r7, #28
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
 8001a68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
 8001a6e:	4b57      	ldr	r3, [pc, #348]	; (8001bcc <MX_GPIO_Init+0x178>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a56      	ldr	r2, [pc, #344]	; (8001bcc <MX_GPIO_Init+0x178>)
 8001a74:	f043 0310 	orr.w	r3, r3, #16
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b54      	ldr	r3, [pc, #336]	; (8001bcc <MX_GPIO_Init+0x178>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0310 	and.w	r3, r3, #16
 8001a82:	61bb      	str	r3, [r7, #24]
 8001a84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	4b50      	ldr	r3, [pc, #320]	; (8001bcc <MX_GPIO_Init+0x178>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a4f      	ldr	r2, [pc, #316]	; (8001bcc <MX_GPIO_Init+0x178>)
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b4d      	ldr	r3, [pc, #308]	; (8001bcc <MX_GPIO_Init+0x178>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	4b49      	ldr	r3, [pc, #292]	; (8001bcc <MX_GPIO_Init+0x178>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a48      	ldr	r2, [pc, #288]	; (8001bcc <MX_GPIO_Init+0x178>)
 8001aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b46      	ldr	r3, [pc, #280]	; (8001bcc <MX_GPIO_Init+0x178>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b42      	ldr	r3, [pc, #264]	; (8001bcc <MX_GPIO_Init+0x178>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a41      	ldr	r2, [pc, #260]	; (8001bcc <MX_GPIO_Init+0x178>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b3f      	ldr	r3, [pc, #252]	; (8001bcc <MX_GPIO_Init+0x178>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	4b3b      	ldr	r3, [pc, #236]	; (8001bcc <MX_GPIO_Init+0x178>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a3a      	ldr	r2, [pc, #232]	; (8001bcc <MX_GPIO_Init+0x178>)
 8001ae4:	f043 0308 	orr.w	r3, r3, #8
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b38      	ldr	r3, [pc, #224]	; (8001bcc <MX_GPIO_Init+0x178>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	4b34      	ldr	r3, [pc, #208]	; (8001bcc <MX_GPIO_Init+0x178>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a33      	ldr	r2, [pc, #204]	; (8001bcc <MX_GPIO_Init+0x178>)
 8001b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b31      	ldr	r3, [pc, #196]	; (8001bcc <MX_GPIO_Init+0x178>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <MX_GPIO_Init+0x178>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a2c      	ldr	r2, [pc, #176]	; (8001bcc <MX_GPIO_Init+0x178>)
 8001b1c:	f043 0320 	orr.w	r3, r3, #32
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b2a      	ldr	r3, [pc, #168]	; (8001bcc <MX_GPIO_Init+0x178>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0320 	and.w	r3, r3, #32
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IST_INT_Pin|IST_RST_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f640 010c 	movw	r1, #2060	; 0x80c
 8001b34:	4826      	ldr	r0, [pc, #152]	; (8001bd0 <MX_GPIO_Init+0x17c>)
 8001b36:	f004 fcb1 	bl	800649c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	213c      	movs	r1, #60	; 0x3c
 8001b3e:	4825      	ldr	r0, [pc, #148]	; (8001bd4 <MX_GPIO_Init+0x180>)
 8001b40:	f004 fcac 	bl	800649c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|LED_GREEN_Pin, GPIO_PIN_RESET);
 8001b44:	2200      	movs	r2, #0
 8001b46:	f244 0140 	movw	r1, #16448	; 0x4040
 8001b4a:	4823      	ldr	r0, [pc, #140]	; (8001bd8 <MX_GPIO_Init+0x184>)
 8001b4c:	f004 fca6 	bl	800649c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IST_INT_Pin IST_RST_Pin */
  GPIO_InitStruct.Pin = IST_INT_Pin|IST_RST_Pin;
 8001b50:	230c      	movs	r3, #12
 8001b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b54:	2301      	movs	r3, #1
 8001b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b60:	f107 031c 	add.w	r3, r7, #28
 8001b64:	4619      	mov	r1, r3
 8001b66:	481a      	ldr	r0, [pc, #104]	; (8001bd0 <MX_GPIO_Init+0x17c>)
 8001b68:	f004 faee 	bl	8006148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH2 PH3 PH4 PH5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001b6c:	233c      	movs	r3, #60	; 0x3c
 8001b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b70:	2301      	movs	r3, #1
 8001b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b7c:	f107 031c 	add.w	r3, r7, #28
 8001b80:	4619      	mov	r1, r3
 8001b82:	4814      	ldr	r0, [pc, #80]	; (8001bd4 <MX_GPIO_Init+0x180>)
 8001b84:	f004 fae0 	bl	8006148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 LED_GREEN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|LED_GREEN_Pin;
 8001b88:	f244 0340 	movw	r3, #16448	; 0x4040
 8001b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	2300      	movs	r3, #0
 8001b98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b9a:	f107 031c 	add.w	r3, r7, #28
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	480d      	ldr	r0, [pc, #52]	; (8001bd8 <MX_GPIO_Init+0x184>)
 8001ba2:	f004 fad1 	bl	8006148 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001ba6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bac:	2301      	movs	r3, #1
 8001bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4804      	ldr	r0, [pc, #16]	; (8001bd0 <MX_GPIO_Init+0x17c>)
 8001bc0:	f004 fac2 	bl	8006148 <HAL_GPIO_Init>

}
 8001bc4:	bf00      	nop
 8001bc6:	3730      	adds	r7, #48	; 0x30
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40021c00 	.word	0x40021c00
 8001bd8:	40021400 	.word	0x40021400

08001bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <PID_init>:
  * @param[in]      max_out: pid最大输出
  * @param[in]      max_iout: pid最大积分输出
  * @retval         none
  */
void PID_init(pid_type_def *pid, unsigned char mode, const float PID[3], float max_out, float max_iout)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b087      	sub	sp, #28
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6178      	str	r0, [r7, #20]
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	60fa      	str	r2, [r7, #12]
 8001bf6:	ed87 0a02 	vstr	s0, [r7, #8]
 8001bfa:	edc7 0a01 	vstr	s1, [r7, #4]
 8001bfe:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d040      	beq.n	8001c88 <PID_init+0x9e>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d03d      	beq.n	8001c88 <PID_init+0x9e>
    {
        return;
    }
    pid->mode = mode;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	7cfa      	ldrb	r2, [r7, #19]
 8001c10:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	639a      	str	r2, [r3, #56]	; 0x38
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	635a      	str	r2, [r3, #52]	; 0x34
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	631a      	str	r2, [r3, #48]	; 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	621a      	str	r2, [r3, #32]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	6a1a      	ldr	r2, [r3, #32]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	629a      	str	r2, [r3, #40]	; 0x28
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	625a      	str	r2, [r3, #36]	; 0x24
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	645a      	str	r2, [r3, #68]	; 0x44
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	641a      	str	r2, [r3, #64]	; 0x40
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c86:	e000      	b.n	8001c8a <PID_init+0xa0>
        return;
 8001c88:	bf00      	nop
}
 8001c8a:	371c      	adds	r7, #28
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <PID_calc>:
  * @param[in]      ref: 反馈数据
  * @param[in]      set: 设定值
  * @retval         pid输出
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ca0:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d102      	bne.n	8001cb0 <PID_calc+0x1c>
    {
        return 0.0f;
 8001caa:	f04f 0300 	mov.w	r3, #0
 8001cae:	e130      	b.n	8001f12 <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	645a      	str	r2, [r3, #68]	; 0x44
    pid->error[1] = pid->error[0];
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	641a      	str	r2, [r3, #64]	; 0x40
    pid->set = set;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	68ba      	ldr	r2, [r7, #8]
 8001cca:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 8001ccc:	ed97 7a01 	vldr	s14, [r7, #4]
 8001cd0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    if (pid->mode == PID_POSITION)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f040 8095 	bne.w	8001e12 <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	ed93 7a01 	vldr	s14, [r3, #4]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001cf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        pid->Iout += pid->Ki * pid->error[0];
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	edd3 6a02 	vldr	s13, [r3, #8]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001d10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	639a      	str	r2, [r3, #56]	; 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	635a      	str	r2, [r3, #52]	; 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001d3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6e:	dd04      	ble.n	8001d7a <PID_calc+0xe6>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	695a      	ldr	r2, [r3, #20]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	629a      	str	r2, [r3, #40]	; 0x28
 8001d78:	e014      	b.n	8001da4 <PID_calc+0x110>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d86:	eef1 7a67 	vneg.f32	s15, s15
 8001d8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d92:	d507      	bpl.n	8001da4 <PID_calc+0x110>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d9a:	eef1 7a67 	vneg.f32	s15, s15
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001db0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001dba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	ed93 7a08 	vldr	s14, [r3, #32]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001dd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd8:	dd04      	ble.n	8001de4 <PID_calc+0x150>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	691a      	ldr	r2, [r3, #16]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	621a      	str	r2, [r3, #32]
 8001de2:	e094      	b.n	8001f0e <PID_calc+0x27a>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	ed93 7a08 	vldr	s14, [r3, #32]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	edd3 7a04 	vldr	s15, [r3, #16]
 8001df0:	eef1 7a67 	vneg.f32	s15, s15
 8001df4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dfc:	f140 8087 	bpl.w	8001f0e <PID_calc+0x27a>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e06:	eef1 7a67 	vneg.f32	s15, s15
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	edc3 7a08 	vstr	s15, [r3, #32]
 8001e10:	e07d      	b.n	8001f0e <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d179      	bne.n	8001f0e <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001e2c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        pid->Iout = pid->Ki * pid->error[0];
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	639a      	str	r2, [r3, #56]	; 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	635a      	str	r2, [r3, #52]	; 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001e6c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001e7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	ed93 7a03 	vldr	s14, [r3, #12]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001eac:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001eba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	ed93 7a08 	vldr	s14, [r3, #32]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ed0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed8:	dd04      	ble.n	8001ee4 <PID_calc+0x250>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	691a      	ldr	r2, [r3, #16]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	621a      	str	r2, [r3, #32]
 8001ee2:	e014      	b.n	8001f0e <PID_calc+0x27a>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	ed93 7a08 	vldr	s14, [r3, #32]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ef0:	eef1 7a67 	vneg.f32	s15, s15
 8001ef4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efc:	d507      	bpl.n	8001f0e <PID_calc+0x27a>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f04:	eef1 7a67 	vneg.f32	s15, s15
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	ee07 3a90 	vmov	s15, r3
}
 8001f16:	eeb0 0a67 	vmov.f32	s0, s15
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <can_filter_init>:
#include "rm_can.h"

motor_measure_t motors[NUM_MOTORS];

void can_filter_init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af00      	add	r7, sp, #0
	//can1 &can2 use same filter config
	CAN_FilterTypeDef can_filter_st;
	can_filter_st.FilterActivation = ENABLE;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	623b      	str	r3, [r7, #32]
	can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61bb      	str	r3, [r7, #24]
	can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8001f32:	2301      	movs	r3, #1
 8001f34:	61fb      	str	r3, [r7, #28]
	can_filter_st.FilterIdHigh = 0x0000;
 8001f36:	2300      	movs	r3, #0
 8001f38:	603b      	str	r3, [r7, #0]
	can_filter_st.FilterIdLow = 0x0000;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	607b      	str	r3, [r7, #4]
	can_filter_st.FilterMaskIdHigh = 0x0000;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
	can_filter_st.FilterMaskIdLow = 0x0000;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
	can_filter_st.FilterBank = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
	can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
	HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 8001f4e:	463b      	mov	r3, r7
 8001f50:	4619      	mov	r1, r3
 8001f52:	480f      	ldr	r0, [pc, #60]	; (8001f90 <can_filter_init+0x6c>)
 8001f54:	f002 feee 	bl	8004d34 <HAL_CAN_ConfigFilter>
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){}
 8001f58:	2102      	movs	r1, #2
 8001f5a:	480d      	ldr	r0, [pc, #52]	; (8001f90 <can_filter_init+0x6c>)
 8001f5c:	f003 fa1f 	bl	800539e <HAL_CAN_ActivateNotification>
	HAL_CAN_Start(&hcan1);
 8001f60:	480b      	ldr	r0, [pc, #44]	; (8001f90 <can_filter_init+0x6c>)
 8001f62:	f002 ffc7 	bl	8004ef4 <HAL_CAN_Start>

	can_filter_st.SlaveStartFilterBank = 14;
 8001f66:	230e      	movs	r3, #14
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
	can_filter_st.FilterBank = 14;
 8001f6a:	230e      	movs	r3, #14
 8001f6c:	617b      	str	r3, [r7, #20]
	HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 8001f6e:	463b      	mov	r3, r7
 8001f70:	4619      	mov	r1, r3
 8001f72:	4808      	ldr	r0, [pc, #32]	; (8001f94 <can_filter_init+0x70>)
 8001f74:	f002 fede 	bl	8004d34 <HAL_CAN_ConfigFilter>
	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){}
 8001f78:	2102      	movs	r1, #2
 8001f7a:	4806      	ldr	r0, [pc, #24]	; (8001f94 <can_filter_init+0x70>)
 8001f7c:	f003 fa0f 	bl	800539e <HAL_CAN_ActivateNotification>
	HAL_CAN_Start(&hcan2);
 8001f80:	4804      	ldr	r0, [pc, #16]	; (8001f94 <can_filter_init+0x70>)
 8001f82:	f002 ffb7 	bl	8004ef4 <HAL_CAN_Start>
}
 8001f86:	bf00      	nop
 8001f88:	3728      	adds	r7, #40	; 0x28
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000530 	.word	0x20000530
 8001f94:	20000278 	.word	0x20000278

08001f98 <can_transmit>:

void can_transmit(CAN_HandleTypeDef* hcan, uint16_t id, int16_t msg1, int16_t msg2, int16_t msg3, int16_t msg4) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08e      	sub	sp, #56	; 0x38
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	4608      	mov	r0, r1
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	817b      	strh	r3, [r7, #10]
 8001faa:	460b      	mov	r3, r1
 8001fac:	813b      	strh	r3, [r7, #8]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	80fb      	strh	r3, [r7, #6]
    CAN_TxHeaderTypeDef tx_header;
    uint8_t             data[8];
    uint32_t            pTxMailbox;

    tx_header.StdId = id;
 8001fb2:	897b      	ldrh	r3, [r7, #10]
 8001fb4:	623b      	str	r3, [r7, #32]
    tx_header.IDE   = CAN_ID_STD;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	62bb      	str	r3, [r7, #40]	; 0x28
    tx_header.RTR   = CAN_RTR_DATA;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    tx_header.DLC   = 0x08;
 8001fbe:	2308      	movs	r3, #8
 8001fc0:	633b      	str	r3, [r7, #48]	; 0x30
    tx_header.TransmitGlobalTime = DISABLE;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    data[0] = msg1 >> 8; 	//Higher 8 bits of ESC 1
 8001fc8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001fcc:	121b      	asrs	r3, r3, #8
 8001fce:	b21b      	sxth	r3, r3
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	763b      	strb	r3, [r7, #24]
    data[1] = msg1;		//Lower 8 bits of ESC 1
 8001fd4:	893b      	ldrh	r3, [r7, #8]
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	767b      	strb	r3, [r7, #25]
    data[2] = msg2 >> 8;
 8001fda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fde:	121b      	asrs	r3, r3, #8
 8001fe0:	b21b      	sxth	r3, r3
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	76bb      	strb	r3, [r7, #26]
    data[3] = msg2;
 8001fe6:	88fb      	ldrh	r3, [r7, #6]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	76fb      	strb	r3, [r7, #27]
    data[4] = msg3 >> 8;
 8001fec:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8001ff0:	121b      	asrs	r3, r3, #8
 8001ff2:	b21b      	sxth	r3, r3
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	773b      	strb	r3, [r7, #28]
    data[5] = msg3;
 8001ff8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	777b      	strb	r3, [r7, #29]
    data[6] = msg4 >> 8;
 8002000:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8002004:	121b      	asrs	r3, r3, #8
 8002006:	b21b      	sxth	r3, r3
 8002008:	b2db      	uxtb	r3, r3
 800200a:	77bb      	strb	r3, [r7, #30]
    data[7] = msg4;
 800200c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002010:	b2db      	uxtb	r3, r3
 8002012:	77fb      	strb	r3, [r7, #31]

    if (HAL_CAN_AddTxMessage(hcan, &tx_header, data, &pTxMailbox) != HAL_OK){}
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	f107 0218 	add.w	r2, r7, #24
 800201c:	f107 0120 	add.w	r1, r7, #32
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f002 ffab 	bl	8004f7c <HAL_CAN_AddTxMessage>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d108      	bne.n	800203e <can_transmit+0xa6>
        //bsp_error_handler(__FUNCTION__, __LINE__, "can transmit fail");
    else
        while (HAL_CAN_IsTxMessagePending(hcan, pTxMailbox));
 800202c:	bf00      	nop
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	4619      	mov	r1, r3
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f003 f87d 	bl	8005132 <HAL_CAN_IsTxMessagePending>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f7      	bne.n	800202e <can_transmit+0x96>
}
 800203e:	bf00      	nop
 8002040:	3738      	adds	r7, #56	; 0x38
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002048:	b580      	push	{r7, lr}
 800204a:	b08c      	sub	sp, #48	; 0x30
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[CAN_DATA_SIZE];

    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 8002050:	f107 0308 	add.w	r3, r7, #8
 8002054:	f107 0210 	add.w	r2, r7, #16
 8002058:	2100      	movs	r1, #0
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f003 f88d 	bl	800517a <HAL_CAN_GetRxMessage>
    uint8_t idx = rx_header.StdId - CAN_RX_ID_START;
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	b2db      	uxtb	r3, r3
 8002064:	3b01      	subs	r3, #1
 8002066:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    get_motor_measure(&motors[idx], rx_data);
 800206a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800206e:	4613      	mov	r3, r2
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	4413      	add	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4a06      	ldr	r2, [pc, #24]	; (8002090 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8002078:	4413      	add	r3, r2
 800207a:	f107 0208 	add.w	r2, r7, #8
 800207e:	4611      	mov	r1, r2
 8002080:	4618      	mov	r0, r3
 8002082:	f000 f807 	bl	8002094 <get_motor_measure>

}
 8002086:	bf00      	nop
 8002088:	3730      	adds	r7, #48	; 0x30
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	200005a0 	.word	0x200005a0

08002094 <get_motor_measure>:

void get_motor_measure(motor_measure_t* m, uint8_t data[CAN_DATA_SIZE]){
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
    (m)->last_ecd = (m)->ecd;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	b21a      	sxth	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	811a      	strh	r2, [r3, #8]
    (m)->ecd = (uint16_t)((data)[0] << 8 | (data)[1]);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	021b      	lsls	r3, r3, #8
 80020ae:	b21a      	sxth	r2, r3
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	3301      	adds	r3, #1
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	b21b      	sxth	r3, r3
 80020b8:	4313      	orrs	r3, r2
 80020ba:	b21b      	sxth	r3, r3
 80020bc:	b29a      	uxth	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	801a      	strh	r2, [r3, #0]
    (m)->speed_rpm = (uint16_t)((data)[2] << 8 | (data)[3]);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	3302      	adds	r3, #2
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	021b      	lsls	r3, r3, #8
 80020ca:	b21a      	sxth	r2, r3
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	3303      	adds	r3, #3
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	4313      	orrs	r3, r2
 80020d6:	b21a      	sxth	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	805a      	strh	r2, [r3, #2]
    (m)->given_current = (uint16_t)((data)[4] << 8 | (data)[5]);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	3304      	adds	r3, #4
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	021b      	lsls	r3, r3, #8
 80020e4:	b21a      	sxth	r2, r3
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	3305      	adds	r3, #5
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	b21b      	sxth	r3, r3
 80020ee:	4313      	orrs	r3, r2
 80020f0:	b21a      	sxth	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	809a      	strh	r2, [r3, #4]
    (m)->temperature = (data)[6];
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	799a      	ldrb	r2, [r3, #6]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	719a      	strb	r2, [r3, #6]
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
	...

0800210c <grand_pid_init>:
pid_type_def pit_pos_ecd_pid;
const float pit_rpm_ecd_PID[3] = {10, 0.1, 0};
pid_type_def pit_rpm_ecd_pid;


void grand_pid_init(){
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
	PID_init(&imu_temp_pid, PID_POSITION, imu_temp_PID, TEMPERATURE_PID_MAX_OUT, TEMPERATURE_PID_MAX_IOUT);
 8002112:	eddf 0a37 	vldr	s1, [pc, #220]	; 80021f0 <grand_pid_init+0xe4>
 8002116:	ed9f 0a37 	vldr	s0, [pc, #220]	; 80021f4 <grand_pid_init+0xe8>
 800211a:	4a37      	ldr	r2, [pc, #220]	; (80021f8 <grand_pid_init+0xec>)
 800211c:	2100      	movs	r1, #0
 800211e:	4837      	ldr	r0, [pc, #220]	; (80021fc <grand_pid_init+0xf0>)
 8002120:	f7ff fd63 	bl	8001bea <PID_init>

	for (int i = 0; i < 4; i++){
 8002124:	2300      	movs	r3, #0
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	e012      	b.n	8002150 <grand_pid_init+0x44>
		PID_init(&wheels_rpm_pid[i], PID_POSITION, wheels_rpm_PID, 16384, 1000);
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4413      	add	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4a32      	ldr	r2, [pc, #200]	; (8002200 <grand_pid_init+0xf4>)
 8002136:	4413      	add	r3, r2
 8002138:	eddf 0a32 	vldr	s1, [pc, #200]	; 8002204 <grand_pid_init+0xf8>
 800213c:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8002208 <grand_pid_init+0xfc>
 8002140:	4a32      	ldr	r2, [pc, #200]	; (800220c <grand_pid_init+0x100>)
 8002142:	2100      	movs	r1, #0
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff fd50 	bl	8001bea <PID_init>
	for (int i = 0; i < 4; i++){
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3301      	adds	r3, #1
 800214e:	607b      	str	r3, [r7, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b03      	cmp	r3, #3
 8002154:	dde9      	ble.n	800212a <grand_pid_init+0x1e>
	}

	PID_init(&yaw_deg_imu_pid, PID_POSITION, yaw_deg_imu_PID, 10000, 5000);
 8002156:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8002210 <grand_pid_init+0x104>
 800215a:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8002214 <grand_pid_init+0x108>
 800215e:	4a2e      	ldr	r2, [pc, #184]	; (8002218 <grand_pid_init+0x10c>)
 8002160:	2100      	movs	r1, #0
 8002162:	482e      	ldr	r0, [pc, #184]	; (800221c <grand_pid_init+0x110>)
 8002164:	f7ff fd41 	bl	8001bea <PID_init>
	PID_init(&yaw_rpm_imu_pid, PID_POSITION, yaw_rpm_imu_PID, 16384, 5000);
 8002168:	eddf 0a29 	vldr	s1, [pc, #164]	; 8002210 <grand_pid_init+0x104>
 800216c:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8002208 <grand_pid_init+0xfc>
 8002170:	4a2b      	ldr	r2, [pc, #172]	; (8002220 <grand_pid_init+0x114>)
 8002172:	2100      	movs	r1, #0
 8002174:	482b      	ldr	r0, [pc, #172]	; (8002224 <grand_pid_init+0x118>)
 8002176:	f7ff fd38 	bl	8001bea <PID_init>
	PID_init(&yaw_pos_ecd_pid, PID_POSITION, yaw_pos_ecd_PID, 10000, 5000);
 800217a:	eddf 0a25 	vldr	s1, [pc, #148]	; 8002210 <grand_pid_init+0x104>
 800217e:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8002214 <grand_pid_init+0x108>
 8002182:	4a29      	ldr	r2, [pc, #164]	; (8002228 <grand_pid_init+0x11c>)
 8002184:	2100      	movs	r1, #0
 8002186:	4829      	ldr	r0, [pc, #164]	; (800222c <grand_pid_init+0x120>)
 8002188:	f7ff fd2f 	bl	8001bea <PID_init>
	PID_init(&yaw_rpm_ecd_pid, PID_POSITION, yaw_rpm_ecd_PID, 16384, 5000);
 800218c:	eddf 0a20 	vldr	s1, [pc, #128]	; 8002210 <grand_pid_init+0x104>
 8002190:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8002208 <grand_pid_init+0xfc>
 8002194:	4a26      	ldr	r2, [pc, #152]	; (8002230 <grand_pid_init+0x124>)
 8002196:	2100      	movs	r1, #0
 8002198:	4826      	ldr	r0, [pc, #152]	; (8002234 <grand_pid_init+0x128>)
 800219a:	f7ff fd26 	bl	8001bea <PID_init>

	PID_init(&pit_deg_imu_pid, PID_POSITION, pit_deg_imu_PID, 10000, 5000);
 800219e:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8002210 <grand_pid_init+0x104>
 80021a2:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8002214 <grand_pid_init+0x108>
 80021a6:	4a24      	ldr	r2, [pc, #144]	; (8002238 <grand_pid_init+0x12c>)
 80021a8:	2100      	movs	r1, #0
 80021aa:	4824      	ldr	r0, [pc, #144]	; (800223c <grand_pid_init+0x130>)
 80021ac:	f7ff fd1d 	bl	8001bea <PID_init>
	PID_init(&pit_rpm_imu_pid, PID_POSITION, pit_rpm_imu_PID, 16384, 5000);
 80021b0:	eddf 0a17 	vldr	s1, [pc, #92]	; 8002210 <grand_pid_init+0x104>
 80021b4:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8002208 <grand_pid_init+0xfc>
 80021b8:	4a21      	ldr	r2, [pc, #132]	; (8002240 <grand_pid_init+0x134>)
 80021ba:	2100      	movs	r1, #0
 80021bc:	4821      	ldr	r0, [pc, #132]	; (8002244 <grand_pid_init+0x138>)
 80021be:	f7ff fd14 	bl	8001bea <PID_init>
	PID_init(&pit_pos_ecd_pid, PID_POSITION, pit_pos_ecd_PID, 10000, 5000);
 80021c2:	eddf 0a13 	vldr	s1, [pc, #76]	; 8002210 <grand_pid_init+0x104>
 80021c6:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8002214 <grand_pid_init+0x108>
 80021ca:	4a1f      	ldr	r2, [pc, #124]	; (8002248 <grand_pid_init+0x13c>)
 80021cc:	2100      	movs	r1, #0
 80021ce:	481f      	ldr	r0, [pc, #124]	; (800224c <grand_pid_init+0x140>)
 80021d0:	f7ff fd0b 	bl	8001bea <PID_init>
	PID_init(&pit_rpm_ecd_pid, PID_POSITION, pit_rpm_ecd_PID, 16384, 5000);
 80021d4:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8002210 <grand_pid_init+0x104>
 80021d8:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002208 <grand_pid_init+0xfc>
 80021dc:	4a1c      	ldr	r2, [pc, #112]	; (8002250 <grand_pid_init+0x144>)
 80021de:	2100      	movs	r1, #0
 80021e0:	481c      	ldr	r0, [pc, #112]	; (8002254 <grand_pid_init+0x148>)
 80021e2:	f7ff fd02 	bl	8001bea <PID_init>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	45898000 	.word	0x45898000
 80021f4:	458ca000 	.word	0x458ca000
 80021f8:	080094d0 	.word	0x080094d0
 80021fc:	20000684 	.word	0x20000684
 8002200:	200007ec 	.word	0x200007ec
 8002204:	447a0000 	.word	0x447a0000
 8002208:	46800000 	.word	0x46800000
 800220c:	080094dc 	.word	0x080094dc
 8002210:	459c4000 	.word	0x459c4000
 8002214:	461c4000 	.word	0x461c4000
 8002218:	080094e8 	.word	0x080094e8
 800221c:	2000090c 	.word	0x2000090c
 8002220:	080094f4 	.word	0x080094f4
 8002224:	200005f4 	.word	0x200005f4
 8002228:	08009500 	.word	0x08009500
 800222c:	200007a4 	.word	0x200007a4
 8002230:	0800950c 	.word	0x0800950c
 8002234:	200006cc 	.word	0x200006cc
 8002238:	08009518 	.word	0x08009518
 800223c:	20000954 	.word	0x20000954
 8002240:	08009524 	.word	0x08009524
 8002244:	2000063c 	.word	0x2000063c
 8002248:	08009530 	.word	0x08009530
 800224c:	20000714 	.word	0x20000714
 8002250:	0800953c 	.word	0x0800953c
 8002254:	2000075c 	.word	0x2000075c

08002258 <imu_calibration>:

void imu_calibration(){
 8002258:	b580      	push	{r7, lr}
 800225a:	b08a      	sub	sp, #40	; 0x28
 800225c:	af00      	add	r7, sp, #0
	  mpu_data.gx_offset=0;
 800225e:	4b7e      	ldr	r3, [pc, #504]	; (8002458 <imu_calibration+0x200>)
 8002260:	2200      	movs	r2, #0
 8002262:	835a      	strh	r2, [r3, #26]
	  mpu_data.gy_offset=0;
 8002264:	4b7c      	ldr	r3, [pc, #496]	; (8002458 <imu_calibration+0x200>)
 8002266:	2200      	movs	r2, #0
 8002268:	839a      	strh	r2, [r3, #28]
	  mpu_data.gz_offset=0;
 800226a:	4b7b      	ldr	r3, [pc, #492]	; (8002458 <imu_calibration+0x200>)
 800226c:	2200      	movs	r2, #0
 800226e:	83da      	strh	r2, [r3, #30]
	  long gx_off_int = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
	  long gy_off_int = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	623b      	str	r3, [r7, #32]
	  long gz_off_int = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	61fb      	str	r3, [r7, #28]

	  mpu_data.ax_offset=0;
 800227c:	4b76      	ldr	r3, [pc, #472]	; (8002458 <imu_calibration+0x200>)
 800227e:	2200      	movs	r2, #0
 8002280:	829a      	strh	r2, [r3, #20]
	  mpu_data.ay_offset=0;
 8002282:	4b75      	ldr	r3, [pc, #468]	; (8002458 <imu_calibration+0x200>)
 8002284:	2200      	movs	r2, #0
 8002286:	82da      	strh	r2, [r3, #22]
	  mpu_data.az_offset=0;
 8002288:	4b73      	ldr	r3, [pc, #460]	; (8002458 <imu_calibration+0x200>)
 800228a:	2200      	movs	r2, #0
 800228c:	831a      	strh	r2, [r3, #24]
	  long ax_off_int = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	61bb      	str	r3, [r7, #24]
	  long ay_off_int = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
	  long az_off_int = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]

	  int offset_counter = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
	  int wait_for_stable = 500;
 800229e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80022a2:	60bb      	str	r3, [r7, #8]
	  set_pwm_buzzer(2000);
 80022a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80022a8:	f001 fcec 	bl	8003c84 <set_pwm_buzzer>
	  HAL_Delay(100);
 80022ac:	2064      	movs	r0, #100	; 0x64
 80022ae:	f002 fc23 	bl	8004af8 <HAL_Delay>
	  set_pwm_buzzer(0);
 80022b2:	2000      	movs	r0, #0
 80022b4:	f001 fce6 	bl	8003c84 <set_pwm_buzzer>
	  while (offset_counter < 500)
 80022b8:	e069      	b.n	800238e <imu_calibration+0x136>
	  {
		  mpu_get_data();
 80022ba:	f000 fb4d 	bl	8002958 <mpu_get_data>
		  if (imu.temp < 48.0f){
 80022be:	4b67      	ldr	r3, [pc, #412]	; (800245c <imu_calibration+0x204>)
 80022c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80022c4:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8002460 <imu_calibration+0x208>
 80022c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d0:	d504      	bpl.n	80022dc <imu_calibration+0x84>
			  set_pwm_imu((unsigned short int)TEMPERATURE_PID_MAX_OUT);
 80022d2:	f241 1094 	movw	r0, #4500	; 0x1194
 80022d6:	f001 fcc5 	bl	8003c64 <set_pwm_imu>
 80022da:	e008      	b.n	80022ee <imu_calibration+0x96>
		  } else {
			  imu_temp_pid_ctrl(imu.temp, 50.0f);
 80022dc:	4b5f      	ldr	r3, [pc, #380]	; (800245c <imu_calibration+0x204>)
 80022de:	edd3 7a03 	vldr	s15, [r3, #12]
 80022e2:	eddf 0a60 	vldr	s1, [pc, #384]	; 8002464 <imu_calibration+0x20c>
 80022e6:	eeb0 0a67 	vmov.f32	s0, s15
 80022ea:	f000 f8bf 	bl	800246c <imu_temp_pid_ctrl>
		  }
		  /* Wait until the temperature is stable */
		  if (abs(imu.temp - 50.0f) < 1.0f)
 80022ee:	4b5b      	ldr	r3, [pc, #364]	; (800245c <imu_calibration+0x204>)
 80022f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80022f4:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8002464 <imu_calibration+0x20c>
 80022f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002300:	ee17 3a90 	vmov	r3, s15
 8002304:	2b00      	cmp	r3, #0
 8002306:	bfb8      	it	lt
 8002308:	425b      	neglt	r3, r3
 800230a:	ee07 3a90 	vmov	s15, r3
 800230e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002312:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002316:	eef4 7ac7 	vcmpe.f32	s15, s14
 800231a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231e:	d533      	bpl.n	8002388 <imu_calibration+0x130>
		  {
			  if (wait_for_stable == 0){
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d12d      	bne.n	8002382 <imu_calibration+0x12a>
				  ax_off_int += mpu_data.ax;
 8002326:	4b4c      	ldr	r3, [pc, #304]	; (8002458 <imu_calibration+0x200>)
 8002328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800232c:	461a      	mov	r2, r3
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	4413      	add	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
				  ay_off_int += mpu_data.ay;
 8002334:	4b48      	ldr	r3, [pc, #288]	; (8002458 <imu_calibration+0x200>)
 8002336:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800233a:	461a      	mov	r2, r3
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	4413      	add	r3, r2
 8002340:	617b      	str	r3, [r7, #20]
				  az_off_int += mpu_data.az;
 8002342:	4b45      	ldr	r3, [pc, #276]	; (8002458 <imu_calibration+0x200>)
 8002344:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002348:	461a      	mov	r2, r3
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4413      	add	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
				  gx_off_int += mpu_data.gx;
 8002350:	4b41      	ldr	r3, [pc, #260]	; (8002458 <imu_calibration+0x200>)
 8002352:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002356:	461a      	mov	r2, r3
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	4413      	add	r3, r2
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
				  gy_off_int += mpu_data.gy;
 800235e:	4b3e      	ldr	r3, [pc, #248]	; (8002458 <imu_calibration+0x200>)
 8002360:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002364:	461a      	mov	r2, r3
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	4413      	add	r3, r2
 800236a:	623b      	str	r3, [r7, #32]
				  gz_off_int += mpu_data.gz;
 800236c:	4b3a      	ldr	r3, [pc, #232]	; (8002458 <imu_calibration+0x200>)
 800236e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002372:	461a      	mov	r2, r3
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	4413      	add	r3, r2
 8002378:	61fb      	str	r3, [r7, #28]
				  offset_counter++;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	3301      	adds	r3, #1
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	e002      	b.n	8002388 <imu_calibration+0x130>
			  } else {
				  wait_for_stable--;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	3b01      	subs	r3, #1
 8002386:	60bb      	str	r3, [r7, #8]
			  }
		  }
		  HAL_Delay(5);
 8002388:	2005      	movs	r0, #5
 800238a:	f002 fbb5 	bl	8004af8 <HAL_Delay>
	  while (offset_counter < 500)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002394:	db91      	blt.n	80022ba <imu_calibration+0x62>
	  }
	  mpu_data.ax_offset= ax_off_int / 500;
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	4a33      	ldr	r2, [pc, #204]	; (8002468 <imu_calibration+0x210>)
 800239a:	fb82 1203 	smull	r1, r2, r2, r3
 800239e:	1152      	asrs	r2, r2, #5
 80023a0:	17db      	asrs	r3, r3, #31
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	b21a      	sxth	r2, r3
 80023a6:	4b2c      	ldr	r3, [pc, #176]	; (8002458 <imu_calibration+0x200>)
 80023a8:	829a      	strh	r2, [r3, #20]
	  mpu_data.ay_offset= ay_off_int / 500;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	4a2e      	ldr	r2, [pc, #184]	; (8002468 <imu_calibration+0x210>)
 80023ae:	fb82 1203 	smull	r1, r2, r2, r3
 80023b2:	1152      	asrs	r2, r2, #5
 80023b4:	17db      	asrs	r3, r3, #31
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	b21a      	sxth	r2, r3
 80023ba:	4b27      	ldr	r3, [pc, #156]	; (8002458 <imu_calibration+0x200>)
 80023bc:	82da      	strh	r2, [r3, #22]
	  mpu_data.az_offset= az_off_int / 500 - 4096; // gravity
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4a29      	ldr	r2, [pc, #164]	; (8002468 <imu_calibration+0x210>)
 80023c2:	fb82 1203 	smull	r1, r2, r2, r3
 80023c6:	1152      	asrs	r2, r2, #5
 80023c8:	17db      	asrs	r3, r3, #31
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	b21a      	sxth	r2, r3
 80023d6:	4b20      	ldr	r3, [pc, #128]	; (8002458 <imu_calibration+0x200>)
 80023d8:	831a      	strh	r2, [r3, #24]
	  mpu_data.gx_offset= gx_off_int / 500;
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	4a22      	ldr	r2, [pc, #136]	; (8002468 <imu_calibration+0x210>)
 80023de:	fb82 1203 	smull	r1, r2, r2, r3
 80023e2:	1152      	asrs	r2, r2, #5
 80023e4:	17db      	asrs	r3, r3, #31
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	b21a      	sxth	r2, r3
 80023ea:	4b1b      	ldr	r3, [pc, #108]	; (8002458 <imu_calibration+0x200>)
 80023ec:	835a      	strh	r2, [r3, #26]
	  mpu_data.gy_offset= gy_off_int / 500;
 80023ee:	6a3b      	ldr	r3, [r7, #32]
 80023f0:	4a1d      	ldr	r2, [pc, #116]	; (8002468 <imu_calibration+0x210>)
 80023f2:	fb82 1203 	smull	r1, r2, r2, r3
 80023f6:	1152      	asrs	r2, r2, #5
 80023f8:	17db      	asrs	r3, r3, #31
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	b21a      	sxth	r2, r3
 80023fe:	4b16      	ldr	r3, [pc, #88]	; (8002458 <imu_calibration+0x200>)
 8002400:	839a      	strh	r2, [r3, #28]
	  mpu_data.gz_offset= gz_off_int / 500;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	4a18      	ldr	r2, [pc, #96]	; (8002468 <imu_calibration+0x210>)
 8002406:	fb82 1203 	smull	r1, r2, r2, r3
 800240a:	1152      	asrs	r2, r2, #5
 800240c:	17db      	asrs	r3, r3, #31
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	b21a      	sxth	r2, r3
 8002412:	4b11      	ldr	r3, [pc, #68]	; (8002458 <imu_calibration+0x200>)
 8002414:	83da      	strh	r2, [r3, #30]
	  set_pwm_buzzer(2000);
 8002416:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800241a:	f001 fc33 	bl	8003c84 <set_pwm_buzzer>
	  HAL_Delay(100);
 800241e:	2064      	movs	r0, #100	; 0x64
 8002420:	f002 fb6a 	bl	8004af8 <HAL_Delay>
	  set_pwm_buzzer(0);
 8002424:	2000      	movs	r0, #0
 8002426:	f001 fc2d 	bl	8003c84 <set_pwm_buzzer>

	  for(int i = 0; i < 400; i++){
 800242a:	2300      	movs	r3, #0
 800242c:	607b      	str	r3, [r7, #4]
 800242e:	e00b      	b.n	8002448 <imu_calibration+0x1f0>
		  mpu_get_data();
 8002430:	f000 fa92 	bl	8002958 <mpu_get_data>
		  imu_ahrs_update();
 8002434:	f000 fe64 	bl	8003100 <imu_ahrs_update>
		  imu_attitude_update();
 8002438:	f001 fb02 	bl	8003a40 <imu_attitude_update>
		  HAL_Delay(5);
 800243c:	2005      	movs	r0, #5
 800243e:	f002 fb5b 	bl	8004af8 <HAL_Delay>
	  for(int i = 0; i < 400; i++){
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3301      	adds	r3, #1
 8002446:	607b      	str	r3, [r7, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800244e:	dbef      	blt.n	8002430 <imu_calibration+0x1d8>
	  }
}
 8002450:	bf00      	nop
 8002452:	3728      	adds	r7, #40	; 0x28
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	200009b0 	.word	0x200009b0
 800245c:	200000e0 	.word	0x200000e0
 8002460:	42400000 	.word	0x42400000
 8002464:	42480000 	.word	0x42480000
 8002468:	10624dd3 	.word	0x10624dd3

0800246c <imu_temp_pid_ctrl>:

void imu_temp_pid_ctrl(float feedback, float target){
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	ed87 0a01 	vstr	s0, [r7, #4]
 8002476:	edc7 0a00 	vstr	s1, [r7]
	PID_calc(&imu_temp_pid, feedback, target);
 800247a:	edd7 0a00 	vldr	s1, [r7]
 800247e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002482:	480f      	ldr	r0, [pc, #60]	; (80024c0 <imu_temp_pid_ctrl+0x54>)
 8002484:	f7ff fc06 	bl	8001c94 <PID_calc>
	if (imu_temp_pid.out < 0.0f)
 8002488:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <imu_temp_pid_ctrl+0x54>)
 800248a:	edd3 7a08 	vldr	s15, [r3, #32]
 800248e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002496:	d503      	bpl.n	80024a0 <imu_temp_pid_ctrl+0x34>
	{
		imu_temp_pid.out = 0.0f;
 8002498:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <imu_temp_pid_ctrl+0x54>)
 800249a:	f04f 0200 	mov.w	r2, #0
 800249e:	621a      	str	r2, [r3, #32]
	}
	set_pwm_imu((unsigned short int) imu_temp_pid.out);
 80024a0:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <imu_temp_pid_ctrl+0x54>)
 80024a2:	edd3 7a08 	vldr	s15, [r3, #32]
 80024a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024aa:	ee17 3a90 	vmov	r3, s15
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	4618      	mov	r0, r3
 80024b2:	f001 fbd7 	bl	8003c64 <set_pwm_imu>
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000684 	.word	0x20000684

080024c4 <led_off>:
 */


#include "rm_gpio.h"

void led_off(void){
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80024c8:	2201      	movs	r2, #1
 80024ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024ce:	4805      	ldr	r0, [pc, #20]	; (80024e4 <led_off+0x20>)
 80024d0:	f003 ffe4 	bl	800649c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80024d4:	2201      	movs	r2, #1
 80024d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024da:	4803      	ldr	r0, [pc, #12]	; (80024e8 <led_off+0x24>)
 80024dc:	f003 ffde 	bl	800649c <HAL_GPIO_WritePin>
}
 80024e0:	bf00      	nop
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40021400 	.word	0x40021400
 80024e8:	40021000 	.word	0x40021000

080024ec <power_on>:

void power_on(void){
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_SET);
 80024f0:	2201      	movs	r2, #1
 80024f2:	213c      	movs	r1, #60	; 0x3c
 80024f4:	4802      	ldr	r0, [pc, #8]	; (8002500 <power_on+0x14>)
 80024f6:	f003 ffd1 	bl	800649c <HAL_GPIO_WritePin>
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40021c00 	.word	0x40021c00

08002504 <inv_sqrt>:
  * @param  x: the number need to be calculated
  * @retval 1/Sqrt(x)
  * @usage  call in imu_ahrs_update() function
  */
float inv_sqrt(float x)
{
 8002504:	b480      	push	{r7}
 8002506:	b087      	sub	sp, #28
 8002508:	af00      	add	r7, sp, #0
 800250a:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 800250e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002512:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002516:	ee67 7a87 	vmul.f32	s15, s15, s14
 800251a:	edc7 7a05 	vstr	s15, [r7, #20]
	float y     = x;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	613b      	str	r3, [r7, #16]
	long  i     = *(long*)&y;
 8002522:	f107 0310 	add.w	r3, r7, #16
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	60fb      	str	r3, [r7, #12]

	i = 0x5f3759df - (i >> 1);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	105a      	asrs	r2, r3, #1
 800252e:	4b12      	ldr	r3, [pc, #72]	; (8002578 <inv_sqrt+0x74>)
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002534:	f107 030c 	add.w	r3, r7, #12
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 800253c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002540:	edd7 7a05 	vldr	s15, [r7, #20]
 8002544:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002548:	edd7 7a04 	vldr	s15, [r7, #16]
 800254c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002550:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002554:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002558:	edd7 7a04 	vldr	s15, [r7, #16]
 800255c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002560:	edc7 7a04 	vstr	s15, [r7, #16]

	return y;
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	ee07 3a90 	vmov	s15, r3
}
 800256a:	eeb0 0a67 	vmov.f32	s0, s15
 800256e:	371c      	adds	r7, #28
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	5f3759df 	.word	0x5f3759df

0800257c <mpu_write_byte>:
  *                 mpu_set_gyro_fsr(),
  *                 mpu_set_accel_fsr(),
  *                 mpu_device_init() function
  */
uint8_t mpu_write_byte(uint8_t const reg, uint8_t const data)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af02      	add	r7, sp, #8
 8002582:	4603      	mov	r3, r0
 8002584:	460a      	mov	r2, r1
 8002586:	71fb      	strb	r3, [r7, #7]
 8002588:	4613      	mov	r3, r2
 800258a:	71bb      	strb	r3, [r7, #6]
    MPU_NSS_LOW;
 800258c:	2200      	movs	r2, #0
 800258e:	2140      	movs	r1, #64	; 0x40
 8002590:	4812      	ldr	r0, [pc, #72]	; (80025dc <mpu_write_byte+0x60>)
 8002592:	f003 ff83 	bl	800649c <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800259c:	b2da      	uxtb	r2, r3
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <mpu_write_byte+0x64>)
 80025a0:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80025a2:	2337      	movs	r3, #55	; 0x37
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	2301      	movs	r3, #1
 80025a8:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <mpu_write_byte+0x68>)
 80025aa:	490d      	ldr	r1, [pc, #52]	; (80025e0 <mpu_write_byte+0x64>)
 80025ac:	480e      	ldr	r0, [pc, #56]	; (80025e8 <mpu_write_byte+0x6c>)
 80025ae:	f004 fc49 	bl	8006e44 <HAL_SPI_TransmitReceive>
    tx = data;
 80025b2:	4a0b      	ldr	r2, [pc, #44]	; (80025e0 <mpu_write_byte+0x64>)
 80025b4:	79bb      	ldrb	r3, [r7, #6]
 80025b6:	7013      	strb	r3, [r2, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80025b8:	2337      	movs	r3, #55	; 0x37
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	2301      	movs	r3, #1
 80025be:	4a09      	ldr	r2, [pc, #36]	; (80025e4 <mpu_write_byte+0x68>)
 80025c0:	4907      	ldr	r1, [pc, #28]	; (80025e0 <mpu_write_byte+0x64>)
 80025c2:	4809      	ldr	r0, [pc, #36]	; (80025e8 <mpu_write_byte+0x6c>)
 80025c4:	f004 fc3e 	bl	8006e44 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80025c8:	2201      	movs	r2, #1
 80025ca:	2140      	movs	r1, #64	; 0x40
 80025cc:	4803      	ldr	r0, [pc, #12]	; (80025dc <mpu_write_byte+0x60>)
 80025ce:	f003 ff65 	bl	800649c <HAL_GPIO_WritePin>
    return 0;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40021400 	.word	0x40021400
 80025e0:	200000dc 	.word	0x200000dc
 80025e4:	200000dd 	.word	0x200000dd
 80025e8:	20000198 	.word	0x20000198

080025ec <mpu_read_byte>:
  * @retval
  * @usage  call in ist_reg_read_by_mpu(),
  *                 mpu_device_init() function
  */
uint8_t mpu_read_byte(uint8_t const reg)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af02      	add	r7, sp, #8
 80025f2:	4603      	mov	r3, r0
 80025f4:	71fb      	strb	r3, [r7, #7]
    MPU_NSS_LOW;
 80025f6:	2200      	movs	r2, #0
 80025f8:	2140      	movs	r1, #64	; 0x40
 80025fa:	4812      	ldr	r0, [pc, #72]	; (8002644 <mpu_read_byte+0x58>)
 80025fc:	f003 ff4e 	bl	800649c <HAL_GPIO_WritePin>
    tx = reg | 0x80;
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002606:	b2da      	uxtb	r2, r3
 8002608:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <mpu_read_byte+0x5c>)
 800260a:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800260c:	2337      	movs	r3, #55	; 0x37
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	2301      	movs	r3, #1
 8002612:	4a0e      	ldr	r2, [pc, #56]	; (800264c <mpu_read_byte+0x60>)
 8002614:	490c      	ldr	r1, [pc, #48]	; (8002648 <mpu_read_byte+0x5c>)
 8002616:	480e      	ldr	r0, [pc, #56]	; (8002650 <mpu_read_byte+0x64>)
 8002618:	f004 fc14 	bl	8006e44 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800261c:	2337      	movs	r3, #55	; 0x37
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	2301      	movs	r3, #1
 8002622:	4a0a      	ldr	r2, [pc, #40]	; (800264c <mpu_read_byte+0x60>)
 8002624:	4908      	ldr	r1, [pc, #32]	; (8002648 <mpu_read_byte+0x5c>)
 8002626:	480a      	ldr	r0, [pc, #40]	; (8002650 <mpu_read_byte+0x64>)
 8002628:	f004 fc0c 	bl	8006e44 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 800262c:	2201      	movs	r2, #1
 800262e:	2140      	movs	r1, #64	; 0x40
 8002630:	4804      	ldr	r0, [pc, #16]	; (8002644 <mpu_read_byte+0x58>)
 8002632:	f003 ff33 	bl	800649c <HAL_GPIO_WritePin>
    return rx;
 8002636:	4b05      	ldr	r3, [pc, #20]	; (800264c <mpu_read_byte+0x60>)
 8002638:	781b      	ldrb	r3, [r3, #0]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40021400 	.word	0x40021400
 8002648:	200000dc 	.word	0x200000dc
 800264c:	200000dd 	.word	0x200000dd
 8002650:	20000198 	.word	0x20000198

08002654 <mpu_read_bytes>:
  * @usage  call in ist8310_get_data(),
  *                 mpu_get_data(),
  *                 mpu_offset_call() function
  */
uint8_t mpu_read_bytes(uint8_t const regAddr, uint8_t* pData, uint8_t len)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af02      	add	r7, sp, #8
 800265a:	4603      	mov	r3, r0
 800265c:	6039      	str	r1, [r7, #0]
 800265e:	71fb      	strb	r3, [r7, #7]
 8002660:	4613      	mov	r3, r2
 8002662:	71bb      	strb	r3, [r7, #6]
    MPU_NSS_LOW;
 8002664:	2200      	movs	r2, #0
 8002666:	2140      	movs	r1, #64	; 0x40
 8002668:	4814      	ldr	r0, [pc, #80]	; (80026bc <mpu_read_bytes+0x68>)
 800266a:	f003 ff17 	bl	800649c <HAL_GPIO_WritePin>
    tx         = regAddr | 0x80;
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002674:	b2da      	uxtb	r2, r3
 8002676:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <mpu_read_bytes+0x6c>)
 8002678:	701a      	strb	r2, [r3, #0]
    tx_buff[0] = tx;
 800267a:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <mpu_read_bytes+0x6c>)
 800267c:	781a      	ldrb	r2, [r3, #0]
 800267e:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <mpu_read_bytes+0x70>)
 8002680:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8002682:	2337      	movs	r3, #55	; 0x37
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	2301      	movs	r3, #1
 8002688:	4a0f      	ldr	r2, [pc, #60]	; (80026c8 <mpu_read_bytes+0x74>)
 800268a:	490d      	ldr	r1, [pc, #52]	; (80026c0 <mpu_read_bytes+0x6c>)
 800268c:	480f      	ldr	r0, [pc, #60]	; (80026cc <mpu_read_bytes+0x78>)
 800268e:	f004 fbd9 	bl	8006e44 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, tx_buff, pData, len, 55);
 8002692:	79bb      	ldrb	r3, [r7, #6]
 8002694:	b29a      	uxth	r2, r3
 8002696:	2337      	movs	r3, #55	; 0x37
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	4613      	mov	r3, r2
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	4909      	ldr	r1, [pc, #36]	; (80026c4 <mpu_read_bytes+0x70>)
 80026a0:	480a      	ldr	r0, [pc, #40]	; (80026cc <mpu_read_bytes+0x78>)
 80026a2:	f004 fbcf 	bl	8006e44 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80026a6:	2201      	movs	r2, #1
 80026a8:	2140      	movs	r1, #64	; 0x40
 80026aa:	4804      	ldr	r0, [pc, #16]	; (80026bc <mpu_read_bytes+0x68>)
 80026ac:	f003 fef6 	bl	800649c <HAL_GPIO_WritePin>
    return 0;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40021400 	.word	0x40021400
 80026c0:	200000dc 	.word	0x200000dc
 80026c4:	20000004 	.word	0x20000004
 80026c8:	200000dd 	.word	0x200000dd
 80026cc:	20000198 	.word	0x20000198

080026d0 <ist_reg_write_by_mpu>:
  *         data: data to be written
	* @retval
  * @usage  call in ist8310_init() function
	*/
static void ist_reg_write_by_mpu(uint8_t addr, uint8_t data)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	460a      	mov	r2, r1
 80026da:	71fb      	strb	r3, [r7, #7]
 80026dc:	4613      	mov	r3, r2
 80026de:	71bb      	strb	r3, [r7, #6]
    /* turn off slave 1 at first */
    mpu_write_byte(MPU6500_I2C_SLV1_CTRL, 0x00);
 80026e0:	2100      	movs	r1, #0
 80026e2:	202a      	movs	r0, #42	; 0x2a
 80026e4:	f7ff ff4a 	bl	800257c <mpu_write_byte>
    MPU_DELAY(2);
 80026e8:	2002      	movs	r0, #2
 80026ea:	f002 fa05 	bl	8004af8 <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV1_REG, addr);
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	4619      	mov	r1, r3
 80026f2:	2029      	movs	r0, #41	; 0x29
 80026f4:	f7ff ff42 	bl	800257c <mpu_write_byte>
    MPU_DELAY(2);
 80026f8:	2002      	movs	r0, #2
 80026fa:	f002 f9fd 	bl	8004af8 <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV1_DO, data);
 80026fe:	79bb      	ldrb	r3, [r7, #6]
 8002700:	4619      	mov	r1, r3
 8002702:	2064      	movs	r0, #100	; 0x64
 8002704:	f7ff ff3a 	bl	800257c <mpu_write_byte>
    MPU_DELAY(2);
 8002708:	2002      	movs	r0, #2
 800270a:	f002 f9f5 	bl	8004af8 <HAL_Delay>
    /* turn on slave 1 with one byte transmitting */
    mpu_write_byte(MPU6500_I2C_SLV1_CTRL, 0x80 | 0x01);
 800270e:	2181      	movs	r1, #129	; 0x81
 8002710:	202a      	movs	r0, #42	; 0x2a
 8002712:	f7ff ff33 	bl	800257c <mpu_write_byte>
    /* wait longer to ensure the data is transmitted from slave 1 */
    MPU_DELAY(10);
 8002716:	200a      	movs	r0, #10
 8002718:	f002 f9ee 	bl	8004af8 <HAL_Delay>
}
 800271c:	bf00      	nop
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <ist_reg_read_by_mpu>:
	* @param  addr: the address to be read of IST8310's register
	* @retval
  * @usage  call in ist8310_init() function
	*/
static uint8_t ist_reg_read_by_mpu(uint8_t addr)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	71fb      	strb	r3, [r7, #7]
    uint8_t retval;
    mpu_write_byte(MPU6500_I2C_SLV4_REG, addr);
 800272e:	79fb      	ldrb	r3, [r7, #7]
 8002730:	4619      	mov	r1, r3
 8002732:	2032      	movs	r0, #50	; 0x32
 8002734:	f7ff ff22 	bl	800257c <mpu_write_byte>
    MPU_DELAY(10);
 8002738:	200a      	movs	r0, #10
 800273a:	f002 f9dd 	bl	8004af8 <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV4_CTRL, 0x80);
 800273e:	2180      	movs	r1, #128	; 0x80
 8002740:	2034      	movs	r0, #52	; 0x34
 8002742:	f7ff ff1b 	bl	800257c <mpu_write_byte>
    MPU_DELAY(10);
 8002746:	200a      	movs	r0, #10
 8002748:	f002 f9d6 	bl	8004af8 <HAL_Delay>
    retval = mpu_read_byte(MPU6500_I2C_SLV4_DI);
 800274c:	2035      	movs	r0, #53	; 0x35
 800274e:	f7ff ff4d 	bl	80025ec <mpu_read_byte>
 8002752:	4603      	mov	r3, r0
 8002754:	73fb      	strb	r3, [r7, #15]
    /* turn off slave4 after read */
    mpu_write_byte(MPU6500_I2C_SLV4_CTRL, 0x00);
 8002756:	2100      	movs	r1, #0
 8002758:	2034      	movs	r0, #52	; 0x34
 800275a:	f7ff ff0f 	bl	800257c <mpu_write_byte>
    MPU_DELAY(10);
 800275e:	200a      	movs	r0, #10
 8002760:	f002 f9ca 	bl	8004af8 <HAL_Delay>
    return retval;
 8002764:	7bfb      	ldrb	r3, [r7, #15]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <mpu_master_i2c_auto_read_config>:
* @param    device_address: slave device address, Address[6:0]
	* @retval   void
	* @note
	*/
static void mpu_master_i2c_auto_read_config(uint8_t device_address, uint8_t reg_base_addr, uint8_t data_num)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	4603      	mov	r3, r0
 8002776:	71fb      	strb	r3, [r7, #7]
 8002778:	460b      	mov	r3, r1
 800277a:	71bb      	strb	r3, [r7, #6]
 800277c:	4613      	mov	r3, r2
 800277e:	717b      	strb	r3, [r7, #5]
    /*
	   * configure the device address of the IST8310
     * use slave1, auto transmit single measure mode
	   */
    mpu_write_byte(MPU6500_I2C_SLV1_ADDR, device_address);
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	4619      	mov	r1, r3
 8002784:	2028      	movs	r0, #40	; 0x28
 8002786:	f7ff fef9 	bl	800257c <mpu_write_byte>
    MPU_DELAY(2);
 800278a:	2002      	movs	r0, #2
 800278c:	f002 f9b4 	bl	8004af8 <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV1_REG, IST8310_R_CONFA);
 8002790:	210a      	movs	r1, #10
 8002792:	2029      	movs	r0, #41	; 0x29
 8002794:	f7ff fef2 	bl	800257c <mpu_write_byte>
    MPU_DELAY(2);
 8002798:	2002      	movs	r0, #2
 800279a:	f002 f9ad 	bl	8004af8 <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV1_DO, IST8310_ODR_MODE);
 800279e:	2101      	movs	r1, #1
 80027a0:	2064      	movs	r0, #100	; 0x64
 80027a2:	f7ff feeb 	bl	800257c <mpu_write_byte>
    MPU_DELAY(2);
 80027a6:	2002      	movs	r0, #2
 80027a8:	f002 f9a6 	bl	8004af8 <HAL_Delay>

    /* use slave0,auto read data */
    mpu_write_byte(MPU6500_I2C_SLV0_ADDR, 0x80 | device_address);
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	4619      	mov	r1, r3
 80027b6:	2025      	movs	r0, #37	; 0x25
 80027b8:	f7ff fee0 	bl	800257c <mpu_write_byte>
    MPU_DELAY(2);
 80027bc:	2002      	movs	r0, #2
 80027be:	f002 f99b 	bl	8004af8 <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV0_REG, reg_base_addr);
 80027c2:	79bb      	ldrb	r3, [r7, #6]
 80027c4:	4619      	mov	r1, r3
 80027c6:	2026      	movs	r0, #38	; 0x26
 80027c8:	f7ff fed8 	bl	800257c <mpu_write_byte>
    MPU_DELAY(2);
 80027cc:	2002      	movs	r0, #2
 80027ce:	f002 f993 	bl	8004af8 <HAL_Delay>

    /* every eight mpu6500 internal samples one i2c master read */
    mpu_write_byte(MPU6500_I2C_SLV4_CTRL, 0x03);
 80027d2:	2103      	movs	r1, #3
 80027d4:	2034      	movs	r0, #52	; 0x34
 80027d6:	f7ff fed1 	bl	800257c <mpu_write_byte>
    MPU_DELAY(2);
 80027da:	2002      	movs	r0, #2
 80027dc:	f002 f98c 	bl	8004af8 <HAL_Delay>
    /* enable slave 0 and 1 access delay */
    mpu_write_byte(MPU6500_I2C_MST_DELAY_CTRL, 0x01 | 0x02);
 80027e0:	2103      	movs	r1, #3
 80027e2:	2067      	movs	r0, #103	; 0x67
 80027e4:	f7ff feca 	bl	800257c <mpu_write_byte>
    MPU_DELAY(2);
 80027e8:	2002      	movs	r0, #2
 80027ea:	f002 f985 	bl	8004af8 <HAL_Delay>
    /* enable slave 1 auto transmit */
    mpu_write_byte(MPU6500_I2C_SLV1_CTRL, 0x80 | 0x01);
 80027ee:	2181      	movs	r1, #129	; 0x81
 80027f0:	202a      	movs	r0, #42	; 0x2a
 80027f2:	f7ff fec3 	bl	800257c <mpu_write_byte>
		/* Wait 6ms (minimum waiting time for 16 times internal average setup) */
    MPU_DELAY(6);
 80027f6:	2006      	movs	r0, #6
 80027f8:	f002 f97e 	bl	8004af8 <HAL_Delay>
    /* enable slave 0 with data_num bytes reading */
    mpu_write_byte(MPU6500_I2C_SLV0_CTRL, 0x80 | data_num);
 80027fc:	797b      	ldrb	r3, [r7, #5]
 80027fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002802:	b2db      	uxtb	r3, r3
 8002804:	4619      	mov	r1, r3
 8002806:	2027      	movs	r0, #39	; 0x27
 8002808:	f7ff feb8 	bl	800257c <mpu_write_byte>
    MPU_DELAY(2);
 800280c:	2002      	movs	r0, #2
 800280e:	f002 f973 	bl	8004af8 <HAL_Delay>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
	...

0800281c <ist8310_init>:
	* @param
	* @retval
  * @usage  call in mpu_device_init() function
	*/
uint8_t ist8310_init()
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
	IST8310_NSS_High(); // modified
 8002820:	2201      	movs	r2, #1
 8002822:	2104      	movs	r1, #4
 8002824:	4844      	ldr	r0, [pc, #272]	; (8002938 <ist8310_init+0x11c>)
 8002826:	f003 fe39 	bl	800649c <HAL_GPIO_WritePin>
	  /* enable iic master mode */
    mpu_write_byte(MPU6500_USER_CTRL, 0x30);
 800282a:	2130      	movs	r1, #48	; 0x30
 800282c:	206a      	movs	r0, #106	; 0x6a
 800282e:	f7ff fea5 	bl	800257c <mpu_write_byte>
    MPU_DELAY(10);
 8002832:	200a      	movs	r0, #10
 8002834:	f002 f960 	bl	8004af8 <HAL_Delay>
	  /* enable iic 400khz */
    mpu_write_byte(MPU6500_I2C_MST_CTRL, 0x0d);
 8002838:	210d      	movs	r1, #13
 800283a:	2024      	movs	r0, #36	; 0x24
 800283c:	f7ff fe9e 	bl	800257c <mpu_write_byte>
    MPU_DELAY(10);
 8002840:	200a      	movs	r0, #10
 8002842:	f002 f959 	bl	8004af8 <HAL_Delay>

    /* turn on slave 1 for ist write and slave 4 to ist read */
    mpu_write_byte(MPU6500_I2C_SLV1_ADDR, IST8310_ADDRESS);
 8002846:	210e      	movs	r1, #14
 8002848:	2028      	movs	r0, #40	; 0x28
 800284a:	f7ff fe97 	bl	800257c <mpu_write_byte>
    MPU_DELAY(10);
 800284e:	200a      	movs	r0, #10
 8002850:	f002 f952 	bl	8004af8 <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV4_ADDR, 0x80 | IST8310_ADDRESS);
 8002854:	218e      	movs	r1, #142	; 0x8e
 8002856:	2031      	movs	r0, #49	; 0x31
 8002858:	f7ff fe90 	bl	800257c <mpu_write_byte>
    MPU_DELAY(10);
 800285c:	200a      	movs	r0, #10
 800285e:	f002 f94b 	bl	8004af8 <HAL_Delay>

    /* IST8310_R_CONFB 0x01 = device rst */
    ist_reg_write_by_mpu(IST8310_R_CONFB, 0x01);
 8002862:	2101      	movs	r1, #1
 8002864:	200b      	movs	r0, #11
 8002866:	f7ff ff33 	bl	80026d0 <ist_reg_write_by_mpu>
    MPU_DELAY(10);
 800286a:	200a      	movs	r0, #10
 800286c:	f002 f944 	bl	8004af8 <HAL_Delay>
    if (IST8310_DEVICE_ID_A != ist_reg_read_by_mpu(IST8310_WHO_AM_I))
 8002870:	2000      	movs	r0, #0
 8002872:	f7ff ff57 	bl	8002724 <ist_reg_read_by_mpu>
 8002876:	4603      	mov	r3, r0
 8002878:	2b10      	cmp	r3, #16
 800287a:	d001      	beq.n	8002880 <ist8310_init+0x64>
        return 1;
 800287c:	2301      	movs	r3, #1
 800287e:	e059      	b.n	8002934 <ist8310_init+0x118>

		/* soft reset */
    ist_reg_write_by_mpu(IST8310_R_CONFB, 0x01);
 8002880:	2101      	movs	r1, #1
 8002882:	200b      	movs	r0, #11
 8002884:	f7ff ff24 	bl	80026d0 <ist_reg_write_by_mpu>
    MPU_DELAY(10);
 8002888:	200a      	movs	r0, #10
 800288a:	f002 f935 	bl	8004af8 <HAL_Delay>

		/* config as ready mode to access register */
    ist_reg_write_by_mpu(IST8310_R_CONFA, 0x00);
 800288e:	2100      	movs	r1, #0
 8002890:	200a      	movs	r0, #10
 8002892:	f7ff ff1d 	bl	80026d0 <ist_reg_write_by_mpu>
    if (ist_reg_read_by_mpu(IST8310_R_CONFA) != 0x00)
 8002896:	200a      	movs	r0, #10
 8002898:	f7ff ff44 	bl	8002724 <ist_reg_read_by_mpu>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <ist8310_init+0x8a>
        return 2;
 80028a2:	2302      	movs	r3, #2
 80028a4:	e046      	b.n	8002934 <ist8310_init+0x118>
    MPU_DELAY(10);
 80028a6:	200a      	movs	r0, #10
 80028a8:	f002 f926 	bl	8004af8 <HAL_Delay>

		/* normal state, no int */
    ist_reg_write_by_mpu(IST8310_R_CONFB, 0x00);
 80028ac:	2100      	movs	r1, #0
 80028ae:	200b      	movs	r0, #11
 80028b0:	f7ff ff0e 	bl	80026d0 <ist_reg_write_by_mpu>
    if (ist_reg_read_by_mpu(IST8310_R_CONFB) != 0x00)
 80028b4:	200b      	movs	r0, #11
 80028b6:	f7ff ff35 	bl	8002724 <ist_reg_read_by_mpu>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <ist8310_init+0xa8>
        return 3;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e037      	b.n	8002934 <ist8310_init+0x118>
    MPU_DELAY(10);
 80028c4:	200a      	movs	r0, #10
 80028c6:	f002 f917 	bl	8004af8 <HAL_Delay>

    /* config low noise mode, x,y,z axis 16 time 1 avg */
    ist_reg_write_by_mpu(IST8310_AVGCNTL, 0x24); //100100
 80028ca:	2124      	movs	r1, #36	; 0x24
 80028cc:	2041      	movs	r0, #65	; 0x41
 80028ce:	f7ff feff 	bl	80026d0 <ist_reg_write_by_mpu>
    if (ist_reg_read_by_mpu(IST8310_AVGCNTL) != 0x24)
 80028d2:	2041      	movs	r0, #65	; 0x41
 80028d4:	f7ff ff26 	bl	8002724 <ist_reg_read_by_mpu>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b24      	cmp	r3, #36	; 0x24
 80028dc:	d001      	beq.n	80028e2 <ist8310_init+0xc6>
        return 4;
 80028de:	2304      	movs	r3, #4
 80028e0:	e028      	b.n	8002934 <ist8310_init+0x118>
    MPU_DELAY(10);
 80028e2:	200a      	movs	r0, #10
 80028e4:	f002 f908 	bl	8004af8 <HAL_Delay>

    /* Set/Reset pulse duration setup,normal mode */
    ist_reg_write_by_mpu(IST8310_PDCNTL, 0xc0);
 80028e8:	21c0      	movs	r1, #192	; 0xc0
 80028ea:	2042      	movs	r0, #66	; 0x42
 80028ec:	f7ff fef0 	bl	80026d0 <ist_reg_write_by_mpu>
    if (ist_reg_read_by_mpu(IST8310_PDCNTL) != 0xc0)
 80028f0:	2042      	movs	r0, #66	; 0x42
 80028f2:	f7ff ff17 	bl	8002724 <ist_reg_read_by_mpu>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2bc0      	cmp	r3, #192	; 0xc0
 80028fa:	d001      	beq.n	8002900 <ist8310_init+0xe4>
        return 5;
 80028fc:	2305      	movs	r3, #5
 80028fe:	e019      	b.n	8002934 <ist8310_init+0x118>
    MPU_DELAY(10);
 8002900:	200a      	movs	r0, #10
 8002902:	f002 f8f9 	bl	8004af8 <HAL_Delay>

    /* turn off slave1 & slave 4 */
    mpu_write_byte(MPU6500_I2C_SLV1_CTRL, 0x00);
 8002906:	2100      	movs	r1, #0
 8002908:	202a      	movs	r0, #42	; 0x2a
 800290a:	f7ff fe37 	bl	800257c <mpu_write_byte>
    MPU_DELAY(10);
 800290e:	200a      	movs	r0, #10
 8002910:	f002 f8f2 	bl	8004af8 <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV4_CTRL, 0x00);
 8002914:	2100      	movs	r1, #0
 8002916:	2034      	movs	r0, #52	; 0x34
 8002918:	f7ff fe30 	bl	800257c <mpu_write_byte>
    MPU_DELAY(10);
 800291c:	200a      	movs	r0, #10
 800291e:	f002 f8eb 	bl	8004af8 <HAL_Delay>

    /* configure and turn on slave 0 */
    mpu_master_i2c_auto_read_config(IST8310_ADDRESS, IST8310_R_XL, 0x06);
 8002922:	2206      	movs	r2, #6
 8002924:	2103      	movs	r1, #3
 8002926:	200e      	movs	r0, #14
 8002928:	f7ff ff21 	bl	800276e <mpu_master_i2c_auto_read_config>
    MPU_DELAY(100);
 800292c:	2064      	movs	r0, #100	; 0x64
 800292e:	f002 f8e3 	bl	8004af8 <HAL_Delay>

    return 0;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40021000 	.word	0x40021000

0800293c <ist8310_get_data>:
  * @param  buff: the buffer to save the data of IST8310
	* @retval
  * @usage  call in mpu_get_data() function
	*/
void ist8310_get_data(uint8_t* buff)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
    mpu_read_bytes(MPU6500_EXT_SENS_DATA_00, buff, 6);
 8002944:	2206      	movs	r2, #6
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	2049      	movs	r0, #73	; 0x49
 800294a:	f7ff fe83 	bl	8002654 <mpu_read_bytes>
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <mpu_get_data>:
  * @param
	* @retval
  * @usage  call in main() function
	*/
void mpu_get_data()
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
    mpu_read_bytes(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 800295c:	220e      	movs	r2, #14
 800295e:	4991      	ldr	r1, [pc, #580]	; (8002ba4 <mpu_get_data+0x24c>)
 8002960:	203b      	movs	r0, #59	; 0x3b
 8002962:	f7ff fe77 	bl	8002654 <mpu_read_bytes>

    mpu_data.ax   = (mpu_buff[0] << 8 | mpu_buff[1]) - mpu_data.ax_offset;
 8002966:	4b8f      	ldr	r3, [pc, #572]	; (8002ba4 <mpu_get_data+0x24c>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	021b      	lsls	r3, r3, #8
 800296c:	b21a      	sxth	r2, r3
 800296e:	4b8d      	ldr	r3, [pc, #564]	; (8002ba4 <mpu_get_data+0x24c>)
 8002970:	785b      	ldrb	r3, [r3, #1]
 8002972:	b21b      	sxth	r3, r3
 8002974:	4313      	orrs	r3, r2
 8002976:	b21b      	sxth	r3, r3
 8002978:	b29a      	uxth	r2, r3
 800297a:	4b8b      	ldr	r3, [pc, #556]	; (8002ba8 <mpu_get_data+0x250>)
 800297c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002980:	b29b      	uxth	r3, r3
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	b29b      	uxth	r3, r3
 8002986:	b21a      	sxth	r2, r3
 8002988:	4b87      	ldr	r3, [pc, #540]	; (8002ba8 <mpu_get_data+0x250>)
 800298a:	801a      	strh	r2, [r3, #0]
    mpu_data.ay   = (mpu_buff[2] << 8 | mpu_buff[3]) - mpu_data.ay_offset;
 800298c:	4b85      	ldr	r3, [pc, #532]	; (8002ba4 <mpu_get_data+0x24c>)
 800298e:	789b      	ldrb	r3, [r3, #2]
 8002990:	021b      	lsls	r3, r3, #8
 8002992:	b21a      	sxth	r2, r3
 8002994:	4b83      	ldr	r3, [pc, #524]	; (8002ba4 <mpu_get_data+0x24c>)
 8002996:	78db      	ldrb	r3, [r3, #3]
 8002998:	b21b      	sxth	r3, r3
 800299a:	4313      	orrs	r3, r2
 800299c:	b21b      	sxth	r3, r3
 800299e:	b29a      	uxth	r2, r3
 80029a0:	4b81      	ldr	r3, [pc, #516]	; (8002ba8 <mpu_get_data+0x250>)
 80029a2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	b21a      	sxth	r2, r3
 80029ae:	4b7e      	ldr	r3, [pc, #504]	; (8002ba8 <mpu_get_data+0x250>)
 80029b0:	805a      	strh	r2, [r3, #2]
    mpu_data.az   = (mpu_buff[4] << 8 | mpu_buff[5]) - mpu_data.az_offset;
 80029b2:	4b7c      	ldr	r3, [pc, #496]	; (8002ba4 <mpu_get_data+0x24c>)
 80029b4:	791b      	ldrb	r3, [r3, #4]
 80029b6:	021b      	lsls	r3, r3, #8
 80029b8:	b21a      	sxth	r2, r3
 80029ba:	4b7a      	ldr	r3, [pc, #488]	; (8002ba4 <mpu_get_data+0x24c>)
 80029bc:	795b      	ldrb	r3, [r3, #5]
 80029be:	b21b      	sxth	r3, r3
 80029c0:	4313      	orrs	r3, r2
 80029c2:	b21b      	sxth	r3, r3
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	4b78      	ldr	r3, [pc, #480]	; (8002ba8 <mpu_get_data+0x250>)
 80029c8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	b21a      	sxth	r2, r3
 80029d4:	4b74      	ldr	r3, [pc, #464]	; (8002ba8 <mpu_get_data+0x250>)
 80029d6:	809a      	strh	r2, [r3, #4]
    mpu_data.temp = mpu_buff[6] << 8 | mpu_buff[7];
 80029d8:	4b72      	ldr	r3, [pc, #456]	; (8002ba4 <mpu_get_data+0x24c>)
 80029da:	799b      	ldrb	r3, [r3, #6]
 80029dc:	021b      	lsls	r3, r3, #8
 80029de:	b21a      	sxth	r2, r3
 80029e0:	4b70      	ldr	r3, [pc, #448]	; (8002ba4 <mpu_get_data+0x24c>)
 80029e2:	79db      	ldrb	r3, [r3, #7]
 80029e4:	b21b      	sxth	r3, r3
 80029e6:	4313      	orrs	r3, r2
 80029e8:	b21a      	sxth	r2, r3
 80029ea:	4b6f      	ldr	r3, [pc, #444]	; (8002ba8 <mpu_get_data+0x250>)
 80029ec:	819a      	strh	r2, [r3, #12]

    mpu_data.gx = ((mpu_buff[8]  << 8 | mpu_buff[9])  - mpu_data.gx_offset);
 80029ee:	4b6d      	ldr	r3, [pc, #436]	; (8002ba4 <mpu_get_data+0x24c>)
 80029f0:	7a1b      	ldrb	r3, [r3, #8]
 80029f2:	021b      	lsls	r3, r3, #8
 80029f4:	b21a      	sxth	r2, r3
 80029f6:	4b6b      	ldr	r3, [pc, #428]	; (8002ba4 <mpu_get_data+0x24c>)
 80029f8:	7a5b      	ldrb	r3, [r3, #9]
 80029fa:	b21b      	sxth	r3, r3
 80029fc:	4313      	orrs	r3, r2
 80029fe:	b21b      	sxth	r3, r3
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	4b69      	ldr	r3, [pc, #420]	; (8002ba8 <mpu_get_data+0x250>)
 8002a04:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	b21a      	sxth	r2, r3
 8002a10:	4b65      	ldr	r3, [pc, #404]	; (8002ba8 <mpu_get_data+0x250>)
 8002a12:	81da      	strh	r2, [r3, #14]
    mpu_data.gy = ((mpu_buff[10] << 8 | mpu_buff[11]) - mpu_data.gy_offset);
 8002a14:	4b63      	ldr	r3, [pc, #396]	; (8002ba4 <mpu_get_data+0x24c>)
 8002a16:	7a9b      	ldrb	r3, [r3, #10]
 8002a18:	021b      	lsls	r3, r3, #8
 8002a1a:	b21a      	sxth	r2, r3
 8002a1c:	4b61      	ldr	r3, [pc, #388]	; (8002ba4 <mpu_get_data+0x24c>)
 8002a1e:	7adb      	ldrb	r3, [r3, #11]
 8002a20:	b21b      	sxth	r3, r3
 8002a22:	4313      	orrs	r3, r2
 8002a24:	b21b      	sxth	r3, r3
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	4b5f      	ldr	r3, [pc, #380]	; (8002ba8 <mpu_get_data+0x250>)
 8002a2a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	b21a      	sxth	r2, r3
 8002a36:	4b5c      	ldr	r3, [pc, #368]	; (8002ba8 <mpu_get_data+0x250>)
 8002a38:	821a      	strh	r2, [r3, #16]
    mpu_data.gz = ((mpu_buff[12] << 8 | mpu_buff[13]) - mpu_data.gz_offset);
 8002a3a:	4b5a      	ldr	r3, [pc, #360]	; (8002ba4 <mpu_get_data+0x24c>)
 8002a3c:	7b1b      	ldrb	r3, [r3, #12]
 8002a3e:	021b      	lsls	r3, r3, #8
 8002a40:	b21a      	sxth	r2, r3
 8002a42:	4b58      	ldr	r3, [pc, #352]	; (8002ba4 <mpu_get_data+0x24c>)
 8002a44:	7b5b      	ldrb	r3, [r3, #13]
 8002a46:	b21b      	sxth	r3, r3
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	b21b      	sxth	r3, r3
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	4b56      	ldr	r3, [pc, #344]	; (8002ba8 <mpu_get_data+0x250>)
 8002a50:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	b21a      	sxth	r2, r3
 8002a5c:	4b52      	ldr	r3, [pc, #328]	; (8002ba8 <mpu_get_data+0x250>)
 8002a5e:	825a      	strh	r2, [r3, #18]

    ist8310_get_data(ist_buff);
 8002a60:	4852      	ldr	r0, [pc, #328]	; (8002bac <mpu_get_data+0x254>)
 8002a62:	f7ff ff6b 	bl	800293c <ist8310_get_data>
    memcpy(&mpu_data.mx, ist_buff, 6);
 8002a66:	4b50      	ldr	r3, [pc, #320]	; (8002ba8 <mpu_get_data+0x250>)
 8002a68:	4a50      	ldr	r2, [pc, #320]	; (8002bac <mpu_get_data+0x254>)
 8002a6a:	3306      	adds	r3, #6
 8002a6c:	6811      	ldr	r1, [r2, #0]
 8002a6e:	6019      	str	r1, [r3, #0]
 8002a70:	8892      	ldrh	r2, [r2, #4]
 8002a72:	809a      	strh	r2, [r3, #4]

    memcpy(&imu.ax, &mpu_data.ax, 6 * sizeof(int16_t));
 8002a74:	220c      	movs	r2, #12
 8002a76:	494c      	ldr	r1, [pc, #304]	; (8002ba8 <mpu_get_data+0x250>)
 8002a78:	484d      	ldr	r0, [pc, #308]	; (8002bb0 <mpu_get_data+0x258>)
 8002a7a:	f005 fe87 	bl	800878c <memcpy>

    imu.temp = 21 + mpu_data.temp / 333.87f;
 8002a7e:	4b4a      	ldr	r3, [pc, #296]	; (8002ba8 <mpu_get_data+0x250>)
 8002a80:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002a84:	ee07 3a90 	vmov	s15, r3
 8002a88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a8c:	eddf 6a49 	vldr	s13, [pc, #292]	; 8002bb4 <mpu_get_data+0x25c>
 8002a90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a94:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 8002a98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a9c:	4b44      	ldr	r3, [pc, #272]	; (8002bb0 <mpu_get_data+0x258>)
 8002a9e:	edc3 7a03 	vstr	s15, [r3, #12]
	  /* 2000dps -> rad/s */
	  imu.wx   = mpu_data.gx / 16.384f / 57.3f;
 8002aa2:	4b41      	ldr	r3, [pc, #260]	; (8002ba8 <mpu_get_data+0x250>)
 8002aa4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002aa8:	ee07 3a90 	vmov	s15, r3
 8002aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ab0:	eddf 6a41 	vldr	s13, [pc, #260]	; 8002bb8 <mpu_get_data+0x260>
 8002ab4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002ab8:	eddf 6a40 	vldr	s13, [pc, #256]	; 8002bbc <mpu_get_data+0x264>
 8002abc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ac0:	4b3b      	ldr	r3, [pc, #236]	; (8002bb0 <mpu_get_data+0x258>)
 8002ac2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    imu.wy   = mpu_data.gy / 16.384f / 57.3f;
 8002ac6:	4b38      	ldr	r3, [pc, #224]	; (8002ba8 <mpu_get_data+0x250>)
 8002ac8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002acc:	ee07 3a90 	vmov	s15, r3
 8002ad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ad4:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002bb8 <mpu_get_data+0x260>
 8002ad8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002adc:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002bbc <mpu_get_data+0x264>
 8002ae0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ae4:	4b32      	ldr	r3, [pc, #200]	; (8002bb0 <mpu_get_data+0x258>)
 8002ae6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    imu.wz   = mpu_data.gz / 16.384f / 57.3f;
 8002aea:	4b2f      	ldr	r3, [pc, #188]	; (8002ba8 <mpu_get_data+0x250>)
 8002aec:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002af0:	ee07 3a90 	vmov	s15, r3
 8002af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002af8:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8002bb8 <mpu_get_data+0x260>
 8002afc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b00:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8002bbc <mpu_get_data+0x264>
 8002b04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b08:	4b29      	ldr	r3, [pc, #164]	; (8002bb0 <mpu_get_data+0x258>)
 8002b0a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    imu.ax_g = mpu_data.ax / 4096.0f;
 8002b0e:	4b26      	ldr	r3, [pc, #152]	; (8002ba8 <mpu_get_data+0x250>)
 8002b10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b14:	ee07 3a90 	vmov	s15, r3
 8002b18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b1c:	eddf 6a28 	vldr	s13, [pc, #160]	; 8002bc0 <mpu_get_data+0x268>
 8002b20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b24:	4b22      	ldr	r3, [pc, #136]	; (8002bb0 <mpu_get_data+0x258>)
 8002b26:	edc3 7a04 	vstr	s15, [r3, #16]
    imu.ay_g = mpu_data.ay / 4096.0f;
 8002b2a:	4b1f      	ldr	r3, [pc, #124]	; (8002ba8 <mpu_get_data+0x250>)
 8002b2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b30:	ee07 3a90 	vmov	s15, r3
 8002b34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b38:	eddf 6a21 	vldr	s13, [pc, #132]	; 8002bc0 <mpu_get_data+0x268>
 8002b3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b40:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <mpu_get_data+0x258>)
 8002b42:	edc3 7a05 	vstr	s15, [r3, #20]
    imu.az_g = mpu_data.az / 4096.0f;
 8002b46:	4b18      	ldr	r3, [pc, #96]	; (8002ba8 <mpu_get_data+0x250>)
 8002b48:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b4c:	ee07 3a90 	vmov	s15, r3
 8002b50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b54:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002bc0 <mpu_get_data+0x268>
 8002b58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b5c:	4b14      	ldr	r3, [pc, #80]	; (8002bb0 <mpu_get_data+0x258>)
 8002b5e:	edc3 7a06 	vstr	s15, [r3, #24]

    imu.ax_mps_2 = imu.ax_g * 9.8f;
 8002b62:	4b13      	ldr	r3, [pc, #76]	; (8002bb0 <mpu_get_data+0x258>)
 8002b64:	edd3 7a04 	vldr	s15, [r3, #16]
 8002b68:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002bc4 <mpu_get_data+0x26c>
 8002b6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b70:	4b0f      	ldr	r3, [pc, #60]	; (8002bb0 <mpu_get_data+0x258>)
 8002b72:	edc3 7a07 	vstr	s15, [r3, #28]
    imu.ay_mps_2 = imu.ay_g * 9.8f;
 8002b76:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <mpu_get_data+0x258>)
 8002b78:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b7c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002bc4 <mpu_get_data+0x26c>
 8002b80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b84:	4b0a      	ldr	r3, [pc, #40]	; (8002bb0 <mpu_get_data+0x258>)
 8002b86:	edc3 7a08 	vstr	s15, [r3, #32]
    imu.az_mps_2 = imu.az_g * 9.8f;
 8002b8a:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <mpu_get_data+0x258>)
 8002b8c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b90:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002bc4 <mpu_get_data+0x26c>
 8002b94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b98:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <mpu_get_data+0x258>)
 8002b9a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	200009d0 	.word	0x200009d0
 8002ba8:	200009b0 	.word	0x200009b0
 8002bac:	200009a0 	.word	0x200009a0
 8002bb0:	200000e0 	.word	0x200000e0
 8002bb4:	43a6ef5c 	.word	0x43a6ef5c
 8002bb8:	4183126f 	.word	0x4183126f
 8002bbc:	42653333 	.word	0x42653333
 8002bc0:	45800000 	.word	0x45800000
 8002bc4:	411ccccd 	.word	0x411ccccd

08002bc8 <mpu_set_gyro_fsr>:
  * @param  fsr: range(0,±250dps;1,±500dps;2,±1000dps;3,±2000dps)
	* @retval
  * @usage  call in mpu_device_init() function
	*/
uint8_t mpu_set_gyro_fsr(uint8_t fsr)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	71fb      	strb	r3, [r7, #7]
  return mpu_write_byte(MPU6500_GYRO_CONFIG, fsr << 3);
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	4619      	mov	r1, r3
 8002bda:	201b      	movs	r0, #27
 8002bdc:	f7ff fcce 	bl	800257c <mpu_write_byte>
 8002be0:	4603      	mov	r3, r0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <mpu_set_accel_fsr>:
  * @param  fsr: range(0,±2g;1,±4g;2,±8g;3,±16g)
	* @retval
  * @usage  call in mpu_device_init() function
	*/
uint8_t mpu_set_accel_fsr(uint8_t fsr)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	71fb      	strb	r3, [r7, #7]
  return mpu_write_byte(MPU6500_ACCEL_CONFIG, fsr << 3);
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	201c      	movs	r0, #28
 8002bfe:	f7ff fcbd 	bl	800257c <mpu_write_byte>
 8002c02:	4603      	mov	r3, r0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <mpu_device_init>:
  * @param
	* @retval
  * @usage  call in main() function
	*/
uint8_t mpu_device_init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
	MPU_DELAY(100);
 8002c12:	2064      	movs	r0, #100	; 0x64
 8002c14:	f001 ff70 	bl	8004af8 <HAL_Delay>

	id                               = mpu_read_byte(MPU6500_WHO_AM_I);
 8002c18:	2075      	movs	r0, #117	; 0x75
 8002c1a:	f7ff fce7 	bl	80025ec <mpu_read_byte>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	461a      	mov	r2, r3
 8002c22:	4b2b      	ldr	r3, [pc, #172]	; (8002cd0 <mpu_device_init+0xc4>)
 8002c24:	701a      	strb	r2, [r3, #0]
	uint8_t i                        = 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	75fb      	strb	r3, [r7, #23]
	uint8_t MPU6500_Init_Data[10][2] = {{ MPU6500_PWR_MGMT_1, 0x80 },     /* Reset Device */
 8002c2a:	463b      	mov	r3, r7
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	609a      	str	r2, [r3, #8]
 8002c34:	60da      	str	r2, [r3, #12]
 8002c36:	611a      	str	r2, [r3, #16]
 8002c38:	236b      	movs	r3, #107	; 0x6b
 8002c3a:	703b      	strb	r3, [r7, #0]
 8002c3c:	2380      	movs	r3, #128	; 0x80
 8002c3e:	707b      	strb	r3, [r7, #1]
 8002c40:	236b      	movs	r3, #107	; 0x6b
 8002c42:	70bb      	strb	r3, [r7, #2]
 8002c44:	2303      	movs	r3, #3
 8002c46:	70fb      	strb	r3, [r7, #3]
 8002c48:	236c      	movs	r3, #108	; 0x6c
 8002c4a:	713b      	strb	r3, [r7, #4]
 8002c4c:	231a      	movs	r3, #26
 8002c4e:	71bb      	strb	r3, [r7, #6]
 8002c50:	2304      	movs	r3, #4
 8002c52:	71fb      	strb	r3, [r7, #7]
 8002c54:	231b      	movs	r3, #27
 8002c56:	723b      	strb	r3, [r7, #8]
 8002c58:	2318      	movs	r3, #24
 8002c5a:	727b      	strb	r3, [r7, #9]
 8002c5c:	231c      	movs	r3, #28
 8002c5e:	72bb      	strb	r3, [r7, #10]
 8002c60:	2310      	movs	r3, #16
 8002c62:	72fb      	strb	r3, [r7, #11]
 8002c64:	231d      	movs	r3, #29
 8002c66:	733b      	strb	r3, [r7, #12]
 8002c68:	2302      	movs	r3, #2
 8002c6a:	737b      	strb	r3, [r7, #13]
 8002c6c:	236a      	movs	r3, #106	; 0x6a
 8002c6e:	73bb      	strb	r3, [r7, #14]
 8002c70:	2320      	movs	r3, #32
 8002c72:	73fb      	strb	r3, [r7, #15]
																			{ MPU6500_CONFIG, 0x04 },         /* LPF 41Hz */
																			{ MPU6500_GYRO_CONFIG, 0x18 },    /* +-2000dps */
																			{ MPU6500_ACCEL_CONFIG, 0x10 },   /* +-8G */
																			{ MPU6500_ACCEL_CONFIG_2, 0x02 }, /* enable LowPassFilter  Set Acc LPF */
																			{ MPU6500_USER_CTRL, 0x20 },};    /* Enable AUX */
	for (i = 0; i < 10; i++)
 8002c74:	2300      	movs	r3, #0
 8002c76:	75fb      	strb	r3, [r7, #23]
 8002c78:	e017      	b.n	8002caa <mpu_device_init+0x9e>
	{
		mpu_write_byte(MPU6500_Init_Data[i][0], MPU6500_Init_Data[i][1]);
 8002c7a:	7dfb      	ldrb	r3, [r7, #23]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	f107 0218 	add.w	r2, r7, #24
 8002c82:	4413      	add	r3, r2
 8002c84:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8002c88:	7dfb      	ldrb	r3, [r7, #23]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	f107 0118 	add.w	r1, r7, #24
 8002c90:	440b      	add	r3, r1
 8002c92:	f813 3c17 	ldrb.w	r3, [r3, #-23]
 8002c96:	4619      	mov	r1, r3
 8002c98:	4610      	mov	r0, r2
 8002c9a:	f7ff fc6f 	bl	800257c <mpu_write_byte>
		MPU_DELAY(1);
 8002c9e:	2001      	movs	r0, #1
 8002ca0:	f001 ff2a 	bl	8004af8 <HAL_Delay>
	for (i = 0; i < 10; i++)
 8002ca4:	7dfb      	ldrb	r3, [r7, #23]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	75fb      	strb	r3, [r7, #23]
 8002caa:	7dfb      	ldrb	r3, [r7, #23]
 8002cac:	2b09      	cmp	r3, #9
 8002cae:	d9e4      	bls.n	8002c7a <mpu_device_init+0x6e>
	}

	mpu_set_gyro_fsr(3);
 8002cb0:	2003      	movs	r0, #3
 8002cb2:	f7ff ff89 	bl	8002bc8 <mpu_set_gyro_fsr>
	mpu_set_accel_fsr(2);
 8002cb6:	2002      	movs	r0, #2
 8002cb8:	f7ff ff97 	bl	8002bea <mpu_set_accel_fsr>

	ist8310_init();
 8002cbc:	f7ff fdae 	bl	800281c <ist8310_init>
	mpu_offset_call();
 8002cc0:	f000 f808 	bl	8002cd4 <mpu_offset_call>
	return 0;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	200009a6 	.word	0x200009a6

08002cd4 <mpu_offset_call>:
  * @param
	* @retval
  * @usage  call in main() function
	*/
void mpu_offset_call(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
	int i;
	for (i=0; i<300;i++)
 8002cda:	2300      	movs	r3, #0
 8002cdc:	607b      	str	r3, [r7, #4]
 8002cde:	e07c      	b.n	8002dda <mpu_offset_call+0x106>
	{
		mpu_read_bytes(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 8002ce0:	220e      	movs	r2, #14
 8002ce2:	4966      	ldr	r1, [pc, #408]	; (8002e7c <mpu_offset_call+0x1a8>)
 8002ce4:	203b      	movs	r0, #59	; 0x3b
 8002ce6:	f7ff fcb5 	bl	8002654 <mpu_read_bytes>

		mpu_data.ax_offset += mpu_buff[0] << 8 | mpu_buff[1];
 8002cea:	4b65      	ldr	r3, [pc, #404]	; (8002e80 <mpu_offset_call+0x1ac>)
 8002cec:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	4b62      	ldr	r3, [pc, #392]	; (8002e7c <mpu_offset_call+0x1a8>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	021b      	lsls	r3, r3, #8
 8002cf8:	b219      	sxth	r1, r3
 8002cfa:	4b60      	ldr	r3, [pc, #384]	; (8002e7c <mpu_offset_call+0x1a8>)
 8002cfc:	785b      	ldrb	r3, [r3, #1]
 8002cfe:	b21b      	sxth	r3, r3
 8002d00:	430b      	orrs	r3, r1
 8002d02:	b21b      	sxth	r3, r3
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	4413      	add	r3, r2
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	b21a      	sxth	r2, r3
 8002d0c:	4b5c      	ldr	r3, [pc, #368]	; (8002e80 <mpu_offset_call+0x1ac>)
 8002d0e:	829a      	strh	r2, [r3, #20]
		mpu_data.ay_offset += mpu_buff[2] << 8 | mpu_buff[3];
 8002d10:	4b5b      	ldr	r3, [pc, #364]	; (8002e80 <mpu_offset_call+0x1ac>)
 8002d12:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	4b58      	ldr	r3, [pc, #352]	; (8002e7c <mpu_offset_call+0x1a8>)
 8002d1a:	789b      	ldrb	r3, [r3, #2]
 8002d1c:	021b      	lsls	r3, r3, #8
 8002d1e:	b219      	sxth	r1, r3
 8002d20:	4b56      	ldr	r3, [pc, #344]	; (8002e7c <mpu_offset_call+0x1a8>)
 8002d22:	78db      	ldrb	r3, [r3, #3]
 8002d24:	b21b      	sxth	r3, r3
 8002d26:	430b      	orrs	r3, r1
 8002d28:	b21b      	sxth	r3, r3
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	b21a      	sxth	r2, r3
 8002d32:	4b53      	ldr	r3, [pc, #332]	; (8002e80 <mpu_offset_call+0x1ac>)
 8002d34:	82da      	strh	r2, [r3, #22]
		mpu_data.az_offset += mpu_buff[4] << 8 | mpu_buff[5];
 8002d36:	4b52      	ldr	r3, [pc, #328]	; (8002e80 <mpu_offset_call+0x1ac>)
 8002d38:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	4b4f      	ldr	r3, [pc, #316]	; (8002e7c <mpu_offset_call+0x1a8>)
 8002d40:	791b      	ldrb	r3, [r3, #4]
 8002d42:	021b      	lsls	r3, r3, #8
 8002d44:	b219      	sxth	r1, r3
 8002d46:	4b4d      	ldr	r3, [pc, #308]	; (8002e7c <mpu_offset_call+0x1a8>)
 8002d48:	795b      	ldrb	r3, [r3, #5]
 8002d4a:	b21b      	sxth	r3, r3
 8002d4c:	430b      	orrs	r3, r1
 8002d4e:	b21b      	sxth	r3, r3
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	4413      	add	r3, r2
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	b21a      	sxth	r2, r3
 8002d58:	4b49      	ldr	r3, [pc, #292]	; (8002e80 <mpu_offset_call+0x1ac>)
 8002d5a:	831a      	strh	r2, [r3, #24]

		mpu_data.gx_offset += mpu_buff[8]  << 8 | mpu_buff[9];
 8002d5c:	4b48      	ldr	r3, [pc, #288]	; (8002e80 <mpu_offset_call+0x1ac>)
 8002d5e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	4b45      	ldr	r3, [pc, #276]	; (8002e7c <mpu_offset_call+0x1a8>)
 8002d66:	7a1b      	ldrb	r3, [r3, #8]
 8002d68:	021b      	lsls	r3, r3, #8
 8002d6a:	b219      	sxth	r1, r3
 8002d6c:	4b43      	ldr	r3, [pc, #268]	; (8002e7c <mpu_offset_call+0x1a8>)
 8002d6e:	7a5b      	ldrb	r3, [r3, #9]
 8002d70:	b21b      	sxth	r3, r3
 8002d72:	430b      	orrs	r3, r1
 8002d74:	b21b      	sxth	r3, r3
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	4413      	add	r3, r2
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	b21a      	sxth	r2, r3
 8002d7e:	4b40      	ldr	r3, [pc, #256]	; (8002e80 <mpu_offset_call+0x1ac>)
 8002d80:	835a      	strh	r2, [r3, #26]
		mpu_data.gy_offset += mpu_buff[10] << 8 | mpu_buff[11];
 8002d82:	4b3f      	ldr	r3, [pc, #252]	; (8002e80 <mpu_offset_call+0x1ac>)
 8002d84:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	4b3c      	ldr	r3, [pc, #240]	; (8002e7c <mpu_offset_call+0x1a8>)
 8002d8c:	7a9b      	ldrb	r3, [r3, #10]
 8002d8e:	021b      	lsls	r3, r3, #8
 8002d90:	b219      	sxth	r1, r3
 8002d92:	4b3a      	ldr	r3, [pc, #232]	; (8002e7c <mpu_offset_call+0x1a8>)
 8002d94:	7adb      	ldrb	r3, [r3, #11]
 8002d96:	b21b      	sxth	r3, r3
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	b21b      	sxth	r3, r3
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	4413      	add	r3, r2
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	b21a      	sxth	r2, r3
 8002da4:	4b36      	ldr	r3, [pc, #216]	; (8002e80 <mpu_offset_call+0x1ac>)
 8002da6:	839a      	strh	r2, [r3, #28]
		mpu_data.gz_offset += mpu_buff[12] << 8 | mpu_buff[13];
 8002da8:	4b35      	ldr	r3, [pc, #212]	; (8002e80 <mpu_offset_call+0x1ac>)
 8002daa:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	4b32      	ldr	r3, [pc, #200]	; (8002e7c <mpu_offset_call+0x1a8>)
 8002db2:	7b1b      	ldrb	r3, [r3, #12]
 8002db4:	021b      	lsls	r3, r3, #8
 8002db6:	b219      	sxth	r1, r3
 8002db8:	4b30      	ldr	r3, [pc, #192]	; (8002e7c <mpu_offset_call+0x1a8>)
 8002dba:	7b5b      	ldrb	r3, [r3, #13]
 8002dbc:	b21b      	sxth	r3, r3
 8002dbe:	430b      	orrs	r3, r1
 8002dc0:	b21b      	sxth	r3, r3
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	b21a      	sxth	r2, r3
 8002dca:	4b2d      	ldr	r3, [pc, #180]	; (8002e80 <mpu_offset_call+0x1ac>)
 8002dcc:	83da      	strh	r2, [r3, #30]

		MPU_DELAY(5);
 8002dce:	2005      	movs	r0, #5
 8002dd0:	f001 fe92 	bl	8004af8 <HAL_Delay>
	for (i=0; i<300;i++)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	607b      	str	r3, [r7, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002de0:	f6ff af7e 	blt.w	8002ce0 <mpu_offset_call+0xc>
	}
	mpu_data.ax_offset=mpu_data.ax_offset / 300;
 8002de4:	4b26      	ldr	r3, [pc, #152]	; (8002e80 <mpu_offset_call+0x1ac>)
 8002de6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002dea:	4a26      	ldr	r2, [pc, #152]	; (8002e84 <mpu_offset_call+0x1b0>)
 8002dec:	fb82 1203 	smull	r1, r2, r2, r3
 8002df0:	1152      	asrs	r2, r2, #5
 8002df2:	17db      	asrs	r3, r3, #31
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	b21a      	sxth	r2, r3
 8002df8:	4b21      	ldr	r3, [pc, #132]	; (8002e80 <mpu_offset_call+0x1ac>)
 8002dfa:	829a      	strh	r2, [r3, #20]
	mpu_data.ay_offset=mpu_data.ay_offset / 300;
 8002dfc:	4b20      	ldr	r3, [pc, #128]	; (8002e80 <mpu_offset_call+0x1ac>)
 8002dfe:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002e02:	4a20      	ldr	r2, [pc, #128]	; (8002e84 <mpu_offset_call+0x1b0>)
 8002e04:	fb82 1203 	smull	r1, r2, r2, r3
 8002e08:	1152      	asrs	r2, r2, #5
 8002e0a:	17db      	asrs	r3, r3, #31
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	b21a      	sxth	r2, r3
 8002e10:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <mpu_offset_call+0x1ac>)
 8002e12:	82da      	strh	r2, [r3, #22]
	mpu_data.az_offset=mpu_data.az_offset / 300;
 8002e14:	4b1a      	ldr	r3, [pc, #104]	; (8002e80 <mpu_offset_call+0x1ac>)
 8002e16:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002e1a:	4a1a      	ldr	r2, [pc, #104]	; (8002e84 <mpu_offset_call+0x1b0>)
 8002e1c:	fb82 1203 	smull	r1, r2, r2, r3
 8002e20:	1152      	asrs	r2, r2, #5
 8002e22:	17db      	asrs	r3, r3, #31
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	b21a      	sxth	r2, r3
 8002e28:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <mpu_offset_call+0x1ac>)
 8002e2a:	831a      	strh	r2, [r3, #24]
	mpu_data.gx_offset=mpu_data.gx_offset / 300;
 8002e2c:	4b14      	ldr	r3, [pc, #80]	; (8002e80 <mpu_offset_call+0x1ac>)
 8002e2e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002e32:	4a14      	ldr	r2, [pc, #80]	; (8002e84 <mpu_offset_call+0x1b0>)
 8002e34:	fb82 1203 	smull	r1, r2, r2, r3
 8002e38:	1152      	asrs	r2, r2, #5
 8002e3a:	17db      	asrs	r3, r3, #31
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	b21a      	sxth	r2, r3
 8002e40:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <mpu_offset_call+0x1ac>)
 8002e42:	835a      	strh	r2, [r3, #26]
	mpu_data.gy_offset=mpu_data.gx_offset / 300;
 8002e44:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <mpu_offset_call+0x1ac>)
 8002e46:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002e4a:	4a0e      	ldr	r2, [pc, #56]	; (8002e84 <mpu_offset_call+0x1b0>)
 8002e4c:	fb82 1203 	smull	r1, r2, r2, r3
 8002e50:	1152      	asrs	r2, r2, #5
 8002e52:	17db      	asrs	r3, r3, #31
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	b21a      	sxth	r2, r3
 8002e58:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <mpu_offset_call+0x1ac>)
 8002e5a:	839a      	strh	r2, [r3, #28]
	mpu_data.gz_offset=mpu_data.gz_offset / 300;
 8002e5c:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <mpu_offset_call+0x1ac>)
 8002e5e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002e62:	4a08      	ldr	r2, [pc, #32]	; (8002e84 <mpu_offset_call+0x1b0>)
 8002e64:	fb82 1203 	smull	r1, r2, r2, r3
 8002e68:	1152      	asrs	r2, r2, #5
 8002e6a:	17db      	asrs	r3, r3, #31
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	b21a      	sxth	r2, r3
 8002e70:	4b03      	ldr	r3, [pc, #12]	; (8002e80 <mpu_offset_call+0x1ac>)
 8002e72:	83da      	strh	r2, [r3, #30]
}
 8002e74:	bf00      	nop
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	200009d0 	.word	0x200009d0
 8002e80:	200009b0 	.word	0x200009b0
 8002e84:	1b4e81b5 	.word	0x1b4e81b5

08002e88 <init_quaternion>:
  * @param
	* @retval
  * @usage  call in main() function
	*/
void init_quaternion(void)
{
 8002e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e8c:	b084      	sub	sp, #16
 8002e8e:	af00      	add	r7, sp, #0
	int16_t hx, hy;//hz;

	hx = imu.mx;
 8002e90:	4b79      	ldr	r3, [pc, #484]	; (8003078 <init_quaternion+0x1f0>)
 8002e92:	88db      	ldrh	r3, [r3, #6]
 8002e94:	81fb      	strh	r3, [r7, #14]
	hy = imu.my;
 8002e96:	4b78      	ldr	r3, [pc, #480]	; (8003078 <init_quaternion+0x1f0>)
 8002e98:	891b      	ldrh	r3, [r3, #8]
 8002e9a:	81bb      	strh	r3, [r7, #12]
			q2 = -0.56;
			q3 = 0.0045;
		}
	}
	#else
		if (hx < 0 && hy < 0)
 8002e9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	da36      	bge.n	8002f12 <init_quaternion+0x8a>
 8002ea4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	da32      	bge.n	8002f12 <init_quaternion+0x8a>
	{
		if (fabs(hx / hy) >= 1)
 8002eac:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002eb0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002eb4:	fb92 f3f3 	sdiv	r3, r2, r3
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7fd faeb 	bl	8000494 <__aeabi_i2d>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	460c      	mov	r4, r1
 8002ec2:	603b      	str	r3, [r7, #0]
 8002ec4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8002ec8:	607b      	str	r3, [r7, #4]
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	4b6b      	ldr	r3, [pc, #428]	; (800307c <init_quaternion+0x1f4>)
 8002ed0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ed4:	f7fd fdce 	bl	8000a74 <__aeabi_dcmpge>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00c      	beq.n	8002ef8 <init_quaternion+0x70>
		{
			q0 = 0.195;
 8002ede:	4b68      	ldr	r3, [pc, #416]	; (8003080 <init_quaternion+0x1f8>)
 8002ee0:	4a68      	ldr	r2, [pc, #416]	; (8003084 <init_quaternion+0x1fc>)
 8002ee2:	601a      	str	r2, [r3, #0]
			q1 = -0.015;
 8002ee4:	4b68      	ldr	r3, [pc, #416]	; (8003088 <init_quaternion+0x200>)
 8002ee6:	4a69      	ldr	r2, [pc, #420]	; (800308c <init_quaternion+0x204>)
 8002ee8:	601a      	str	r2, [r3, #0]
			q2 = 0.0043;
 8002eea:	4b69      	ldr	r3, [pc, #420]	; (8003090 <init_quaternion+0x208>)
 8002eec:	4a69      	ldr	r2, [pc, #420]	; (8003094 <init_quaternion+0x20c>)
 8002eee:	601a      	str	r2, [r3, #0]
			q3 = 0.979;
 8002ef0:	4b69      	ldr	r3, [pc, #420]	; (8003098 <init_quaternion+0x210>)
 8002ef2:	4a6a      	ldr	r2, [pc, #424]	; (800309c <init_quaternion+0x214>)
 8002ef4:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1)
 8002ef6:	e0ba      	b.n	800306e <init_quaternion+0x1e6>
		}
		else
		{
			q0 = 0.555;
 8002ef8:	4b61      	ldr	r3, [pc, #388]	; (8003080 <init_quaternion+0x1f8>)
 8002efa:	4a69      	ldr	r2, [pc, #420]	; (80030a0 <init_quaternion+0x218>)
 8002efc:	601a      	str	r2, [r3, #0]
			q1 = -0.015;
 8002efe:	4b62      	ldr	r3, [pc, #392]	; (8003088 <init_quaternion+0x200>)
 8002f00:	4a62      	ldr	r2, [pc, #392]	; (800308c <init_quaternion+0x204>)
 8002f02:	601a      	str	r2, [r3, #0]
			q2 = 0.006;
 8002f04:	4b62      	ldr	r3, [pc, #392]	; (8003090 <init_quaternion+0x208>)
 8002f06:	4a67      	ldr	r2, [pc, #412]	; (80030a4 <init_quaternion+0x21c>)
 8002f08:	601a      	str	r2, [r3, #0]
			q3 = 0.829;
 8002f0a:	4b63      	ldr	r3, [pc, #396]	; (8003098 <init_quaternion+0x210>)
 8002f0c:	4a66      	ldr	r2, [pc, #408]	; (80030a8 <init_quaternion+0x220>)
 8002f0e:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1)
 8002f10:	e0ad      	b.n	800306e <init_quaternion+0x1e6>
		}

	}
	else if (hx < 0 && hy > 0)
 8002f12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	da35      	bge.n	8002f86 <init_quaternion+0xfe>
 8002f1a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	dd31      	ble.n	8002f86 <init_quaternion+0xfe>
	{
		if(fabs(hx / hy) >= 1)
 8002f22:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002f26:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002f2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fd fab0 	bl	8000494 <__aeabi_i2d>
 8002f34:	4603      	mov	r3, r0
 8002f36:	460c      	mov	r4, r1
 8002f38:	469a      	mov	sl, r3
 8002f3a:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	4b4e      	ldr	r3, [pc, #312]	; (800307c <init_quaternion+0x1f4>)
 8002f44:	4650      	mov	r0, sl
 8002f46:	4659      	mov	r1, fp
 8002f48:	f7fd fd94 	bl	8000a74 <__aeabi_dcmpge>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00c      	beq.n	8002f6c <init_quaternion+0xe4>
		{
			q0 = -0.193;
 8002f52:	4b4b      	ldr	r3, [pc, #300]	; (8003080 <init_quaternion+0x1f8>)
 8002f54:	4a55      	ldr	r2, [pc, #340]	; (80030ac <init_quaternion+0x224>)
 8002f56:	601a      	str	r2, [r3, #0]
			q1 = -0.009;
 8002f58:	4b4b      	ldr	r3, [pc, #300]	; (8003088 <init_quaternion+0x200>)
 8002f5a:	4a55      	ldr	r2, [pc, #340]	; (80030b0 <init_quaternion+0x228>)
 8002f5c:	601a      	str	r2, [r3, #0]
			q2 = -0.006;
 8002f5e:	4b4c      	ldr	r3, [pc, #304]	; (8003090 <init_quaternion+0x208>)
 8002f60:	4a54      	ldr	r2, [pc, #336]	; (80030b4 <init_quaternion+0x22c>)
 8002f62:	601a      	str	r2, [r3, #0]
			q3 = 0.979;
 8002f64:	4b4c      	ldr	r3, [pc, #304]	; (8003098 <init_quaternion+0x210>)
 8002f66:	4a4d      	ldr	r2, [pc, #308]	; (800309c <init_quaternion+0x214>)
 8002f68:	601a      	str	r2, [r3, #0]
		if(fabs(hx / hy) >= 1)
 8002f6a:	e080      	b.n	800306e <init_quaternion+0x1e6>
		}
		else
		{
			q0 = -0.552;
 8002f6c:	4b44      	ldr	r3, [pc, #272]	; (8003080 <init_quaternion+0x1f8>)
 8002f6e:	4a52      	ldr	r2, [pc, #328]	; (80030b8 <init_quaternion+0x230>)
 8002f70:	601a      	str	r2, [r3, #0]
			q1 = -0.0048;
 8002f72:	4b45      	ldr	r3, [pc, #276]	; (8003088 <init_quaternion+0x200>)
 8002f74:	4a51      	ldr	r2, [pc, #324]	; (80030bc <init_quaternion+0x234>)
 8002f76:	601a      	str	r2, [r3, #0]
			q2 = -0.0115;
 8002f78:	4b45      	ldr	r3, [pc, #276]	; (8003090 <init_quaternion+0x208>)
 8002f7a:	4a51      	ldr	r2, [pc, #324]	; (80030c0 <init_quaternion+0x238>)
 8002f7c:	601a      	str	r2, [r3, #0]
			q3 = 0.8313;
 8002f7e:	4b46      	ldr	r3, [pc, #280]	; (8003098 <init_quaternion+0x210>)
 8002f80:	4a50      	ldr	r2, [pc, #320]	; (80030c4 <init_quaternion+0x23c>)
 8002f82:	601a      	str	r2, [r3, #0]
		if(fabs(hx / hy) >= 1)
 8002f84:	e073      	b.n	800306e <init_quaternion+0x1e6>
		}

	}
	else if (hx > 0 && hy > 0)
 8002f86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	dd35      	ble.n	8002ffa <init_quaternion+0x172>
 8002f8e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	dd31      	ble.n	8002ffa <init_quaternion+0x172>
	{
		if(fabs(hx / hy) >= 1)
 8002f96:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002f9a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002f9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fd fa76 	bl	8000494 <__aeabi_i2d>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	460c      	mov	r4, r1
 8002fac:	4698      	mov	r8, r3
 8002fae:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	4b31      	ldr	r3, [pc, #196]	; (800307c <init_quaternion+0x1f4>)
 8002fb8:	4640      	mov	r0, r8
 8002fba:	4649      	mov	r1, r9
 8002fbc:	f7fd fd5a 	bl	8000a74 <__aeabi_dcmpge>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00c      	beq.n	8002fe0 <init_quaternion+0x158>
		{
			q0 = -0.9785;
 8002fc6:	4b2e      	ldr	r3, [pc, #184]	; (8003080 <init_quaternion+0x1f8>)
 8002fc8:	4a3f      	ldr	r2, [pc, #252]	; (80030c8 <init_quaternion+0x240>)
 8002fca:	601a      	str	r2, [r3, #0]
			q1 = 0.008;
 8002fcc:	4b2e      	ldr	r3, [pc, #184]	; (8003088 <init_quaternion+0x200>)
 8002fce:	4a3f      	ldr	r2, [pc, #252]	; (80030cc <init_quaternion+0x244>)
 8002fd0:	601a      	str	r2, [r3, #0]
			q2 = -0.02;
 8002fd2:	4b2f      	ldr	r3, [pc, #188]	; (8003090 <init_quaternion+0x208>)
 8002fd4:	4a3e      	ldr	r2, [pc, #248]	; (80030d0 <init_quaternion+0x248>)
 8002fd6:	601a      	str	r2, [r3, #0]
			q3 = 0.195;
 8002fd8:	4b2f      	ldr	r3, [pc, #188]	; (8003098 <init_quaternion+0x210>)
 8002fda:	4a2a      	ldr	r2, [pc, #168]	; (8003084 <init_quaternion+0x1fc>)
 8002fdc:	601a      	str	r2, [r3, #0]
		if(fabs(hx / hy) >= 1)
 8002fde:	e046      	b.n	800306e <init_quaternion+0x1e6>
		}
		else
		{
			q0 = -0.9828;
 8002fe0:	4b27      	ldr	r3, [pc, #156]	; (8003080 <init_quaternion+0x1f8>)
 8002fe2:	4a3c      	ldr	r2, [pc, #240]	; (80030d4 <init_quaternion+0x24c>)
 8002fe4:	601a      	str	r2, [r3, #0]
			q1 = 0.002;
 8002fe6:	4b28      	ldr	r3, [pc, #160]	; (8003088 <init_quaternion+0x200>)
 8002fe8:	4a3b      	ldr	r2, [pc, #236]	; (80030d8 <init_quaternion+0x250>)
 8002fea:	601a      	str	r2, [r3, #0]
			q2 = -0.0167;
 8002fec:	4b28      	ldr	r3, [pc, #160]	; (8003090 <init_quaternion+0x208>)
 8002fee:	4a3b      	ldr	r2, [pc, #236]	; (80030dc <init_quaternion+0x254>)
 8002ff0:	601a      	str	r2, [r3, #0]
			q3 = 0.5557;
 8002ff2:	4b29      	ldr	r3, [pc, #164]	; (8003098 <init_quaternion+0x210>)
 8002ff4:	4a3a      	ldr	r2, [pc, #232]	; (80030e0 <init_quaternion+0x258>)
 8002ff6:	601a      	str	r2, [r3, #0]
		if(fabs(hx / hy) >= 1)
 8002ff8:	e039      	b.n	800306e <init_quaternion+0x1e6>
		}

	}
	else if (hx > 0 && hy < 0)
 8002ffa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	dd35      	ble.n	800306e <init_quaternion+0x1e6>
 8003002:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003006:	2b00      	cmp	r3, #0
 8003008:	da31      	bge.n	800306e <init_quaternion+0x1e6>
	{
		if(fabs(hx / hy) >= 1)
 800300a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800300e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003012:	fb92 f3f3 	sdiv	r3, r2, r3
 8003016:	4618      	mov	r0, r3
 8003018:	f7fd fa3c 	bl	8000494 <__aeabi_i2d>
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	4614      	mov	r4, r2
 8003022:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	4b14      	ldr	r3, [pc, #80]	; (800307c <init_quaternion+0x1f4>)
 800302c:	4620      	mov	r0, r4
 800302e:	4629      	mov	r1, r5
 8003030:	f7fd fd20 	bl	8000a74 <__aeabi_dcmpge>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00c      	beq.n	8003054 <init_quaternion+0x1cc>
		{
			q0 = -0.979;
 800303a:	4b11      	ldr	r3, [pc, #68]	; (8003080 <init_quaternion+0x1f8>)
 800303c:	4a29      	ldr	r2, [pc, #164]	; (80030e4 <init_quaternion+0x25c>)
 800303e:	601a      	str	r2, [r3, #0]
			q1 = 0.0116;
 8003040:	4b11      	ldr	r3, [pc, #68]	; (8003088 <init_quaternion+0x200>)
 8003042:	4a29      	ldr	r2, [pc, #164]	; (80030e8 <init_quaternion+0x260>)
 8003044:	601a      	str	r2, [r3, #0]
			q2 = -0.0167;
 8003046:	4b12      	ldr	r3, [pc, #72]	; (8003090 <init_quaternion+0x208>)
 8003048:	4a24      	ldr	r2, [pc, #144]	; (80030dc <init_quaternion+0x254>)
 800304a:	601a      	str	r2, [r3, #0]
			q3 = -0.195;
 800304c:	4b12      	ldr	r3, [pc, #72]	; (8003098 <init_quaternion+0x210>)
 800304e:	4a27      	ldr	r2, [pc, #156]	; (80030ec <init_quaternion+0x264>)
 8003050:	601a      	str	r2, [r3, #0]
			q2 = -0.012;
			q3 = -0.556;
		}
	}
	#endif
}
 8003052:	e00c      	b.n	800306e <init_quaternion+0x1e6>
			q0 = -0.83;
 8003054:	4b0a      	ldr	r3, [pc, #40]	; (8003080 <init_quaternion+0x1f8>)
 8003056:	4a26      	ldr	r2, [pc, #152]	; (80030f0 <init_quaternion+0x268>)
 8003058:	601a      	str	r2, [r3, #0]
			q1 = 0.014;
 800305a:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <init_quaternion+0x200>)
 800305c:	4a25      	ldr	r2, [pc, #148]	; (80030f4 <init_quaternion+0x26c>)
 800305e:	601a      	str	r2, [r3, #0]
			q2 = -0.012;
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <init_quaternion+0x208>)
 8003062:	4a25      	ldr	r2, [pc, #148]	; (80030f8 <init_quaternion+0x270>)
 8003064:	601a      	str	r2, [r3, #0]
			q3 = -0.556;
 8003066:	4b0c      	ldr	r3, [pc, #48]	; (8003098 <init_quaternion+0x210>)
 8003068:	4a24      	ldr	r2, [pc, #144]	; (80030fc <init_quaternion+0x274>)
 800306a:	601a      	str	r2, [r3, #0]
}
 800306c:	e7ff      	b.n	800306e <init_quaternion+0x1e6>
 800306e:	bf00      	nop
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003078:	200000e0 	.word	0x200000e0
 800307c:	3ff00000 	.word	0x3ff00000
 8003080:	20000000 	.word	0x20000000
 8003084:	3e47ae14 	.word	0x3e47ae14
 8003088:	200000ac 	.word	0x200000ac
 800308c:	bc75c28f 	.word	0xbc75c28f
 8003090:	200000b0 	.word	0x200000b0
 8003094:	3b8ce704 	.word	0x3b8ce704
 8003098:	200000b4 	.word	0x200000b4
 800309c:	3f7a9fbe 	.word	0x3f7a9fbe
 80030a0:	3f0e147b 	.word	0x3f0e147b
 80030a4:	3bc49ba6 	.word	0x3bc49ba6
 80030a8:	3f543958 	.word	0x3f543958
 80030ac:	be45a1cb 	.word	0xbe45a1cb
 80030b0:	bc1374bc 	.word	0xbc1374bc
 80030b4:	bbc49ba6 	.word	0xbbc49ba6
 80030b8:	bf0d4fdf 	.word	0xbf0d4fdf
 80030bc:	bb9d4952 	.word	0xbb9d4952
 80030c0:	bc3c6a7f 	.word	0xbc3c6a7f
 80030c4:	3f54d014 	.word	0x3f54d014
 80030c8:	bf7a7efa 	.word	0xbf7a7efa
 80030cc:	3c03126f 	.word	0x3c03126f
 80030d0:	bca3d70a 	.word	0xbca3d70a
 80030d4:	bf7b98c8 	.word	0xbf7b98c8
 80030d8:	3b03126f 	.word	0x3b03126f
 80030dc:	bc88ce70 	.word	0xbc88ce70
 80030e0:	3f0e425b 	.word	0x3f0e425b
 80030e4:	bf7a9fbe 	.word	0xbf7a9fbe
 80030e8:	3c3e0ded 	.word	0x3c3e0ded
 80030ec:	be47ae14 	.word	0xbe47ae14
 80030f0:	bf547ae1 	.word	0xbf547ae1
 80030f4:	3c656042 	.word	0x3c656042
 80030f8:	bc449ba6 	.word	0xbc449ba6
 80030fc:	bf0e5604 	.word	0xbf0e5604

08003100 <imu_ahrs_update>:
  * @param
	* @retval
  * @usage  call in main() function
	*/
void imu_ahrs_update(void)
{
 8003100:	b590      	push	{r4, r7, lr}
 8003102:	b09f      	sub	sp, #124	; 0x7c
 8003104:	af00      	add	r7, sp, #0
	float hx, hy, hz, bx, bz;
	float vx, vy, vz, wx, wy, wz;
	float ex, ey, ez, halfT;
	float tempq0,tempq1,tempq2,tempq3;

	float q0q0 = q0*q0;
 8003106:	4bd3      	ldr	r3, [pc, #844]	; (8003454 <imu_ahrs_update+0x354>)
 8003108:	ed93 7a00 	vldr	s14, [r3]
 800310c:	4bd1      	ldr	r3, [pc, #836]	; (8003454 <imu_ahrs_update+0x354>)
 800310e:	edd3 7a00 	vldr	s15, [r3]
 8003112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003116:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	float q0q1 = q0*q1;
 800311a:	4bce      	ldr	r3, [pc, #824]	; (8003454 <imu_ahrs_update+0x354>)
 800311c:	ed93 7a00 	vldr	s14, [r3]
 8003120:	4bcd      	ldr	r3, [pc, #820]	; (8003458 <imu_ahrs_update+0x358>)
 8003122:	edd3 7a00 	vldr	s15, [r3]
 8003126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800312a:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	float q0q2 = q0*q2;
 800312e:	4bc9      	ldr	r3, [pc, #804]	; (8003454 <imu_ahrs_update+0x354>)
 8003130:	ed93 7a00 	vldr	s14, [r3]
 8003134:	4bc9      	ldr	r3, [pc, #804]	; (800345c <imu_ahrs_update+0x35c>)
 8003136:	edd3 7a00 	vldr	s15, [r3]
 800313a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800313e:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	float q0q3 = q0*q3;
 8003142:	4bc4      	ldr	r3, [pc, #784]	; (8003454 <imu_ahrs_update+0x354>)
 8003144:	ed93 7a00 	vldr	s14, [r3]
 8003148:	4bc5      	ldr	r3, [pc, #788]	; (8003460 <imu_ahrs_update+0x360>)
 800314a:	edd3 7a00 	vldr	s15, [r3]
 800314e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003152:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	float q1q1 = q1*q1;
 8003156:	4bc0      	ldr	r3, [pc, #768]	; (8003458 <imu_ahrs_update+0x358>)
 8003158:	ed93 7a00 	vldr	s14, [r3]
 800315c:	4bbe      	ldr	r3, [pc, #760]	; (8003458 <imu_ahrs_update+0x358>)
 800315e:	edd3 7a00 	vldr	s15, [r3]
 8003162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003166:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	float q1q2 = q1*q2;
 800316a:	4bbb      	ldr	r3, [pc, #748]	; (8003458 <imu_ahrs_update+0x358>)
 800316c:	ed93 7a00 	vldr	s14, [r3]
 8003170:	4bba      	ldr	r3, [pc, #744]	; (800345c <imu_ahrs_update+0x35c>)
 8003172:	edd3 7a00 	vldr	s15, [r3]
 8003176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800317a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	float q1q3 = q1*q3;
 800317e:	4bb6      	ldr	r3, [pc, #728]	; (8003458 <imu_ahrs_update+0x358>)
 8003180:	ed93 7a00 	vldr	s14, [r3]
 8003184:	4bb6      	ldr	r3, [pc, #728]	; (8003460 <imu_ahrs_update+0x360>)
 8003186:	edd3 7a00 	vldr	s15, [r3]
 800318a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800318e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	float q2q2 = q2*q2;
 8003192:	4bb2      	ldr	r3, [pc, #712]	; (800345c <imu_ahrs_update+0x35c>)
 8003194:	ed93 7a00 	vldr	s14, [r3]
 8003198:	4bb0      	ldr	r3, [pc, #704]	; (800345c <imu_ahrs_update+0x35c>)
 800319a:	edd3 7a00 	vldr	s15, [r3]
 800319e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	float q2q3 = q2*q3;
 80031a6:	4bad      	ldr	r3, [pc, #692]	; (800345c <imu_ahrs_update+0x35c>)
 80031a8:	ed93 7a00 	vldr	s14, [r3]
 80031ac:	4bac      	ldr	r3, [pc, #688]	; (8003460 <imu_ahrs_update+0x360>)
 80031ae:	edd3 7a00 	vldr	s15, [r3]
 80031b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	float q3q3 = q3*q3;
 80031ba:	4ba9      	ldr	r3, [pc, #676]	; (8003460 <imu_ahrs_update+0x360>)
 80031bc:	ed93 7a00 	vldr	s14, [r3]
 80031c0:	4ba7      	ldr	r3, [pc, #668]	; (8003460 <imu_ahrs_update+0x360>)
 80031c2:	edd3 7a00 	vldr	s15, [r3]
 80031c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ca:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

	gx = imu.wx;
 80031ce:	4ba5      	ldr	r3, [pc, #660]	; (8003464 <imu_ahrs_update+0x364>)
 80031d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d2:	4aa5      	ldr	r2, [pc, #660]	; (8003468 <imu_ahrs_update+0x368>)
 80031d4:	6013      	str	r3, [r2, #0]
	gy = imu.wy;
 80031d6:	4ba3      	ldr	r3, [pc, #652]	; (8003464 <imu_ahrs_update+0x364>)
 80031d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031da:	4aa4      	ldr	r2, [pc, #656]	; (800346c <imu_ahrs_update+0x36c>)
 80031dc:	6013      	str	r3, [r2, #0]
	gz = imu.wz;
 80031de:	4ba1      	ldr	r3, [pc, #644]	; (8003464 <imu_ahrs_update+0x364>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	4aa3      	ldr	r2, [pc, #652]	; (8003470 <imu_ahrs_update+0x370>)
 80031e4:	6013      	str	r3, [r2, #0]
	ax = imu.ax;
 80031e6:	4b9f      	ldr	r3, [pc, #636]	; (8003464 <imu_ahrs_update+0x364>)
 80031e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031ec:	ee07 3a90 	vmov	s15, r3
 80031f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031f4:	4b9f      	ldr	r3, [pc, #636]	; (8003474 <imu_ahrs_update+0x374>)
 80031f6:	edc3 7a00 	vstr	s15, [r3]
	ay = imu.ay;
 80031fa:	4b9a      	ldr	r3, [pc, #616]	; (8003464 <imu_ahrs_update+0x364>)
 80031fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003200:	ee07 3a90 	vmov	s15, r3
 8003204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003208:	4b9b      	ldr	r3, [pc, #620]	; (8003478 <imu_ahrs_update+0x378>)
 800320a:	edc3 7a00 	vstr	s15, [r3]
	az = imu.az;
 800320e:	4b95      	ldr	r3, [pc, #596]	; (8003464 <imu_ahrs_update+0x364>)
 8003210:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003214:	ee07 3a90 	vmov	s15, r3
 8003218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800321c:	4b97      	ldr	r3, [pc, #604]	; (800347c <imu_ahrs_update+0x37c>)
 800321e:	edc3 7a00 	vstr	s15, [r3]
	mx = imu.mx;
 8003222:	4b90      	ldr	r3, [pc, #576]	; (8003464 <imu_ahrs_update+0x364>)
 8003224:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003228:	ee07 3a90 	vmov	s15, r3
 800322c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003230:	4b93      	ldr	r3, [pc, #588]	; (8003480 <imu_ahrs_update+0x380>)
 8003232:	edc3 7a00 	vstr	s15, [r3]
	my = imu.my;
 8003236:	4b8b      	ldr	r3, [pc, #556]	; (8003464 <imu_ahrs_update+0x364>)
 8003238:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800323c:	ee07 3a90 	vmov	s15, r3
 8003240:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003244:	4b8f      	ldr	r3, [pc, #572]	; (8003484 <imu_ahrs_update+0x384>)
 8003246:	edc3 7a00 	vstr	s15, [r3]
	mz = imu.mz;
 800324a:	4b86      	ldr	r3, [pc, #536]	; (8003464 <imu_ahrs_update+0x364>)
 800324c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003250:	ee07 3a90 	vmov	s15, r3
 8003254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003258:	4b8b      	ldr	r3, [pc, #556]	; (8003488 <imu_ahrs_update+0x388>)
 800325a:	edc3 7a00 	vstr	s15, [r3]

	now_update  = HAL_GetTick(); //ms
 800325e:	f001 fc3f 	bl	8004ae0 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	4b89      	ldr	r3, [pc, #548]	; (800348c <imu_ahrs_update+0x38c>)
 8003266:	601a      	str	r2, [r3, #0]
	halfT       = ((float)(now_update - last_update) / 2000.0f);
 8003268:	4b88      	ldr	r3, [pc, #544]	; (800348c <imu_ahrs_update+0x38c>)
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	4b88      	ldr	r3, [pc, #544]	; (8003490 <imu_ahrs_update+0x390>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	ee07 3a90 	vmov	s15, r3
 8003276:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800327a:	eddf 6a86 	vldr	s13, [pc, #536]	; 8003494 <imu_ahrs_update+0x394>
 800327e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003282:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	last_update = now_update;
 8003286:	4b81      	ldr	r3, [pc, #516]	; (800348c <imu_ahrs_update+0x38c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a81      	ldr	r2, [pc, #516]	; (8003490 <imu_ahrs_update+0x390>)
 800328c:	6013      	str	r3, [r2, #0]

	/* Fast inverse square-root */
	norm = inv_sqrt(ax*ax + ay*ay + az*az);
 800328e:	4b79      	ldr	r3, [pc, #484]	; (8003474 <imu_ahrs_update+0x374>)
 8003290:	ed93 7a00 	vldr	s14, [r3]
 8003294:	4b77      	ldr	r3, [pc, #476]	; (8003474 <imu_ahrs_update+0x374>)
 8003296:	edd3 7a00 	vldr	s15, [r3]
 800329a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800329e:	4b76      	ldr	r3, [pc, #472]	; (8003478 <imu_ahrs_update+0x378>)
 80032a0:	edd3 6a00 	vldr	s13, [r3]
 80032a4:	4b74      	ldr	r3, [pc, #464]	; (8003478 <imu_ahrs_update+0x378>)
 80032a6:	edd3 7a00 	vldr	s15, [r3]
 80032aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032b2:	4b72      	ldr	r3, [pc, #456]	; (800347c <imu_ahrs_update+0x37c>)
 80032b4:	edd3 6a00 	vldr	s13, [r3]
 80032b8:	4b70      	ldr	r3, [pc, #448]	; (800347c <imu_ahrs_update+0x37c>)
 80032ba:	edd3 7a00 	vldr	s15, [r3]
 80032be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c6:	eeb0 0a67 	vmov.f32	s0, s15
 80032ca:	f7ff f91b 	bl	8002504 <inv_sqrt>
 80032ce:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	ax = ax * norm;
 80032d2:	4b68      	ldr	r3, [pc, #416]	; (8003474 <imu_ahrs_update+0x374>)
 80032d4:	ed93 7a00 	vldr	s14, [r3]
 80032d8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80032dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032e0:	4b64      	ldr	r3, [pc, #400]	; (8003474 <imu_ahrs_update+0x374>)
 80032e2:	edc3 7a00 	vstr	s15, [r3]
	ay = ay * norm;
 80032e6:	4b64      	ldr	r3, [pc, #400]	; (8003478 <imu_ahrs_update+0x378>)
 80032e8:	ed93 7a00 	vldr	s14, [r3]
 80032ec:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80032f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032f4:	4b60      	ldr	r3, [pc, #384]	; (8003478 <imu_ahrs_update+0x378>)
 80032f6:	edc3 7a00 	vstr	s15, [r3]
	az = az * norm;
 80032fa:	4b60      	ldr	r3, [pc, #384]	; (800347c <imu_ahrs_update+0x37c>)
 80032fc:	ed93 7a00 	vldr	s14, [r3]
 8003300:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003308:	4b5c      	ldr	r3, [pc, #368]	; (800347c <imu_ahrs_update+0x37c>)
 800330a:	edc3 7a00 	vstr	s15, [r3]

	#ifdef IST8310
		norm = inv_sqrt(mx*mx + my*my + mz*mz);
 800330e:	4b5c      	ldr	r3, [pc, #368]	; (8003480 <imu_ahrs_update+0x380>)
 8003310:	ed93 7a00 	vldr	s14, [r3]
 8003314:	4b5a      	ldr	r3, [pc, #360]	; (8003480 <imu_ahrs_update+0x380>)
 8003316:	edd3 7a00 	vldr	s15, [r3]
 800331a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800331e:	4b59      	ldr	r3, [pc, #356]	; (8003484 <imu_ahrs_update+0x384>)
 8003320:	edd3 6a00 	vldr	s13, [r3]
 8003324:	4b57      	ldr	r3, [pc, #348]	; (8003484 <imu_ahrs_update+0x384>)
 8003326:	edd3 7a00 	vldr	s15, [r3]
 800332a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800332e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003332:	4b55      	ldr	r3, [pc, #340]	; (8003488 <imu_ahrs_update+0x388>)
 8003334:	edd3 6a00 	vldr	s13, [r3]
 8003338:	4b53      	ldr	r3, [pc, #332]	; (8003488 <imu_ahrs_update+0x388>)
 800333a:	edd3 7a00 	vldr	s15, [r3]
 800333e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003346:	eeb0 0a67 	vmov.f32	s0, s15
 800334a:	f7ff f8db 	bl	8002504 <inv_sqrt>
 800334e:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
		mx = mx * norm;
 8003352:	4b4b      	ldr	r3, [pc, #300]	; (8003480 <imu_ahrs_update+0x380>)
 8003354:	ed93 7a00 	vldr	s14, [r3]
 8003358:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800335c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003360:	4b47      	ldr	r3, [pc, #284]	; (8003480 <imu_ahrs_update+0x380>)
 8003362:	edc3 7a00 	vstr	s15, [r3]
		my = my * norm;
 8003366:	4b47      	ldr	r3, [pc, #284]	; (8003484 <imu_ahrs_update+0x384>)
 8003368:	ed93 7a00 	vldr	s14, [r3]
 800336c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003374:	4b43      	ldr	r3, [pc, #268]	; (8003484 <imu_ahrs_update+0x384>)
 8003376:	edc3 7a00 	vstr	s15, [r3]
		mz = mz * norm;
 800337a:	4b43      	ldr	r3, [pc, #268]	; (8003488 <imu_ahrs_update+0x388>)
 800337c:	ed93 7a00 	vldr	s14, [r3]
 8003380:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003388:	4b3f      	ldr	r3, [pc, #252]	; (8003488 <imu_ahrs_update+0x388>)
 800338a:	edc3 7a00 	vstr	s15, [r3]
		mx = 0;
		my = 0;
		mz = 0;
	#endif
	/* compute reference direction of flux */
	hx = 2.0f*mx*(0.5f - q2q2 - q3q3) + 2.0f*my*(q1q2 - q0q3) + 2.0f*mz*(q1q3 + q0q2);
 800338e:	4b3c      	ldr	r3, [pc, #240]	; (8003480 <imu_ahrs_update+0x380>)
 8003390:	edd3 7a00 	vldr	s15, [r3]
 8003394:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003398:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800339c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80033a0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80033a4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80033a8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80033ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033b0:	4b34      	ldr	r3, [pc, #208]	; (8003484 <imu_ahrs_update+0x384>)
 80033b2:	edd3 7a00 	vldr	s15, [r3]
 80033b6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80033ba:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 80033be:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80033c2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80033c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033ce:	4b2e      	ldr	r3, [pc, #184]	; (8003488 <imu_ahrs_update+0x388>)
 80033d0:	edd3 7a00 	vldr	s15, [r3]
 80033d4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80033d8:	ed97 6a17 	vldr	s12, [r7, #92]	; 0x5c
 80033dc:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80033e0:	ee76 7a27 	vadd.f32	s15, s12, s15
 80033e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ec:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	hy = 2.0f*mx*(q1q2 + q0q3) + 2.0f*my*(0.5f - q1q1 - q3q3) + 2.0f*mz*(q2q3 - q0q1);
 80033f0:	4b23      	ldr	r3, [pc, #140]	; (8003480 <imu_ahrs_update+0x380>)
 80033f2:	edd3 7a00 	vldr	s15, [r3]
 80033f6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80033fa:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80033fe:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8003402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003406:	ee27 7a27 	vmul.f32	s14, s14, s15
 800340a:	4b1e      	ldr	r3, [pc, #120]	; (8003484 <imu_ahrs_update+0x384>)
 800340c:	edd3 7a00 	vldr	s15, [r3]
 8003410:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003414:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8003418:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800341c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003420:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003424:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003428:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800342c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003430:	4b15      	ldr	r3, [pc, #84]	; (8003488 <imu_ahrs_update+0x388>)
 8003432:	edd3 7a00 	vldr	s15, [r3]
 8003436:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800343a:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 800343e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003442:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003446:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800344a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800344e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8003452:	e021      	b.n	8003498 <imu_ahrs_update+0x398>
 8003454:	20000000 	.word	0x20000000
 8003458:	200000ac 	.word	0x200000ac
 800345c:	200000b0 	.word	0x200000b0
 8003460:	200000b4 	.word	0x200000b4
 8003464:	200000e0 	.word	0x200000e0
 8003468:	200000b8 	.word	0x200000b8
 800346c:	200000bc 	.word	0x200000bc
 8003470:	200000c0 	.word	0x200000c0
 8003474:	200000c4 	.word	0x200000c4
 8003478:	200000c8 	.word	0x200000c8
 800347c:	200000cc 	.word	0x200000cc
 8003480:	200000d0 	.word	0x200000d0
 8003484:	200000d4 	.word	0x200000d4
 8003488:	200000d8 	.word	0x200000d8
 800348c:	200009a8 	.word	0x200009a8
 8003490:	200009e4 	.word	0x200009e4
 8003494:	44fa0000 	.word	0x44fa0000
	hz = 2.0f*mx*(q1q3 - q0q2) + 2.0f*my*(q2q3 + q0q1) + 2.0f*mz*(0.5f - q1q1 - q2q2);
 8003498:	4be8      	ldr	r3, [pc, #928]	; (800383c <imu_ahrs_update+0x73c>)
 800349a:	edd3 7a00 	vldr	s15, [r3]
 800349e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80034a2:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80034a6:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80034aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80034ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034b2:	4be3      	ldr	r3, [pc, #908]	; (8003840 <imu_ahrs_update+0x740>)
 80034b4:	edd3 7a00 	vldr	s15, [r3]
 80034b8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80034bc:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 80034c0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80034c4:	ee76 7a27 	vadd.f32	s15, s12, s15
 80034c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034d0:	4bdc      	ldr	r3, [pc, #880]	; (8003844 <imu_ahrs_update+0x744>)
 80034d2:	edd3 7a00 	vldr	s15, [r3]
 80034d6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80034da:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80034de:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80034e2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80034e6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80034ea:	ee76 7a67 	vsub.f32	s15, s12, s15
 80034ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034f6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	bx = sqrt((hx*hx) + (hy*hy));
 80034fa:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80034fe:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003502:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003506:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800350a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800350e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003516:	ee17 0a90 	vmov	r0, s15
 800351a:	f7fc ffcd 	bl	80004b8 <__aeabi_f2d>
 800351e:	4603      	mov	r3, r0
 8003520:	460c      	mov	r4, r1
 8003522:	ec44 3b10 	vmov	d0, r3, r4
 8003526:	f005 fa19 	bl	800895c <sqrt>
 800352a:	ec54 3b10 	vmov	r3, r4, d0
 800352e:	4618      	mov	r0, r3
 8003530:	4621      	mov	r1, r4
 8003532:	f7fd faf1 	bl	8000b18 <__aeabi_d2f>
 8003536:	4603      	mov	r3, r0
 8003538:	63bb      	str	r3, [r7, #56]	; 0x38
	bz = hz;
 800353a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800353c:	637b      	str	r3, [r7, #52]	; 0x34

	/* estimated direction of gravity and flux (v and w) */
	vx = 2.0f*(q1q3 - q0q2);
 800353e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003542:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8003546:	ee77 7a67 	vsub.f32	s15, s14, s15
 800354a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800354e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	vy = 2.0f*(q0q1 + q2q3);
 8003552:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8003556:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800355a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800355e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003562:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	vz = q0q0 - q1q1 - q2q2 + q3q3;
 8003566:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800356a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800356e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003572:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003576:	ee77 7a67 	vsub.f32	s15, s14, s15
 800357a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800357e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003582:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	wx = 2.0f*bx*(0.5f - q2q2 - q3q3) + 2.0f*bz*(q1q3 - q0q2);
 8003586:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800358a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800358e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003592:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003596:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800359a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800359e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80035a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035a6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80035aa:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80035ae:	ed97 6a17 	vldr	s12, [r7, #92]	; 0x5c
 80035b2:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80035b6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80035ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035c2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	wy = 2.0f*bx*(q1q2 - q0q3) + 2.0f*bz*(q0q1 + q2q3);
 80035c6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80035ca:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80035ce:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80035d2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80035d6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80035da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035de:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80035e2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80035e6:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80035ea:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80035ee:	ee76 7a27 	vadd.f32	s15, s12, s15
 80035f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035fa:	edc7 7a08 	vstr	s15, [r7, #32]
	wz = 2.0f*bx*(q0q2 + q1q3) + 2.0f*bz*(0.5f - q1q1 - q2q2);
 80035fe:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003602:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003606:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800360a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800360e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003612:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003616:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800361a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800361e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8003622:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003626:	ee36 6a67 	vsub.f32	s12, s12, s15
 800362a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800362e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003632:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800363a:	edc7 7a07 	vstr	s15, [r7, #28]

	/*
	 * error is sum of cross product between reference direction
	 * of fields and direction measured by sensors
	 */
	ex = (ay*vz - az*vy) + (my*wz - mz*wy);
 800363e:	4b82      	ldr	r3, [pc, #520]	; (8003848 <imu_ahrs_update+0x748>)
 8003640:	ed93 7a00 	vldr	s14, [r3]
 8003644:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003648:	ee27 7a27 	vmul.f32	s14, s14, s15
 800364c:	4b7f      	ldr	r3, [pc, #508]	; (800384c <imu_ahrs_update+0x74c>)
 800364e:	edd3 6a00 	vldr	s13, [r3]
 8003652:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003656:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800365a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800365e:	4b78      	ldr	r3, [pc, #480]	; (8003840 <imu_ahrs_update+0x740>)
 8003660:	edd3 6a00 	vldr	s13, [r3]
 8003664:	edd7 7a07 	vldr	s15, [r7, #28]
 8003668:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800366c:	4b75      	ldr	r3, [pc, #468]	; (8003844 <imu_ahrs_update+0x744>)
 800366e:	ed93 6a00 	vldr	s12, [r3]
 8003672:	edd7 7a08 	vldr	s15, [r7, #32]
 8003676:	ee66 7a27 	vmul.f32	s15, s12, s15
 800367a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800367e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003682:	edc7 7a06 	vstr	s15, [r7, #24]
	ey = (az*vx - ax*vz) + (mz*wx - mx*wz);
 8003686:	4b71      	ldr	r3, [pc, #452]	; (800384c <imu_ahrs_update+0x74c>)
 8003688:	ed93 7a00 	vldr	s14, [r3]
 800368c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003690:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003694:	4b6e      	ldr	r3, [pc, #440]	; (8003850 <imu_ahrs_update+0x750>)
 8003696:	edd3 6a00 	vldr	s13, [r3]
 800369a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800369e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036a6:	4b67      	ldr	r3, [pc, #412]	; (8003844 <imu_ahrs_update+0x744>)
 80036a8:	edd3 6a00 	vldr	s13, [r3]
 80036ac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80036b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80036b4:	4b61      	ldr	r3, [pc, #388]	; (800383c <imu_ahrs_update+0x73c>)
 80036b6:	ed93 6a00 	vldr	s12, [r3]
 80036ba:	edd7 7a07 	vldr	s15, [r7, #28]
 80036be:	ee66 7a27 	vmul.f32	s15, s12, s15
 80036c2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80036c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ca:	edc7 7a05 	vstr	s15, [r7, #20]
	ez = (ax*vy - ay*vx) + (mx*wy - my*wx);
 80036ce:	4b60      	ldr	r3, [pc, #384]	; (8003850 <imu_ahrs_update+0x750>)
 80036d0:	ed93 7a00 	vldr	s14, [r3]
 80036d4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80036d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036dc:	4b5a      	ldr	r3, [pc, #360]	; (8003848 <imu_ahrs_update+0x748>)
 80036de:	edd3 6a00 	vldr	s13, [r3]
 80036e2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80036e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036ee:	4b53      	ldr	r3, [pc, #332]	; (800383c <imu_ahrs_update+0x73c>)
 80036f0:	edd3 6a00 	vldr	s13, [r3]
 80036f4:	edd7 7a08 	vldr	s15, [r7, #32]
 80036f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80036fc:	4b50      	ldr	r3, [pc, #320]	; (8003840 <imu_ahrs_update+0x740>)
 80036fe:	ed93 6a00 	vldr	s12, [r3]
 8003702:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003706:	ee66 7a27 	vmul.f32	s15, s12, s15
 800370a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800370e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003712:	edc7 7a04 	vstr	s15, [r7, #16]

	/* PI */
	if(ex != 0.0f && ey != 0.0f && ez != 0.0f)
 8003716:	edd7 7a06 	vldr	s15, [r7, #24]
 800371a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800371e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003722:	d076      	beq.n	8003812 <imu_ahrs_update+0x712>
 8003724:	edd7 7a05 	vldr	s15, [r7, #20]
 8003728:	eef5 7a40 	vcmp.f32	s15, #0.0
 800372c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003730:	d06f      	beq.n	8003812 <imu_ahrs_update+0x712>
 8003732:	edd7 7a04 	vldr	s15, [r7, #16]
 8003736:	eef5 7a40 	vcmp.f32	s15, #0.0
 800373a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800373e:	d068      	beq.n	8003812 <imu_ahrs_update+0x712>
	{
		exInt = exInt + ex * Ki * halfT;
 8003740:	edd7 7a06 	vldr	s15, [r7, #24]
 8003744:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003854 <imu_ahrs_update+0x754>
 8003748:	ee27 7a87 	vmul.f32	s14, s15, s14
 800374c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003750:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003754:	4b40      	ldr	r3, [pc, #256]	; (8003858 <imu_ahrs_update+0x758>)
 8003756:	edd3 7a00 	vldr	s15, [r3]
 800375a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800375e:	4b3e      	ldr	r3, [pc, #248]	; (8003858 <imu_ahrs_update+0x758>)
 8003760:	edc3 7a00 	vstr	s15, [r3]
		eyInt = eyInt + ey * Ki * halfT;
 8003764:	edd7 7a05 	vldr	s15, [r7, #20]
 8003768:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8003854 <imu_ahrs_update+0x754>
 800376c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003770:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003774:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003778:	4b38      	ldr	r3, [pc, #224]	; (800385c <imu_ahrs_update+0x75c>)
 800377a:	edd3 7a00 	vldr	s15, [r3]
 800377e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003782:	4b36      	ldr	r3, [pc, #216]	; (800385c <imu_ahrs_update+0x75c>)
 8003784:	edc3 7a00 	vstr	s15, [r3]
		ezInt = ezInt + ez * Ki * halfT;
 8003788:	edd7 7a04 	vldr	s15, [r7, #16]
 800378c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8003854 <imu_ahrs_update+0x754>
 8003790:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003794:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003798:	ee27 7a27 	vmul.f32	s14, s14, s15
 800379c:	4b30      	ldr	r3, [pc, #192]	; (8003860 <imu_ahrs_update+0x760>)
 800379e:	edd3 7a00 	vldr	s15, [r3]
 80037a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037a6:	4b2e      	ldr	r3, [pc, #184]	; (8003860 <imu_ahrs_update+0x760>)
 80037a8:	edc3 7a00 	vstr	s15, [r3]

		gx = gx + Kp*ex + exInt;
 80037ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80037b0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80037b4:	4b2b      	ldr	r3, [pc, #172]	; (8003864 <imu_ahrs_update+0x764>)
 80037b6:	edd3 7a00 	vldr	s15, [r3]
 80037ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037be:	4b26      	ldr	r3, [pc, #152]	; (8003858 <imu_ahrs_update+0x758>)
 80037c0:	edd3 7a00 	vldr	s15, [r3]
 80037c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037c8:	4b26      	ldr	r3, [pc, #152]	; (8003864 <imu_ahrs_update+0x764>)
 80037ca:	edc3 7a00 	vstr	s15, [r3]
		gy = gy + Kp*ey + eyInt;
 80037ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80037d2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80037d6:	4b24      	ldr	r3, [pc, #144]	; (8003868 <imu_ahrs_update+0x768>)
 80037d8:	edd3 7a00 	vldr	s15, [r3]
 80037dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037e0:	4b1e      	ldr	r3, [pc, #120]	; (800385c <imu_ahrs_update+0x75c>)
 80037e2:	edd3 7a00 	vldr	s15, [r3]
 80037e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ea:	4b1f      	ldr	r3, [pc, #124]	; (8003868 <imu_ahrs_update+0x768>)
 80037ec:	edc3 7a00 	vstr	s15, [r3]
		gz = gz + Kp*ez + ezInt;
 80037f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80037f4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80037f8:	4b1c      	ldr	r3, [pc, #112]	; (800386c <imu_ahrs_update+0x76c>)
 80037fa:	edd3 7a00 	vldr	s15, [r3]
 80037fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003802:	4b17      	ldr	r3, [pc, #92]	; (8003860 <imu_ahrs_update+0x760>)
 8003804:	edd3 7a00 	vldr	s15, [r3]
 8003808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800380c:	4b17      	ldr	r3, [pc, #92]	; (800386c <imu_ahrs_update+0x76c>)
 800380e:	edc3 7a00 	vstr	s15, [r3]
	}

	tempq0 = q0 + (-q1*gx - q2*gy - q3*gz) * halfT;
 8003812:	4b17      	ldr	r3, [pc, #92]	; (8003870 <imu_ahrs_update+0x770>)
 8003814:	edd3 7a00 	vldr	s15, [r3]
 8003818:	eeb1 7a67 	vneg.f32	s14, s15
 800381c:	4b11      	ldr	r3, [pc, #68]	; (8003864 <imu_ahrs_update+0x764>)
 800381e:	edd3 7a00 	vldr	s15, [r3]
 8003822:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003826:	4b13      	ldr	r3, [pc, #76]	; (8003874 <imu_ahrs_update+0x774>)
 8003828:	edd3 6a00 	vldr	s13, [r3]
 800382c:	4b0e      	ldr	r3, [pc, #56]	; (8003868 <imu_ahrs_update+0x768>)
 800382e:	edd3 7a00 	vldr	s15, [r3]
 8003832:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003836:	ee37 7a67 	vsub.f32	s14, s14, s15
 800383a:	e01d      	b.n	8003878 <imu_ahrs_update+0x778>
 800383c:	200000d0 	.word	0x200000d0
 8003840:	200000d4 	.word	0x200000d4
 8003844:	200000d8 	.word	0x200000d8
 8003848:	200000c8 	.word	0x200000c8
 800384c:	200000cc 	.word	0x200000cc
 8003850:	200000c4 	.word	0x200000c4
 8003854:	3c23d70a 	.word	0x3c23d70a
 8003858:	2000099c 	.word	0x2000099c
 800385c:	200009ac 	.word	0x200009ac
 8003860:	200009e0 	.word	0x200009e0
 8003864:	200000b8 	.word	0x200000b8
 8003868:	200000bc 	.word	0x200000bc
 800386c:	200000c0 	.word	0x200000c0
 8003870:	200000ac 	.word	0x200000ac
 8003874:	200000b0 	.word	0x200000b0
 8003878:	4b6a      	ldr	r3, [pc, #424]	; (8003a24 <imu_ahrs_update+0x924>)
 800387a:	edd3 6a00 	vldr	s13, [r3]
 800387e:	4b6a      	ldr	r3, [pc, #424]	; (8003a28 <imu_ahrs_update+0x928>)
 8003880:	edd3 7a00 	vldr	s15, [r3]
 8003884:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003888:	ee37 7a67 	vsub.f32	s14, s14, s15
 800388c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003890:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003894:	4b65      	ldr	r3, [pc, #404]	; (8003a2c <imu_ahrs_update+0x92c>)
 8003896:	edd3 7a00 	vldr	s15, [r3]
 800389a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800389e:	edc7 7a03 	vstr	s15, [r7, #12]
	tempq1 = q1 + (q0*gx + q2*gz - q3*gy) * halfT;
 80038a2:	4b62      	ldr	r3, [pc, #392]	; (8003a2c <imu_ahrs_update+0x92c>)
 80038a4:	ed93 7a00 	vldr	s14, [r3]
 80038a8:	4b61      	ldr	r3, [pc, #388]	; (8003a30 <imu_ahrs_update+0x930>)
 80038aa:	edd3 7a00 	vldr	s15, [r3]
 80038ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038b2:	4b60      	ldr	r3, [pc, #384]	; (8003a34 <imu_ahrs_update+0x934>)
 80038b4:	edd3 6a00 	vldr	s13, [r3]
 80038b8:	4b5b      	ldr	r3, [pc, #364]	; (8003a28 <imu_ahrs_update+0x928>)
 80038ba:	edd3 7a00 	vldr	s15, [r3]
 80038be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038c6:	4b57      	ldr	r3, [pc, #348]	; (8003a24 <imu_ahrs_update+0x924>)
 80038c8:	edd3 6a00 	vldr	s13, [r3]
 80038cc:	4b5a      	ldr	r3, [pc, #360]	; (8003a38 <imu_ahrs_update+0x938>)
 80038ce:	edd3 7a00 	vldr	s15, [r3]
 80038d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038da:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80038de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038e2:	4b56      	ldr	r3, [pc, #344]	; (8003a3c <imu_ahrs_update+0x93c>)
 80038e4:	edd3 7a00 	vldr	s15, [r3]
 80038e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038ec:	edc7 7a02 	vstr	s15, [r7, #8]
	tempq2 = q2 + (q0*gy - q1*gz + q3*gx) * halfT;
 80038f0:	4b4e      	ldr	r3, [pc, #312]	; (8003a2c <imu_ahrs_update+0x92c>)
 80038f2:	ed93 7a00 	vldr	s14, [r3]
 80038f6:	4b50      	ldr	r3, [pc, #320]	; (8003a38 <imu_ahrs_update+0x938>)
 80038f8:	edd3 7a00 	vldr	s15, [r3]
 80038fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003900:	4b4e      	ldr	r3, [pc, #312]	; (8003a3c <imu_ahrs_update+0x93c>)
 8003902:	edd3 6a00 	vldr	s13, [r3]
 8003906:	4b48      	ldr	r3, [pc, #288]	; (8003a28 <imu_ahrs_update+0x928>)
 8003908:	edd3 7a00 	vldr	s15, [r3]
 800390c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003910:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003914:	4b43      	ldr	r3, [pc, #268]	; (8003a24 <imu_ahrs_update+0x924>)
 8003916:	edd3 6a00 	vldr	s13, [r3]
 800391a:	4b45      	ldr	r3, [pc, #276]	; (8003a30 <imu_ahrs_update+0x930>)
 800391c:	edd3 7a00 	vldr	s15, [r3]
 8003920:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003924:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003928:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800392c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003930:	4b40      	ldr	r3, [pc, #256]	; (8003a34 <imu_ahrs_update+0x934>)
 8003932:	edd3 7a00 	vldr	s15, [r3]
 8003936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800393a:	edc7 7a01 	vstr	s15, [r7, #4]
	tempq3 = q3 + (q0*gz + q1*gy - q2*gx) * halfT;
 800393e:	4b3b      	ldr	r3, [pc, #236]	; (8003a2c <imu_ahrs_update+0x92c>)
 8003940:	ed93 7a00 	vldr	s14, [r3]
 8003944:	4b38      	ldr	r3, [pc, #224]	; (8003a28 <imu_ahrs_update+0x928>)
 8003946:	edd3 7a00 	vldr	s15, [r3]
 800394a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800394e:	4b3b      	ldr	r3, [pc, #236]	; (8003a3c <imu_ahrs_update+0x93c>)
 8003950:	edd3 6a00 	vldr	s13, [r3]
 8003954:	4b38      	ldr	r3, [pc, #224]	; (8003a38 <imu_ahrs_update+0x938>)
 8003956:	edd3 7a00 	vldr	s15, [r3]
 800395a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800395e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003962:	4b34      	ldr	r3, [pc, #208]	; (8003a34 <imu_ahrs_update+0x934>)
 8003964:	edd3 6a00 	vldr	s13, [r3]
 8003968:	4b31      	ldr	r3, [pc, #196]	; (8003a30 <imu_ahrs_update+0x930>)
 800396a:	edd3 7a00 	vldr	s15, [r3]
 800396e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003972:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003976:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800397a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800397e:	4b29      	ldr	r3, [pc, #164]	; (8003a24 <imu_ahrs_update+0x924>)
 8003980:	edd3 7a00 	vldr	s15, [r3]
 8003984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003988:	edc7 7a00 	vstr	s15, [r7]

	/* normalise quaternion */
	norm = inv_sqrt(tempq0*tempq0 + tempq1*tempq1 + tempq2*tempq2 + tempq3*tempq3);
 800398c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003990:	edd7 7a03 	vldr	s15, [r7, #12]
 8003994:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003998:	edd7 6a02 	vldr	s13, [r7, #8]
 800399c:	edd7 7a02 	vldr	s15, [r7, #8]
 80039a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039a8:	edd7 6a01 	vldr	s13, [r7, #4]
 80039ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80039b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039b8:	edd7 6a00 	vldr	s13, [r7]
 80039bc:	edd7 7a00 	vldr	s15, [r7]
 80039c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039c8:	eeb0 0a67 	vmov.f32	s0, s15
 80039cc:	f7fe fd9a 	bl	8002504 <inv_sqrt>
 80039d0:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	q0 = tempq0 * norm;
 80039d4:	ed97 7a03 	vldr	s14, [r7, #12]
 80039d8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80039dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039e0:	4b12      	ldr	r3, [pc, #72]	; (8003a2c <imu_ahrs_update+0x92c>)
 80039e2:	edc3 7a00 	vstr	s15, [r3]
	q1 = tempq1 * norm;
 80039e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80039ea:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80039ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039f2:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <imu_ahrs_update+0x93c>)
 80039f4:	edc3 7a00 	vstr	s15, [r3]
	q2 = tempq2 * norm;
 80039f8:	ed97 7a01 	vldr	s14, [r7, #4]
 80039fc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a04:	4b0b      	ldr	r3, [pc, #44]	; (8003a34 <imu_ahrs_update+0x934>)
 8003a06:	edc3 7a00 	vstr	s15, [r3]
	q3 = tempq3 * norm;
 8003a0a:	ed97 7a00 	vldr	s14, [r7]
 8003a0e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a16:	4b03      	ldr	r3, [pc, #12]	; (8003a24 <imu_ahrs_update+0x924>)
 8003a18:	edc3 7a00 	vstr	s15, [r3]
}
 8003a1c:	bf00      	nop
 8003a1e:	377c      	adds	r7, #124	; 0x7c
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd90      	pop	{r4, r7, pc}
 8003a24:	200000b4 	.word	0x200000b4
 8003a28:	200000c0 	.word	0x200000c0
 8003a2c:	20000000 	.word	0x20000000
 8003a30:	200000b8 	.word	0x200000b8
 8003a34:	200000b0 	.word	0x200000b0
 8003a38:	200000bc 	.word	0x200000bc
 8003a3c:	200000ac 	.word	0x200000ac

08003a40 <imu_attitude_update>:
  * @param
	* @retval
  * @usage  call in main() function
	*/
void imu_attitude_update(void)
{
 8003a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a44:	af00      	add	r7, sp, #0
	imu.last_yaw = imu.yaw;
 8003a46:	4b7c      	ldr	r3, [pc, #496]	; (8003c38 <imu_attitude_update+0x1f8>)
 8003a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a4a:	4a7b      	ldr	r2, [pc, #492]	; (8003c38 <imu_attitude_update+0x1f8>)
 8003a4c:	6413      	str	r3, [r2, #64]	; 0x40
	/* yaw    0----2pi */
	imu.yaw = -atan2(2*q1*q2 + 2*q0*q3, -2*q2*q2 - 2*q3*q3 + 1)* 57.3 + 180.0;
 8003a4e:	4b7b      	ldr	r3, [pc, #492]	; (8003c3c <imu_attitude_update+0x1fc>)
 8003a50:	edd3 7a00 	vldr	s15, [r3]
 8003a54:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003a58:	4b79      	ldr	r3, [pc, #484]	; (8003c40 <imu_attitude_update+0x200>)
 8003a5a:	edd3 7a00 	vldr	s15, [r3]
 8003a5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a62:	4b78      	ldr	r3, [pc, #480]	; (8003c44 <imu_attitude_update+0x204>)
 8003a64:	edd3 7a00 	vldr	s15, [r3]
 8003a68:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003a6c:	4b76      	ldr	r3, [pc, #472]	; (8003c48 <imu_attitude_update+0x208>)
 8003a6e:	edd3 7a00 	vldr	s15, [r3]
 8003a72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a7a:	ee17 0a90 	vmov	r0, s15
 8003a7e:	f7fc fd1b 	bl	80004b8 <__aeabi_f2d>
 8003a82:	4682      	mov	sl, r0
 8003a84:	468b      	mov	fp, r1
 8003a86:	4b6e      	ldr	r3, [pc, #440]	; (8003c40 <imu_attitude_update+0x200>)
 8003a88:	edd3 7a00 	vldr	s15, [r3]
 8003a8c:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8003a90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a94:	4b6a      	ldr	r3, [pc, #424]	; (8003c40 <imu_attitude_update+0x200>)
 8003a96:	edd3 7a00 	vldr	s15, [r3]
 8003a9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a9e:	4b6a      	ldr	r3, [pc, #424]	; (8003c48 <imu_attitude_update+0x208>)
 8003aa0:	edd3 7a00 	vldr	s15, [r3]
 8003aa4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003aa8:	4b67      	ldr	r3, [pc, #412]	; (8003c48 <imu_attitude_update+0x208>)
 8003aaa:	edd3 7a00 	vldr	s15, [r3]
 8003aae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ab2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ab6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003aba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003abe:	ee17 0a90 	vmov	r0, s15
 8003ac2:	f7fc fcf9 	bl	80004b8 <__aeabi_f2d>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	ec43 2b11 	vmov	d1, r2, r3
 8003ace:	ec4b ab10 	vmov	d0, sl, fp
 8003ad2:	f004 ff41 	bl	8008958 <atan2>
 8003ad6:	ec53 2b10 	vmov	r2, r3, d0
 8003ada:	4690      	mov	r8, r2
 8003adc:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8003ae0:	a353      	add	r3, pc, #332	; (adr r3, 8003c30 <imu_attitude_update+0x1f0>)
 8003ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae6:	4640      	mov	r0, r8
 8003ae8:	4649      	mov	r1, r9
 8003aea:	f7fc fd3d 	bl	8000568 <__aeabi_dmul>
 8003aee:	4602      	mov	r2, r0
 8003af0:	460b      	mov	r3, r1
 8003af2:	4610      	mov	r0, r2
 8003af4:	4619      	mov	r1, r3
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	4b54      	ldr	r3, [pc, #336]	; (8003c4c <imu_attitude_update+0x20c>)
 8003afc:	f7fc fb7e 	bl	80001fc <__adddf3>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4610      	mov	r0, r2
 8003b06:	4619      	mov	r1, r3
 8003b08:	f7fd f806 	bl	8000b18 <__aeabi_d2f>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	4b4a      	ldr	r3, [pc, #296]	; (8003c38 <imu_attitude_update+0x1f8>)
 8003b10:	651a      	str	r2, [r3, #80]	; 0x50
	/* pitch  -pi/2----pi/2 */
	imu.pit = -asin(-2*q1*q3 + 2*q0*q2)* 57.3;
 8003b12:	4b4a      	ldr	r3, [pc, #296]	; (8003c3c <imu_attitude_update+0x1fc>)
 8003b14:	edd3 7a00 	vldr	s15, [r3]
 8003b18:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8003b1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b20:	4b49      	ldr	r3, [pc, #292]	; (8003c48 <imu_attitude_update+0x208>)
 8003b22:	edd3 7a00 	vldr	s15, [r3]
 8003b26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b2a:	4b46      	ldr	r3, [pc, #280]	; (8003c44 <imu_attitude_update+0x204>)
 8003b2c:	edd3 7a00 	vldr	s15, [r3]
 8003b30:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003b34:	4b42      	ldr	r3, [pc, #264]	; (8003c40 <imu_attitude_update+0x200>)
 8003b36:	edd3 7a00 	vldr	s15, [r3]
 8003b3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b42:	ee17 0a90 	vmov	r0, s15
 8003b46:	f7fc fcb7 	bl	80004b8 <__aeabi_f2d>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	ec43 2b10 	vmov	d0, r2, r3
 8003b52:	f004 fea9 	bl	80088a8 <asin>
 8003b56:	ec53 2b10 	vmov	r2, r3, d0
 8003b5a:	4614      	mov	r4, r2
 8003b5c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003b60:	a333      	add	r3, pc, #204	; (adr r3, 8003c30 <imu_attitude_update+0x1f0>)
 8003b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b66:	4620      	mov	r0, r4
 8003b68:	4629      	mov	r1, r5
 8003b6a:	f7fc fcfd 	bl	8000568 <__aeabi_dmul>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	460c      	mov	r4, r1
 8003b72:	4618      	mov	r0, r3
 8003b74:	4621      	mov	r1, r4
 8003b76:	f7fc ffcf 	bl	8000b18 <__aeabi_d2f>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	4b2e      	ldr	r3, [pc, #184]	; (8003c38 <imu_attitude_update+0x1f8>)
 8003b7e:	64da      	str	r2, [r3, #76]	; 0x4c
	/* roll   -pi----pi  */
	imu.rol =  atan2(2*q2*q3 + 2*q0*q1, -2*q1*q1 - 2*q2*q2 + 1)* 57.3;
 8003b80:	4b2f      	ldr	r3, [pc, #188]	; (8003c40 <imu_attitude_update+0x200>)
 8003b82:	edd3 7a00 	vldr	s15, [r3]
 8003b86:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003b8a:	4b2f      	ldr	r3, [pc, #188]	; (8003c48 <imu_attitude_update+0x208>)
 8003b8c:	edd3 7a00 	vldr	s15, [r3]
 8003b90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b94:	4b2b      	ldr	r3, [pc, #172]	; (8003c44 <imu_attitude_update+0x204>)
 8003b96:	edd3 7a00 	vldr	s15, [r3]
 8003b9a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003b9e:	4b27      	ldr	r3, [pc, #156]	; (8003c3c <imu_attitude_update+0x1fc>)
 8003ba0:	edd3 7a00 	vldr	s15, [r3]
 8003ba4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bac:	ee17 0a90 	vmov	r0, s15
 8003bb0:	f7fc fc82 	bl	80004b8 <__aeabi_f2d>
 8003bb4:	4604      	mov	r4, r0
 8003bb6:	460d      	mov	r5, r1
 8003bb8:	4b20      	ldr	r3, [pc, #128]	; (8003c3c <imu_attitude_update+0x1fc>)
 8003bba:	edd3 7a00 	vldr	s15, [r3]
 8003bbe:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8003bc2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003bc6:	4b1d      	ldr	r3, [pc, #116]	; (8003c3c <imu_attitude_update+0x1fc>)
 8003bc8:	edd3 7a00 	vldr	s15, [r3]
 8003bcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bd0:	4b1b      	ldr	r3, [pc, #108]	; (8003c40 <imu_attitude_update+0x200>)
 8003bd2:	edd3 7a00 	vldr	s15, [r3]
 8003bd6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003bda:	4b19      	ldr	r3, [pc, #100]	; (8003c40 <imu_attitude_update+0x200>)
 8003bdc:	edd3 7a00 	vldr	s15, [r3]
 8003be0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003be4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003be8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003bf0:	ee17 0a90 	vmov	r0, s15
 8003bf4:	f7fc fc60 	bl	80004b8 <__aeabi_f2d>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	ec43 2b11 	vmov	d1, r2, r3
 8003c00:	ec45 4b10 	vmov	d0, r4, r5
 8003c04:	f004 fea8 	bl	8008958 <atan2>
 8003c08:	ec51 0b10 	vmov	r0, r1, d0
 8003c0c:	a308      	add	r3, pc, #32	; (adr r3, 8003c30 <imu_attitude_update+0x1f0>)
 8003c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c12:	f7fc fca9 	bl	8000568 <__aeabi_dmul>
 8003c16:	4603      	mov	r3, r0
 8003c18:	460c      	mov	r4, r1
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	4621      	mov	r1, r4
 8003c1e:	f7fc ff7b 	bl	8000b18 <__aeabi_d2f>
 8003c22:	4602      	mov	r2, r0
 8003c24:	4b04      	ldr	r3, [pc, #16]	; (8003c38 <imu_attitude_update+0x1f8>)
 8003c26:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003c28:	bf00      	nop
 8003c2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c2e:	bf00      	nop
 8003c30:	66666666 	.word	0x66666666
 8003c34:	404ca666 	.word	0x404ca666
 8003c38:	200000e0 	.word	0x200000e0
 8003c3c:	200000ac 	.word	0x200000ac
 8003c40:	200000b0 	.word	0x200000b0
 8003c44:	20000000 	.word	0x20000000
 8003c48:	200000b4 	.word	0x200000b4
 8003c4c:	40668000 	.word	0x40668000

08003c50 <pwm_imu_start>:
 */

#include "rm_pwm.h"
#include "main.h"

void pwm_imu_start(){
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003c54:	2104      	movs	r1, #4
 8003c56:	4802      	ldr	r0, [pc, #8]	; (8003c60 <pwm_imu_start+0x10>)
 8003c58:	f003 fb6e 	bl	8007338 <HAL_TIM_PWM_Start>
}
 8003c5c:	bf00      	nop
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	20000234 	.word	0x20000234

08003c64 <set_pwm_imu>:

void pwm_buzzer_start(){
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
}

void set_pwm_imu(unsigned short int pwm){
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	80fb      	strh	r3, [r7, #6]
	TIM3->CCR2 = (pwm);
 8003c6e:	4a04      	ldr	r2, [pc, #16]	; (8003c80 <set_pwm_imu+0x1c>)
 8003c70:	88fb      	ldrh	r3, [r7, #6]
 8003c72:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	40000400 	.word	0x40000400

08003c84 <set_pwm_buzzer>:

void set_pwm_buzzer(unsigned short int pwm){
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	80fb      	strh	r3, [r7, #6]
	TIM12->CCR1 = (pwm);
 8003c8e:	4a04      	ldr	r2, [pc, #16]	; (8003ca0 <set_pwm_buzzer+0x1c>)
 8003c90:	88fb      	ldrh	r3, [r7, #6]
 8003c92:	6353      	str	r3, [r2, #52]	; 0x34
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	40001800 	.word	0x40001800

08003ca4 <pwm_flywheel_start>:
void pwm_flywheel_start(){
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8003ca8:	2104      	movs	r1, #4
 8003caa:	4804      	ldr	r0, [pc, #16]	; (8003cbc <pwm_flywheel_start+0x18>)
 8003cac:	f003 fb44 	bl	8007338 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8003cb0:	2108      	movs	r1, #8
 8003cb2:	4802      	ldr	r0, [pc, #8]	; (8003cbc <pwm_flywheel_start+0x18>)
 8003cb4:	f003 fb40 	bl	8007338 <HAL_TIM_PWM_Start>
}
 8003cb8:	bf00      	nop
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	200004b0 	.word	0x200004b0

08003cc0 <set_pwm_flywheel>:
void set_pwm_flywheel(unsigned short int pwm){
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR2 = (pwm);
 8003cca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003cce:	88fb      	ldrh	r3, [r7, #6]
 8003cd0:	6393      	str	r3, [r2, #56]	; 0x38
	TIM2->CCR3 = (pwm);
 8003cd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003cd6:	88fb      	ldrh	r3, [r7, #6]
 8003cd8:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <uart_receive_dma_no_it>:
  * @param[in]  pData: receive buff
  * @param[in]  Size:  buff size
  * @retval     set success or fail
  */
static int uart_receive_dma_no_it(UART_HandleTypeDef* huart, uint8_t* pData, uint32_t Size)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b086      	sub	sp, #24
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	60f8      	str	r0, [r7, #12]
 8003cee:	60b9      	str	r1, [r7, #8]
 8003cf0:	607a      	str	r2, [r7, #4]
  uint32_t tmp1 = 0;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	617b      	str	r3, [r7, #20]

  tmp1 = huart->RxState;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	617b      	str	r3, [r7, #20]

	if (tmp1 == HAL_UART_STATE_READY)
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	2b20      	cmp	r3, #32
 8003d04:	d125      	bne.n	8003d52 <uart_receive_dma_no_it+0x6c>
	{
		if ((pData == NULL) || (Size == 0))
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <uart_receive_dma_no_it+0x2c>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <uart_receive_dma_no_it+0x30>
		{
			return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e01e      	b.n	8003d54 <uart_receive_dma_no_it+0x6e>
		}

		huart->pRxBuffPtr = pData;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	629a      	str	r2, [r3, #40]	; 0x28
		huart->RxXferSize = Size;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	859a      	strh	r2, [r3, #44]	; 0x2c
		huart->ErrorCode  = HAL_UART_ERROR_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Enable the DMA Stream */
		HAL_DMA_Start(huart->hdmarx, (uint32_t)&huart->Instance->DR, (uint32_t)pData, Size);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3304      	adds	r3, #4
 8003d34:	4619      	mov	r1, r3
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f001 ff3f 	bl	8005bbc <HAL_DMA_Start>

		/*
		 * Enable the DMA transfer for the receiver request by setting the DMAR bit
		 * in the UART CR3 register
		 */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	695a      	ldr	r2, [r3, #20]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d4c:	615a      	str	r2, [r3, #20]

		return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	e000      	b.n	8003d54 <uart_receive_dma_no_it+0x6e>
	}
	else
	{
		return HAL_BUSY;
 8003d52:	2302      	movs	r3, #2
	}
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <dma_current_data_counter>:
  * @param[in]  dma_stream: where y can be 1 or 2 to select the DMA and x can be 0
  *             to 7 to select the DMA Stream.
  * @retval     The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t dma_current_data_counter(DMA_Stream_TypeDef *dma_stream)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(dma_stream->NDTR));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	b29b      	uxth	r3, r3
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <rc_callback_handler>:
  * @param[out]  rc:   structure to save handled rc data
  * @param[in]   buff: the buff which saved raw rc data
  * @retval
  */
void rc_callback_handler(rc_info_t *rc, uint8_t *buff)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b082      	sub	sp, #8
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	6039      	str	r1, [r7, #0]
  rc->ch1 = (buff[0] | buff[1] << 8) & 0x07FF;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	b21a      	sxth	r2, r3
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	021b      	lsls	r3, r3, #8
 8003d8e:	b21b      	sxth	r3, r3
 8003d90:	4313      	orrs	r3, r2
 8003d92:	b21b      	sxth	r3, r3
 8003d94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d98:	b21a      	sxth	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	801a      	strh	r2, [r3, #0]
  rc->ch1 -= 1024;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	b21a      	sxth	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	801a      	strh	r2, [r3, #0]
  rc->ch2 = (buff[1] >> 3 | buff[2] << 5) & 0x07FF;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	3301      	adds	r3, #1
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	08db      	lsrs	r3, r3, #3
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	b21a      	sxth	r2, r3
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	3302      	adds	r3, #2
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	015b      	lsls	r3, r3, #5
 8003dc6:	b21b      	sxth	r3, r3
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	b21b      	sxth	r3, r3
 8003dcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dd0:	b21a      	sxth	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	805a      	strh	r2, [r3, #2]
  rc->ch2 -= 1024;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	b21a      	sxth	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	805a      	strh	r2, [r3, #2]
  rc->ch3 = (buff[2] >> 6 | buff[3] << 2 | buff[4] << 10) & 0x07FF;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	3302      	adds	r3, #2
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	099b      	lsrs	r3, r3, #6
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	b21a      	sxth	r2, r3
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	3303      	adds	r3, #3
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	b21b      	sxth	r3, r3
 8003e00:	4313      	orrs	r3, r2
 8003e02:	b21a      	sxth	r2, r3
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	3304      	adds	r3, #4
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	029b      	lsls	r3, r3, #10
 8003e0c:	b21b      	sxth	r3, r3
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	b21b      	sxth	r3, r3
 8003e12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e16:	b21a      	sxth	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	809a      	strh	r2, [r3, #4]
  rc->ch3 -= 1024;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	b21a      	sxth	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	809a      	strh	r2, [r3, #4]
  rc->ch4 = (buff[4] >> 1 | buff[5] << 7) & 0x07FF;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	3304      	adds	r3, #4
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	085b      	lsrs	r3, r3, #1
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	b21a      	sxth	r2, r3
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	3305      	adds	r3, #5
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	01db      	lsls	r3, r3, #7
 8003e44:	b21b      	sxth	r3, r3
 8003e46:	4313      	orrs	r3, r2
 8003e48:	b21b      	sxth	r3, r3
 8003e4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e4e:	b21a      	sxth	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	80da      	strh	r2, [r3, #6]
  rc->ch4 -= 1024;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	b21a      	sxth	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	80da      	strh	r2, [r3, #6]

  rc->sw1 = ((buff[5] >> 4) & 0x000C) >> 2;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	3305      	adds	r3, #5
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	091b      	lsrs	r3, r3, #4
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	109b      	asrs	r3, r3, #2
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	b2da      	uxtb	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	729a      	strb	r2, [r3, #10]
  rc->sw2 = (buff[5] >> 4) & 0x0003;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	3305      	adds	r3, #5
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	091b      	lsrs	r3, r3, #4
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	72da      	strb	r2, [r3, #11]

  if ((abs(rc->ch1) > 660) || \
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	bfb8      	it	lt
 8003e9e:	425b      	neglt	r3, r3
 8003ea0:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8003ea4:	dc1a      	bgt.n	8003edc <rc_callback_handler+0x166>
      (abs(rc->ch2) > 660) || \
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bfb8      	it	lt
 8003eb0:	425b      	neglt	r3, r3
  if ((abs(rc->ch1) > 660) || \
 8003eb2:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8003eb6:	dc11      	bgt.n	8003edc <rc_callback_handler+0x166>
      (abs(rc->ch3) > 660) || \
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	bfb8      	it	lt
 8003ec2:	425b      	neglt	r3, r3
      (abs(rc->ch2) > 660) || \
 8003ec4:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8003ec8:	dc08      	bgt.n	8003edc <rc_callback_handler+0x166>
      (abs(rc->ch4) > 660))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	bfb8      	it	lt
 8003ed4:	425b      	neglt	r3, r3
      (abs(rc->ch3) > 660) || \
 8003ed6:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8003eda:	dd04      	ble.n	8003ee6 <rc_callback_handler+0x170>
  {
    memset(rc, 0, sizeof(rc_info_t));
 8003edc:	2216      	movs	r2, #22
 8003ede:	2100      	movs	r1, #0
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f004 fc5e 	bl	80087a2 <memset>
  }

  rc->mouse.x = buff[6] | (buff[7] << 8);                    //!< Mouse X axis
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	3306      	adds	r3, #6
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	b21a      	sxth	r2, r3
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	3307      	adds	r3, #7
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	021b      	lsls	r3, r3, #8
 8003ef6:	b21b      	sxth	r3, r3
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	b21a      	sxth	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	819a      	strh	r2, [r3, #12]
  rc->mouse.y = buff[8] | (buff[9] << 8);                    //!< Mouse Y axis
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	3308      	adds	r3, #8
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	b21a      	sxth	r2, r3
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	3309      	adds	r3, #9
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	021b      	lsls	r3, r3, #8
 8003f10:	b21b      	sxth	r3, r3
 8003f12:	4313      	orrs	r3, r2
 8003f14:	b21a      	sxth	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	81da      	strh	r2, [r3, #14]
  rc->mouse.z = buff[10] | (buff[11] << 8);                  //!< Mouse Z axis
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	330a      	adds	r3, #10
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	b21a      	sxth	r2, r3
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	330b      	adds	r3, #11
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	021b      	lsls	r3, r3, #8
 8003f2a:	b21b      	sxth	r3, r3
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	b21a      	sxth	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	821a      	strh	r2, [r3, #16]
  rc->mouse.l = buff[12];                                  //!< Mouse Left Is Press ?
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	7b1a      	ldrb	r2, [r3, #12]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	749a      	strb	r2, [r3, #18]
  rc->mouse.r = buff[13];                                  //!< Mouse Right Is Press ?
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	7b5a      	ldrb	r2, [r3, #13]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	74da      	strb	r2, [r3, #19]
  rc->kb.key_code = buff[14] | (buff[15] << 8);                    //!< KeyBoard value
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	330e      	adds	r3, #14
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	b21a      	sxth	r2, r3
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	330f      	adds	r3, #15
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	021b      	lsls	r3, r3, #8
 8003f54:	b21b      	sxth	r3, r3
 8003f56:	4313      	orrs	r3, r2
 8003f58:	b21b      	sxth	r3, r3
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	829a      	strh	r2, [r3, #20]
  rc->wheel = buff[16] | ( buff[17] << 8);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	3310      	adds	r3, #16
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	b21a      	sxth	r2, r3
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	3311      	adds	r3, #17
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	021b      	lsls	r3, r3, #8
 8003f70:	b21b      	sxth	r3, r3
 8003f72:	4313      	orrs	r3, r2
 8003f74:	b21a      	sxth	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	811a      	strh	r2, [r3, #8]
  rc->wheel -= 1024;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	b21a      	sxth	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	811a      	strh	r2, [r3, #8]
}
 8003f8e:	bf00      	nop
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <uart_rx_idle_callback>:
  * @brief      clear idle it flag after uart receive a frame data
  * @param[in]  huart: uart IRQHandler id
  * @retval
  */
static void uart_rx_idle_callback(UART_HandleTypeDef* huart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
	/* clear idle it flag avoid idle interrupt all the time */
	__HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	68fb      	ldr	r3, [r7, #12]

	/* handle received data in idle interrupt */
	if (huart == &DBUS_HUART)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a17      	ldr	r2, [pc, #92]	; (8004018 <uart_rx_idle_callback+0x80>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d127      	bne.n	800400e <uart_rx_idle_callback+0x76>
	{
		/* clear DMA transfer complete flag */
		__HAL_DMA_DISABLE(huart->hdmarx);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0201 	bic.w	r2, r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]

		/* handle dbus data dbus_buf from DMA */
		if ((DBUS_MAX_LEN - dma_current_data_counter(huart->hdmarx->Instance)) == DBUS_BUFLEN)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff febf 	bl	8003d5c <dma_current_data_counter>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8003fe4:	2b12      	cmp	r3, #18
 8003fe6:	d103      	bne.n	8003ff0 <uart_rx_idle_callback+0x58>
		{
			rc_callback_handler(&rc, dbus_buf);
 8003fe8:	490c      	ldr	r1, [pc, #48]	; (800401c <uart_rx_idle_callback+0x84>)
 8003fea:	480d      	ldr	r0, [pc, #52]	; (8004020 <uart_rx_idle_callback+0x88>)
 8003fec:	f7ff fec3 	bl	8003d76 <rc_callback_handler>
		}

		/* restart dma transmission */
		__HAL_DMA_SET_COUNTER(huart->hdmarx, DBUS_MAX_LEN);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2224      	movs	r2, #36	; 0x24
 8003ff8:	605a      	str	r2, [r3, #4]
		__HAL_DMA_ENABLE(huart->hdmarx);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f042 0201 	orr.w	r2, r2, #1
 800400c:	601a      	str	r2, [r3, #0]
	}
}
 800400e:	bf00      	nop
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	20000360 	.word	0x20000360
 800401c:	20000a00 	.word	0x20000a00
 8004020:	200009e8 	.word	0x200009e8

08004024 <uart_receive_handler>:
  * @brief      callback this function when uart interrupt
  * @param[in]  huart: uart IRQHandler id
  * @retval
  */
void uart_receive_handler(UART_HandleTypeDef *huart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) &&
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0310 	and.w	r3, r3, #16
 8004036:	2b10      	cmp	r3, #16
 8004038:	d109      	bne.n	800404e <uart_receive_handler+0x2a>
			__HAL_UART_GET_IT_SOURCE(huart, UART_IT_IDLE))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f003 0310 	and.w	r3, r3, #16
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) &&
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <uart_receive_handler+0x2a>
	{
		uart_rx_idle_callback(huart);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7ff ffa5 	bl	8003f98 <uart_rx_idle_callback>
	}
}
 800404e:	bf00      	nop
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <dbus_uart_init>:
  * @brief   initialize dbus uart device
  * @param
  * @retval
  */
void dbus_uart_init(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
	/* open uart idle it */
	__HAL_UART_CLEAR_IDLEFLAG(&DBUS_HUART);
 800405e:	2300      	movs	r3, #0
 8004060:	607b      	str	r3, [r7, #4]
 8004062:	4b0d      	ldr	r3, [pc, #52]	; (8004098 <dbus_uart_init+0x40>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	607b      	str	r3, [r7, #4]
 800406a:	4b0b      	ldr	r3, [pc, #44]	; (8004098 <dbus_uart_init+0x40>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	607b      	str	r3, [r7, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
	__HAL_UART_ENABLE_IT(&DBUS_HUART, UART_IT_IDLE);
 8004074:	4b08      	ldr	r3, [pc, #32]	; (8004098 <dbus_uart_init+0x40>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	4b07      	ldr	r3, [pc, #28]	; (8004098 <dbus_uart_init+0x40>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0210 	orr.w	r2, r2, #16
 8004082:	60da      	str	r2, [r3, #12]

	uart_receive_dma_no_it(&DBUS_HUART, dbus_buf, DBUS_MAX_LEN);
 8004084:	2224      	movs	r2, #36	; 0x24
 8004086:	4905      	ldr	r1, [pc, #20]	; (800409c <dbus_uart_init+0x44>)
 8004088:	4803      	ldr	r0, [pc, #12]	; (8004098 <dbus_uart_init+0x40>)
 800408a:	f7ff fe2c 	bl	8003ce6 <uart_receive_dma_no_it>
}
 800408e:	bf00      	nop
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	20000360 	.word	0x20000360
 800409c:	20000a00 	.word	0x20000a00

080040a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040a6:	2300      	movs	r3, #0
 80040a8:	607b      	str	r3, [r7, #4]
 80040aa:	4b10      	ldr	r3, [pc, #64]	; (80040ec <HAL_MspInit+0x4c>)
 80040ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ae:	4a0f      	ldr	r2, [pc, #60]	; (80040ec <HAL_MspInit+0x4c>)
 80040b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040b4:	6453      	str	r3, [r2, #68]	; 0x44
 80040b6:	4b0d      	ldr	r3, [pc, #52]	; (80040ec <HAL_MspInit+0x4c>)
 80040b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040be:	607b      	str	r3, [r7, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040c2:	2300      	movs	r3, #0
 80040c4:	603b      	str	r3, [r7, #0]
 80040c6:	4b09      	ldr	r3, [pc, #36]	; (80040ec <HAL_MspInit+0x4c>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	4a08      	ldr	r2, [pc, #32]	; (80040ec <HAL_MspInit+0x4c>)
 80040cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d0:	6413      	str	r3, [r2, #64]	; 0x40
 80040d2:	4b06      	ldr	r3, [pc, #24]	; (80040ec <HAL_MspInit+0x4c>)
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	40023800 	.word	0x40023800

080040f0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b08c      	sub	sp, #48	; 0x30
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f8:	f107 031c 	add.w	r3, r7, #28
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	605a      	str	r2, [r3, #4]
 8004102:	609a      	str	r2, [r3, #8]
 8004104:	60da      	str	r2, [r3, #12]
 8004106:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a52      	ldr	r2, [pc, #328]	; (8004258 <HAL_CAN_MspInit+0x168>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d145      	bne.n	800419e <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004112:	4b52      	ldr	r3, [pc, #328]	; (800425c <HAL_CAN_MspInit+0x16c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	3301      	adds	r3, #1
 8004118:	4a50      	ldr	r2, [pc, #320]	; (800425c <HAL_CAN_MspInit+0x16c>)
 800411a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800411c:	4b4f      	ldr	r3, [pc, #316]	; (800425c <HAL_CAN_MspInit+0x16c>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d10d      	bne.n	8004140 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004124:	2300      	movs	r3, #0
 8004126:	61bb      	str	r3, [r7, #24]
 8004128:	4b4d      	ldr	r3, [pc, #308]	; (8004260 <HAL_CAN_MspInit+0x170>)
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	4a4c      	ldr	r2, [pc, #304]	; (8004260 <HAL_CAN_MspInit+0x170>)
 800412e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004132:	6413      	str	r3, [r2, #64]	; 0x40
 8004134:	4b4a      	ldr	r3, [pc, #296]	; (8004260 <HAL_CAN_MspInit+0x170>)
 8004136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413c:	61bb      	str	r3, [r7, #24]
 800413e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004140:	2300      	movs	r3, #0
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	4b46      	ldr	r3, [pc, #280]	; (8004260 <HAL_CAN_MspInit+0x170>)
 8004146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004148:	4a45      	ldr	r2, [pc, #276]	; (8004260 <HAL_CAN_MspInit+0x170>)
 800414a:	f043 0308 	orr.w	r3, r3, #8
 800414e:	6313      	str	r3, [r2, #48]	; 0x30
 8004150:	4b43      	ldr	r3, [pc, #268]	; (8004260 <HAL_CAN_MspInit+0x170>)
 8004152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	617b      	str	r3, [r7, #20]
 800415a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800415c:	2303      	movs	r3, #3
 800415e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004160:	2302      	movs	r3, #2
 8004162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004164:	2300      	movs	r3, #0
 8004166:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004168:	2303      	movs	r3, #3
 800416a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800416c:	2309      	movs	r3, #9
 800416e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004170:	f107 031c 	add.w	r3, r7, #28
 8004174:	4619      	mov	r1, r3
 8004176:	483b      	ldr	r0, [pc, #236]	; (8004264 <HAL_CAN_MspInit+0x174>)
 8004178:	f001 ffe6 	bl	8006148 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800417c:	2200      	movs	r2, #0
 800417e:	2100      	movs	r1, #0
 8004180:	2013      	movs	r0, #19
 8004182:	f001 fc36 	bl	80059f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8004186:	2013      	movs	r0, #19
 8004188:	f001 fc4f 	bl	8005a2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800418c:	2200      	movs	r2, #0
 800418e:	2100      	movs	r1, #0
 8004190:	2014      	movs	r0, #20
 8004192:	f001 fc2e 	bl	80059f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8004196:	2014      	movs	r0, #20
 8004198:	f001 fc47 	bl	8005a2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800419c:	e058      	b.n	8004250 <HAL_CAN_MspInit+0x160>
  else if(hcan->Instance==CAN2)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a31      	ldr	r2, [pc, #196]	; (8004268 <HAL_CAN_MspInit+0x178>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d153      	bne.n	8004250 <HAL_CAN_MspInit+0x160>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80041a8:	2300      	movs	r3, #0
 80041aa:	613b      	str	r3, [r7, #16]
 80041ac:	4b2c      	ldr	r3, [pc, #176]	; (8004260 <HAL_CAN_MspInit+0x170>)
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	4a2b      	ldr	r2, [pc, #172]	; (8004260 <HAL_CAN_MspInit+0x170>)
 80041b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041b6:	6413      	str	r3, [r2, #64]	; 0x40
 80041b8:	4b29      	ldr	r3, [pc, #164]	; (8004260 <HAL_CAN_MspInit+0x170>)
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041c0:	613b      	str	r3, [r7, #16]
 80041c2:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80041c4:	4b25      	ldr	r3, [pc, #148]	; (800425c <HAL_CAN_MspInit+0x16c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3301      	adds	r3, #1
 80041ca:	4a24      	ldr	r2, [pc, #144]	; (800425c <HAL_CAN_MspInit+0x16c>)
 80041cc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80041ce:	4b23      	ldr	r3, [pc, #140]	; (800425c <HAL_CAN_MspInit+0x16c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d10d      	bne.n	80041f2 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80041d6:	2300      	movs	r3, #0
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	4b21      	ldr	r3, [pc, #132]	; (8004260 <HAL_CAN_MspInit+0x170>)
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	4a20      	ldr	r2, [pc, #128]	; (8004260 <HAL_CAN_MspInit+0x170>)
 80041e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041e4:	6413      	str	r3, [r2, #64]	; 0x40
 80041e6:	4b1e      	ldr	r3, [pc, #120]	; (8004260 <HAL_CAN_MspInit+0x170>)
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041f2:	2300      	movs	r3, #0
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	4b1a      	ldr	r3, [pc, #104]	; (8004260 <HAL_CAN_MspInit+0x170>)
 80041f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fa:	4a19      	ldr	r2, [pc, #100]	; (8004260 <HAL_CAN_MspInit+0x170>)
 80041fc:	f043 0302 	orr.w	r3, r3, #2
 8004200:	6313      	str	r3, [r2, #48]	; 0x30
 8004202:	4b17      	ldr	r3, [pc, #92]	; (8004260 <HAL_CAN_MspInit+0x170>)
 8004204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	60bb      	str	r3, [r7, #8]
 800420c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800420e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004214:	2302      	movs	r3, #2
 8004216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004218:	2300      	movs	r3, #0
 800421a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800421c:	2303      	movs	r3, #3
 800421e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8004220:	2309      	movs	r3, #9
 8004222:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004224:	f107 031c 	add.w	r3, r7, #28
 8004228:	4619      	mov	r1, r3
 800422a:	4810      	ldr	r0, [pc, #64]	; (800426c <HAL_CAN_MspInit+0x17c>)
 800422c:	f001 ff8c 	bl	8006148 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8004230:	2200      	movs	r2, #0
 8004232:	2100      	movs	r1, #0
 8004234:	203f      	movs	r0, #63	; 0x3f
 8004236:	f001 fbdc 	bl	80059f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 800423a:	203f      	movs	r0, #63	; 0x3f
 800423c:	f001 fbf5 	bl	8005a2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8004240:	2200      	movs	r2, #0
 8004242:	2100      	movs	r1, #0
 8004244:	2040      	movs	r0, #64	; 0x40
 8004246:	f001 fbd4 	bl	80059f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800424a:	2040      	movs	r0, #64	; 0x40
 800424c:	f001 fbed 	bl	8005a2a <HAL_NVIC_EnableIRQ>
}
 8004250:	bf00      	nop
 8004252:	3730      	adds	r7, #48	; 0x30
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40006400 	.word	0x40006400
 800425c:	20000134 	.word	0x20000134
 8004260:	40023800 	.word	0x40023800
 8004264:	40020c00 	.word	0x40020c00
 8004268:	40006800 	.word	0x40006800
 800426c:	40020400 	.word	0x40020400

08004270 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08a      	sub	sp, #40	; 0x28
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004278:	f107 0314 	add.w	r3, r7, #20
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	605a      	str	r2, [r3, #4]
 8004282:	609a      	str	r2, [r3, #8]
 8004284:	60da      	str	r2, [r3, #12]
 8004286:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a19      	ldr	r2, [pc, #100]	; (80042f4 <HAL_SPI_MspInit+0x84>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d12c      	bne.n	80042ec <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004292:	2300      	movs	r3, #0
 8004294:	613b      	str	r3, [r7, #16]
 8004296:	4b18      	ldr	r3, [pc, #96]	; (80042f8 <HAL_SPI_MspInit+0x88>)
 8004298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429a:	4a17      	ldr	r2, [pc, #92]	; (80042f8 <HAL_SPI_MspInit+0x88>)
 800429c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042a0:	6453      	str	r3, [r2, #68]	; 0x44
 80042a2:	4b15      	ldr	r3, [pc, #84]	; (80042f8 <HAL_SPI_MspInit+0x88>)
 80042a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042aa:	613b      	str	r3, [r7, #16]
 80042ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <HAL_SPI_MspInit+0x88>)
 80042b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b6:	4a10      	ldr	r2, [pc, #64]	; (80042f8 <HAL_SPI_MspInit+0x88>)
 80042b8:	f043 0320 	orr.w	r3, r3, #32
 80042bc:	6313      	str	r3, [r2, #48]	; 0x30
 80042be:	4b0e      	ldr	r3, [pc, #56]	; (80042f8 <HAL_SPI_MspInit+0x88>)
 80042c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c2:	f003 0320 	and.w	r3, r3, #32
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 80042ca:	f44f 7360 	mov.w	r3, #896	; 0x380
 80042ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042d0:	2302      	movs	r3, #2
 80042d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d4:	2300      	movs	r3, #0
 80042d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042d8:	2303      	movs	r3, #3
 80042da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80042dc:	2305      	movs	r3, #5
 80042de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80042e0:	f107 0314 	add.w	r3, r7, #20
 80042e4:	4619      	mov	r1, r3
 80042e6:	4805      	ldr	r0, [pc, #20]	; (80042fc <HAL_SPI_MspInit+0x8c>)
 80042e8:	f001 ff2e 	bl	8006148 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80042ec:	bf00      	nop
 80042ee:	3728      	adds	r7, #40	; 0x28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40015000 	.word	0x40015000
 80042f8:	40023800 	.word	0x40023800
 80042fc:	40021400 	.word	0x40021400

08004300 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004300:	b480      	push	{r7}
 8004302:	b089      	sub	sp, #36	; 0x24
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004310:	d10e      	bne.n	8004330 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004312:	2300      	movs	r3, #0
 8004314:	61fb      	str	r3, [r7, #28]
 8004316:	4b31      	ldr	r3, [pc, #196]	; (80043dc <HAL_TIM_PWM_MspInit+0xdc>)
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	4a30      	ldr	r2, [pc, #192]	; (80043dc <HAL_TIM_PWM_MspInit+0xdc>)
 800431c:	f043 0301 	orr.w	r3, r3, #1
 8004320:	6413      	str	r3, [r2, #64]	; 0x40
 8004322:	4b2e      	ldr	r3, [pc, #184]	; (80043dc <HAL_TIM_PWM_MspInit+0xdc>)
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	61fb      	str	r3, [r7, #28]
 800432c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800432e:	e04e      	b.n	80043ce <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM3)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a2a      	ldr	r2, [pc, #168]	; (80043e0 <HAL_TIM_PWM_MspInit+0xe0>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d10e      	bne.n	8004358 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800433a:	2300      	movs	r3, #0
 800433c:	61bb      	str	r3, [r7, #24]
 800433e:	4b27      	ldr	r3, [pc, #156]	; (80043dc <HAL_TIM_PWM_MspInit+0xdc>)
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	4a26      	ldr	r2, [pc, #152]	; (80043dc <HAL_TIM_PWM_MspInit+0xdc>)
 8004344:	f043 0302 	orr.w	r3, r3, #2
 8004348:	6413      	str	r3, [r2, #64]	; 0x40
 800434a:	4b24      	ldr	r3, [pc, #144]	; (80043dc <HAL_TIM_PWM_MspInit+0xdc>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	61bb      	str	r3, [r7, #24]
 8004354:	69bb      	ldr	r3, [r7, #24]
}
 8004356:	e03a      	b.n	80043ce <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM4)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a21      	ldr	r2, [pc, #132]	; (80043e4 <HAL_TIM_PWM_MspInit+0xe4>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d10e      	bne.n	8004380 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	4b1d      	ldr	r3, [pc, #116]	; (80043dc <HAL_TIM_PWM_MspInit+0xdc>)
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	4a1c      	ldr	r2, [pc, #112]	; (80043dc <HAL_TIM_PWM_MspInit+0xdc>)
 800436c:	f043 0304 	orr.w	r3, r3, #4
 8004370:	6413      	str	r3, [r2, #64]	; 0x40
 8004372:	4b1a      	ldr	r3, [pc, #104]	; (80043dc <HAL_TIM_PWM_MspInit+0xdc>)
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	f003 0304 	and.w	r3, r3, #4
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	697b      	ldr	r3, [r7, #20]
}
 800437e:	e026      	b.n	80043ce <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM5)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a18      	ldr	r2, [pc, #96]	; (80043e8 <HAL_TIM_PWM_MspInit+0xe8>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d10e      	bne.n	80043a8 <HAL_TIM_PWM_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800438a:	2300      	movs	r3, #0
 800438c:	613b      	str	r3, [r7, #16]
 800438e:	4b13      	ldr	r3, [pc, #76]	; (80043dc <HAL_TIM_PWM_MspInit+0xdc>)
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	4a12      	ldr	r2, [pc, #72]	; (80043dc <HAL_TIM_PWM_MspInit+0xdc>)
 8004394:	f043 0308 	orr.w	r3, r3, #8
 8004398:	6413      	str	r3, [r2, #64]	; 0x40
 800439a:	4b10      	ldr	r3, [pc, #64]	; (80043dc <HAL_TIM_PWM_MspInit+0xdc>)
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	613b      	str	r3, [r7, #16]
 80043a4:	693b      	ldr	r3, [r7, #16]
}
 80043a6:	e012      	b.n	80043ce <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM12)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a0f      	ldr	r2, [pc, #60]	; (80043ec <HAL_TIM_PWM_MspInit+0xec>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d10d      	bne.n	80043ce <HAL_TIM_PWM_MspInit+0xce>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80043b2:	2300      	movs	r3, #0
 80043b4:	60fb      	str	r3, [r7, #12]
 80043b6:	4b09      	ldr	r3, [pc, #36]	; (80043dc <HAL_TIM_PWM_MspInit+0xdc>)
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	4a08      	ldr	r2, [pc, #32]	; (80043dc <HAL_TIM_PWM_MspInit+0xdc>)
 80043bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043c0:	6413      	str	r3, [r2, #64]	; 0x40
 80043c2:	4b06      	ldr	r3, [pc, #24]	; (80043dc <HAL_TIM_PWM_MspInit+0xdc>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	68fb      	ldr	r3, [r7, #12]
}
 80043ce:	bf00      	nop
 80043d0:	3724      	adds	r7, #36	; 0x24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	40023800 	.word	0x40023800
 80043e0:	40000400 	.word	0x40000400
 80043e4:	40000800 	.word	0x40000800
 80043e8:	40000c00 	.word	0x40000c00
 80043ec:	40001800 	.word	0x40001800

080043f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b08c      	sub	sp, #48	; 0x30
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043f8:	f107 031c 	add.w	r3, r7, #28
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	605a      	str	r2, [r3, #4]
 8004402:	609a      	str	r2, [r3, #8]
 8004404:	60da      	str	r2, [r3, #12]
 8004406:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004410:	d11e      	bne.n	8004450 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004412:	2300      	movs	r3, #0
 8004414:	61bb      	str	r3, [r7, #24]
 8004416:	4b59      	ldr	r3, [pc, #356]	; (800457c <HAL_TIM_MspPostInit+0x18c>)
 8004418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441a:	4a58      	ldr	r2, [pc, #352]	; (800457c <HAL_TIM_MspPostInit+0x18c>)
 800441c:	f043 0301 	orr.w	r3, r3, #1
 8004420:	6313      	str	r3, [r2, #48]	; 0x30
 8004422:	4b56      	ldr	r3, [pc, #344]	; (800457c <HAL_TIM_MspPostInit+0x18c>)
 8004424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	61bb      	str	r3, [r7, #24]
 800442c:	69bb      	ldr	r3, [r7, #24]
    PA1     ------> TIM2_CH2
    PA0/WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800442e:	230f      	movs	r3, #15
 8004430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004432:	2302      	movs	r3, #2
 8004434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004436:	2300      	movs	r3, #0
 8004438:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800443a:	2300      	movs	r3, #0
 800443c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800443e:	2301      	movs	r3, #1
 8004440:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004442:	f107 031c 	add.w	r3, r7, #28
 8004446:	4619      	mov	r1, r3
 8004448:	484d      	ldr	r0, [pc, #308]	; (8004580 <HAL_TIM_MspPostInit+0x190>)
 800444a:	f001 fe7d 	bl	8006148 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800444e:	e090      	b.n	8004572 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM3)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a4b      	ldr	r2, [pc, #300]	; (8004584 <HAL_TIM_MspPostInit+0x194>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d11e      	bne.n	8004498 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800445a:	2300      	movs	r3, #0
 800445c:	617b      	str	r3, [r7, #20]
 800445e:	4b47      	ldr	r3, [pc, #284]	; (800457c <HAL_TIM_MspPostInit+0x18c>)
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	4a46      	ldr	r2, [pc, #280]	; (800457c <HAL_TIM_MspPostInit+0x18c>)
 8004464:	f043 0302 	orr.w	r3, r3, #2
 8004468:	6313      	str	r3, [r2, #48]	; 0x30
 800446a:	4b44      	ldr	r3, [pc, #272]	; (800457c <HAL_TIM_MspPostInit+0x18c>)
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	617b      	str	r3, [r7, #20]
 8004474:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004476:	2320      	movs	r3, #32
 8004478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800447a:	2302      	movs	r3, #2
 800447c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447e:	2300      	movs	r3, #0
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004482:	2300      	movs	r3, #0
 8004484:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004486:	2302      	movs	r3, #2
 8004488:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800448a:	f107 031c 	add.w	r3, r7, #28
 800448e:	4619      	mov	r1, r3
 8004490:	483d      	ldr	r0, [pc, #244]	; (8004588 <HAL_TIM_MspPostInit+0x198>)
 8004492:	f001 fe59 	bl	8006148 <HAL_GPIO_Init>
}
 8004496:	e06c      	b.n	8004572 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM4)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a3b      	ldr	r2, [pc, #236]	; (800458c <HAL_TIM_MspPostInit+0x19c>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d11f      	bne.n	80044e2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80044a2:	2300      	movs	r3, #0
 80044a4:	613b      	str	r3, [r7, #16]
 80044a6:	4b35      	ldr	r3, [pc, #212]	; (800457c <HAL_TIM_MspPostInit+0x18c>)
 80044a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044aa:	4a34      	ldr	r2, [pc, #208]	; (800457c <HAL_TIM_MspPostInit+0x18c>)
 80044ac:	f043 0308 	orr.w	r3, r3, #8
 80044b0:	6313      	str	r3, [r2, #48]	; 0x30
 80044b2:	4b32      	ldr	r3, [pc, #200]	; (800457c <HAL_TIM_MspPostInit+0x18c>)
 80044b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b6:	f003 0308 	and.w	r3, r3, #8
 80044ba:	613b      	str	r3, [r7, #16]
 80044bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
 80044be:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80044c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c4:	2302      	movs	r3, #2
 80044c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c8:	2300      	movs	r3, #0
 80044ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044cc:	2300      	movs	r3, #0
 80044ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80044d0:	2302      	movs	r3, #2
 80044d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044d4:	f107 031c 	add.w	r3, r7, #28
 80044d8:	4619      	mov	r1, r3
 80044da:	482d      	ldr	r0, [pc, #180]	; (8004590 <HAL_TIM_MspPostInit+0x1a0>)
 80044dc:	f001 fe34 	bl	8006148 <HAL_GPIO_Init>
}
 80044e0:	e047      	b.n	8004572 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM5)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a2b      	ldr	r2, [pc, #172]	; (8004594 <HAL_TIM_MspPostInit+0x1a4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d11f      	bne.n	800452c <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80044ec:	2300      	movs	r3, #0
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	4b22      	ldr	r3, [pc, #136]	; (800457c <HAL_TIM_MspPostInit+0x18c>)
 80044f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f4:	4a21      	ldr	r2, [pc, #132]	; (800457c <HAL_TIM_MspPostInit+0x18c>)
 80044f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044fa:	6313      	str	r3, [r2, #48]	; 0x30
 80044fc:	4b1f      	ldr	r3, [pc, #124]	; (800457c <HAL_TIM_MspPostInit+0x18c>)
 80044fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8004508:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800450c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800450e:	2302      	movs	r3, #2
 8004510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004512:	2300      	movs	r3, #0
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004516:	2300      	movs	r3, #0
 8004518:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800451a:	2302      	movs	r3, #2
 800451c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800451e:	f107 031c 	add.w	r3, r7, #28
 8004522:	4619      	mov	r1, r3
 8004524:	481c      	ldr	r0, [pc, #112]	; (8004598 <HAL_TIM_MspPostInit+0x1a8>)
 8004526:	f001 fe0f 	bl	8006148 <HAL_GPIO_Init>
}
 800452a:	e022      	b.n	8004572 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM12)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a1a      	ldr	r2, [pc, #104]	; (800459c <HAL_TIM_MspPostInit+0x1ac>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d11d      	bne.n	8004572 <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004536:	2300      	movs	r3, #0
 8004538:	60bb      	str	r3, [r7, #8]
 800453a:	4b10      	ldr	r3, [pc, #64]	; (800457c <HAL_TIM_MspPostInit+0x18c>)
 800453c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453e:	4a0f      	ldr	r2, [pc, #60]	; (800457c <HAL_TIM_MspPostInit+0x18c>)
 8004540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004544:	6313      	str	r3, [r2, #48]	; 0x30
 8004546:	4b0d      	ldr	r3, [pc, #52]	; (800457c <HAL_TIM_MspPostInit+0x18c>)
 8004548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454e:	60bb      	str	r3, [r7, #8]
 8004550:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004552:	2340      	movs	r3, #64	; 0x40
 8004554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004556:	2302      	movs	r3, #2
 8004558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800455a:	2300      	movs	r3, #0
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800455e:	2300      	movs	r3, #0
 8004560:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004562:	2309      	movs	r3, #9
 8004564:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004566:	f107 031c 	add.w	r3, r7, #28
 800456a:	4619      	mov	r1, r3
 800456c:	480a      	ldr	r0, [pc, #40]	; (8004598 <HAL_TIM_MspPostInit+0x1a8>)
 800456e:	f001 fdeb 	bl	8006148 <HAL_GPIO_Init>
}
 8004572:	bf00      	nop
 8004574:	3730      	adds	r7, #48	; 0x30
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	40023800 	.word	0x40023800
 8004580:	40020000 	.word	0x40020000
 8004584:	40000400 	.word	0x40000400
 8004588:	40020400 	.word	0x40020400
 800458c:	40000800 	.word	0x40000800
 8004590:	40020c00 	.word	0x40020c00
 8004594:	40000c00 	.word	0x40000c00
 8004598:	40021c00 	.word	0x40021c00
 800459c:	40001800 	.word	0x40001800

080045a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08e      	sub	sp, #56	; 0x38
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	605a      	str	r2, [r3, #4]
 80045b2:	609a      	str	r2, [r3, #8]
 80045b4:	60da      	str	r2, [r3, #12]
 80045b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a9e      	ldr	r2, [pc, #632]	; (8004838 <HAL_UART_MspInit+0x298>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d164      	bne.n	800468c <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80045c2:	2300      	movs	r3, #0
 80045c4:	623b      	str	r3, [r7, #32]
 80045c6:	4b9d      	ldr	r3, [pc, #628]	; (800483c <HAL_UART_MspInit+0x29c>)
 80045c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ca:	4a9c      	ldr	r2, [pc, #624]	; (800483c <HAL_UART_MspInit+0x29c>)
 80045cc:	f043 0310 	orr.w	r3, r3, #16
 80045d0:	6453      	str	r3, [r2, #68]	; 0x44
 80045d2:	4b9a      	ldr	r3, [pc, #616]	; (800483c <HAL_UART_MspInit+0x29c>)
 80045d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d6:	f003 0310 	and.w	r3, r3, #16
 80045da:	623b      	str	r3, [r7, #32]
 80045dc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045de:	2300      	movs	r3, #0
 80045e0:	61fb      	str	r3, [r7, #28]
 80045e2:	4b96      	ldr	r3, [pc, #600]	; (800483c <HAL_UART_MspInit+0x29c>)
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e6:	4a95      	ldr	r2, [pc, #596]	; (800483c <HAL_UART_MspInit+0x29c>)
 80045e8:	f043 0302 	orr.w	r3, r3, #2
 80045ec:	6313      	str	r3, [r2, #48]	; 0x30
 80045ee:	4b93      	ldr	r3, [pc, #588]	; (800483c <HAL_UART_MspInit+0x29c>)
 80045f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	61fb      	str	r3, [r7, #28]
 80045f8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80045fa:	23c0      	movs	r3, #192	; 0xc0
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045fe:	2302      	movs	r3, #2
 8004600:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004602:	2300      	movs	r3, #0
 8004604:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004606:	2303      	movs	r3, #3
 8004608:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800460a:	2307      	movs	r3, #7
 800460c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800460e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004612:	4619      	mov	r1, r3
 8004614:	488a      	ldr	r0, [pc, #552]	; (8004840 <HAL_UART_MspInit+0x2a0>)
 8004616:	f001 fd97 	bl	8006148 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800461a:	4b8a      	ldr	r3, [pc, #552]	; (8004844 <HAL_UART_MspInit+0x2a4>)
 800461c:	4a8a      	ldr	r2, [pc, #552]	; (8004848 <HAL_UART_MspInit+0x2a8>)
 800461e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004620:	4b88      	ldr	r3, [pc, #544]	; (8004844 <HAL_UART_MspInit+0x2a4>)
 8004622:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004626:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004628:	4b86      	ldr	r3, [pc, #536]	; (8004844 <HAL_UART_MspInit+0x2a4>)
 800462a:	2200      	movs	r2, #0
 800462c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800462e:	4b85      	ldr	r3, [pc, #532]	; (8004844 <HAL_UART_MspInit+0x2a4>)
 8004630:	2200      	movs	r2, #0
 8004632:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004634:	4b83      	ldr	r3, [pc, #524]	; (8004844 <HAL_UART_MspInit+0x2a4>)
 8004636:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800463a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800463c:	4b81      	ldr	r3, [pc, #516]	; (8004844 <HAL_UART_MspInit+0x2a4>)
 800463e:	2200      	movs	r2, #0
 8004640:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004642:	4b80      	ldr	r3, [pc, #512]	; (8004844 <HAL_UART_MspInit+0x2a4>)
 8004644:	2200      	movs	r2, #0
 8004646:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004648:	4b7e      	ldr	r3, [pc, #504]	; (8004844 <HAL_UART_MspInit+0x2a4>)
 800464a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800464e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004650:	4b7c      	ldr	r3, [pc, #496]	; (8004844 <HAL_UART_MspInit+0x2a4>)
 8004652:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004656:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004658:	4b7a      	ldr	r3, [pc, #488]	; (8004844 <HAL_UART_MspInit+0x2a4>)
 800465a:	2200      	movs	r2, #0
 800465c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800465e:	4879      	ldr	r0, [pc, #484]	; (8004844 <HAL_UART_MspInit+0x2a4>)
 8004660:	f001 f9fe 	bl	8005a60 <HAL_DMA_Init>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800466a:	f7fd fab7 	bl	8001bdc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a74      	ldr	r2, [pc, #464]	; (8004844 <HAL_UART_MspInit+0x2a4>)
 8004672:	635a      	str	r2, [r3, #52]	; 0x34
 8004674:	4a73      	ldr	r2, [pc, #460]	; (8004844 <HAL_UART_MspInit+0x2a4>)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800467a:	2200      	movs	r2, #0
 800467c:	2100      	movs	r1, #0
 800467e:	2025      	movs	r0, #37	; 0x25
 8004680:	f001 f9b7 	bl	80059f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004684:	2025      	movs	r0, #37	; 0x25
 8004686:	f001 f9d0 	bl	8005a2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800468a:	e0d0      	b.n	800482e <HAL_UART_MspInit+0x28e>
  else if(huart->Instance==USART2)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a6e      	ldr	r2, [pc, #440]	; (800484c <HAL_UART_MspInit+0x2ac>)
 8004692:	4293      	cmp	r3, r2
 8004694:	f040 8091 	bne.w	80047ba <HAL_UART_MspInit+0x21a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004698:	2300      	movs	r3, #0
 800469a:	61bb      	str	r3, [r7, #24]
 800469c:	4b67      	ldr	r3, [pc, #412]	; (800483c <HAL_UART_MspInit+0x29c>)
 800469e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a0:	4a66      	ldr	r2, [pc, #408]	; (800483c <HAL_UART_MspInit+0x29c>)
 80046a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046a6:	6413      	str	r3, [r2, #64]	; 0x40
 80046a8:	4b64      	ldr	r3, [pc, #400]	; (800483c <HAL_UART_MspInit+0x29c>)
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b0:	61bb      	str	r3, [r7, #24]
 80046b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80046b4:	2300      	movs	r3, #0
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	4b60      	ldr	r3, [pc, #384]	; (800483c <HAL_UART_MspInit+0x29c>)
 80046ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046bc:	4a5f      	ldr	r2, [pc, #380]	; (800483c <HAL_UART_MspInit+0x29c>)
 80046be:	f043 0308 	orr.w	r3, r3, #8
 80046c2:	6313      	str	r3, [r2, #48]	; 0x30
 80046c4:	4b5d      	ldr	r3, [pc, #372]	; (800483c <HAL_UART_MspInit+0x29c>)
 80046c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c8:	f003 0308 	and.w	r3, r3, #8
 80046cc:	617b      	str	r3, [r7, #20]
 80046ce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 80046d0:	2360      	movs	r3, #96	; 0x60
 80046d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046d4:	2302      	movs	r3, #2
 80046d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d8:	2300      	movs	r3, #0
 80046da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046dc:	2303      	movs	r3, #3
 80046de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80046e0:	2307      	movs	r3, #7
 80046e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80046e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046e8:	4619      	mov	r1, r3
 80046ea:	4859      	ldr	r0, [pc, #356]	; (8004850 <HAL_UART_MspInit+0x2b0>)
 80046ec:	f001 fd2c 	bl	8006148 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80046f0:	4b58      	ldr	r3, [pc, #352]	; (8004854 <HAL_UART_MspInit+0x2b4>)
 80046f2:	4a59      	ldr	r2, [pc, #356]	; (8004858 <HAL_UART_MspInit+0x2b8>)
 80046f4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80046f6:	4b57      	ldr	r3, [pc, #348]	; (8004854 <HAL_UART_MspInit+0x2b4>)
 80046f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80046fc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80046fe:	4b55      	ldr	r3, [pc, #340]	; (8004854 <HAL_UART_MspInit+0x2b4>)
 8004700:	2200      	movs	r2, #0
 8004702:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004704:	4b53      	ldr	r3, [pc, #332]	; (8004854 <HAL_UART_MspInit+0x2b4>)
 8004706:	2200      	movs	r2, #0
 8004708:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800470a:	4b52      	ldr	r3, [pc, #328]	; (8004854 <HAL_UART_MspInit+0x2b4>)
 800470c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004710:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004712:	4b50      	ldr	r3, [pc, #320]	; (8004854 <HAL_UART_MspInit+0x2b4>)
 8004714:	2200      	movs	r2, #0
 8004716:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004718:	4b4e      	ldr	r3, [pc, #312]	; (8004854 <HAL_UART_MspInit+0x2b4>)
 800471a:	2200      	movs	r2, #0
 800471c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800471e:	4b4d      	ldr	r3, [pc, #308]	; (8004854 <HAL_UART_MspInit+0x2b4>)
 8004720:	2200      	movs	r2, #0
 8004722:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004724:	4b4b      	ldr	r3, [pc, #300]	; (8004854 <HAL_UART_MspInit+0x2b4>)
 8004726:	2200      	movs	r2, #0
 8004728:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800472a:	4b4a      	ldr	r3, [pc, #296]	; (8004854 <HAL_UART_MspInit+0x2b4>)
 800472c:	2200      	movs	r2, #0
 800472e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004730:	4848      	ldr	r0, [pc, #288]	; (8004854 <HAL_UART_MspInit+0x2b4>)
 8004732:	f001 f995 	bl	8005a60 <HAL_DMA_Init>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 800473c:	f7fd fa4e 	bl	8001bdc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a44      	ldr	r2, [pc, #272]	; (8004854 <HAL_UART_MspInit+0x2b4>)
 8004744:	635a      	str	r2, [r3, #52]	; 0x34
 8004746:	4a43      	ldr	r2, [pc, #268]	; (8004854 <HAL_UART_MspInit+0x2b4>)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800474c:	4b43      	ldr	r3, [pc, #268]	; (800485c <HAL_UART_MspInit+0x2bc>)
 800474e:	4a44      	ldr	r2, [pc, #272]	; (8004860 <HAL_UART_MspInit+0x2c0>)
 8004750:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004752:	4b42      	ldr	r3, [pc, #264]	; (800485c <HAL_UART_MspInit+0x2bc>)
 8004754:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004758:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800475a:	4b40      	ldr	r3, [pc, #256]	; (800485c <HAL_UART_MspInit+0x2bc>)
 800475c:	2240      	movs	r2, #64	; 0x40
 800475e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004760:	4b3e      	ldr	r3, [pc, #248]	; (800485c <HAL_UART_MspInit+0x2bc>)
 8004762:	2200      	movs	r2, #0
 8004764:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004766:	4b3d      	ldr	r3, [pc, #244]	; (800485c <HAL_UART_MspInit+0x2bc>)
 8004768:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800476c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800476e:	4b3b      	ldr	r3, [pc, #236]	; (800485c <HAL_UART_MspInit+0x2bc>)
 8004770:	2200      	movs	r2, #0
 8004772:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004774:	4b39      	ldr	r3, [pc, #228]	; (800485c <HAL_UART_MspInit+0x2bc>)
 8004776:	2200      	movs	r2, #0
 8004778:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800477a:	4b38      	ldr	r3, [pc, #224]	; (800485c <HAL_UART_MspInit+0x2bc>)
 800477c:	2200      	movs	r2, #0
 800477e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004780:	4b36      	ldr	r3, [pc, #216]	; (800485c <HAL_UART_MspInit+0x2bc>)
 8004782:	2200      	movs	r2, #0
 8004784:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004786:	4b35      	ldr	r3, [pc, #212]	; (800485c <HAL_UART_MspInit+0x2bc>)
 8004788:	2200      	movs	r2, #0
 800478a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800478c:	4833      	ldr	r0, [pc, #204]	; (800485c <HAL_UART_MspInit+0x2bc>)
 800478e:	f001 f967 	bl	8005a60 <HAL_DMA_Init>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8004798:	f7fd fa20 	bl	8001bdc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a2f      	ldr	r2, [pc, #188]	; (800485c <HAL_UART_MspInit+0x2bc>)
 80047a0:	631a      	str	r2, [r3, #48]	; 0x30
 80047a2:	4a2e      	ldr	r2, [pc, #184]	; (800485c <HAL_UART_MspInit+0x2bc>)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80047a8:	2200      	movs	r2, #0
 80047aa:	2100      	movs	r1, #0
 80047ac:	2026      	movs	r0, #38	; 0x26
 80047ae:	f001 f920 	bl	80059f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80047b2:	2026      	movs	r0, #38	; 0x26
 80047b4:	f001 f939 	bl	8005a2a <HAL_NVIC_EnableIRQ>
}
 80047b8:	e039      	b.n	800482e <HAL_UART_MspInit+0x28e>
  else if(huart->Instance==USART6)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a29      	ldr	r2, [pc, #164]	; (8004864 <HAL_UART_MspInit+0x2c4>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d134      	bne.n	800482e <HAL_UART_MspInit+0x28e>
    __HAL_RCC_USART6_CLK_ENABLE();
 80047c4:	2300      	movs	r3, #0
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	4b1c      	ldr	r3, [pc, #112]	; (800483c <HAL_UART_MspInit+0x29c>)
 80047ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047cc:	4a1b      	ldr	r2, [pc, #108]	; (800483c <HAL_UART_MspInit+0x29c>)
 80047ce:	f043 0320 	orr.w	r3, r3, #32
 80047d2:	6453      	str	r3, [r2, #68]	; 0x44
 80047d4:	4b19      	ldr	r3, [pc, #100]	; (800483c <HAL_UART_MspInit+0x29c>)
 80047d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d8:	f003 0320 	and.w	r3, r3, #32
 80047dc:	613b      	str	r3, [r7, #16]
 80047de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80047e0:	2300      	movs	r3, #0
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	4b15      	ldr	r3, [pc, #84]	; (800483c <HAL_UART_MspInit+0x29c>)
 80047e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e8:	4a14      	ldr	r2, [pc, #80]	; (800483c <HAL_UART_MspInit+0x29c>)
 80047ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047ee:	6313      	str	r3, [r2, #48]	; 0x30
 80047f0:	4b12      	ldr	r3, [pc, #72]	; (800483c <HAL_UART_MspInit+0x29c>)
 80047f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f8:	60fb      	str	r3, [r7, #12]
 80047fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80047fc:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004802:	2302      	movs	r3, #2
 8004804:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004806:	2300      	movs	r3, #0
 8004808:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800480a:	2303      	movs	r3, #3
 800480c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800480e:	2308      	movs	r3, #8
 8004810:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004816:	4619      	mov	r1, r3
 8004818:	4813      	ldr	r0, [pc, #76]	; (8004868 <HAL_UART_MspInit+0x2c8>)
 800481a:	f001 fc95 	bl	8006148 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800481e:	2200      	movs	r2, #0
 8004820:	2100      	movs	r1, #0
 8004822:	2047      	movs	r0, #71	; 0x47
 8004824:	f001 f8e5 	bl	80059f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004828:	2047      	movs	r0, #71	; 0x47
 800482a:	f001 f8fe 	bl	8005a2a <HAL_NVIC_EnableIRQ>
}
 800482e:	bf00      	nop
 8004830:	3738      	adds	r7, #56	; 0x38
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40011000 	.word	0x40011000
 800483c:	40023800 	.word	0x40023800
 8004840:	40020400 	.word	0x40020400
 8004844:	200002a0 	.word	0x200002a0
 8004848:	40026440 	.word	0x40026440
 800484c:	40004400 	.word	0x40004400
 8004850:	40020c00 	.word	0x40020c00
 8004854:	20000138 	.word	0x20000138
 8004858:	40026088 	.word	0x40026088
 800485c:	20000300 	.word	0x20000300
 8004860:	400260a0 	.word	0x400260a0
 8004864:	40011400 	.word	0x40011400
 8004868:	40021800 	.word	0x40021800

0800486c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004870:	bf00      	nop
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800487a:	b480      	push	{r7}
 800487c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800487e:	e7fe      	b.n	800487e <HardFault_Handler+0x4>

08004880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004884:	e7fe      	b.n	8004884 <MemManage_Handler+0x4>

08004886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004886:	b480      	push	{r7}
 8004888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800488a:	e7fe      	b.n	800488a <BusFault_Handler+0x4>

0800488c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004890:	e7fe      	b.n	8004890 <UsageFault_Handler+0x4>

08004892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004892:	b480      	push	{r7}
 8004894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004896:	bf00      	nop
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048a4:	bf00      	nop
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048ae:	b480      	push	{r7}
 80048b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048b2:	bf00      	nop
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048c0:	f000 f8fa 	bl	8004ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048c4:	bf00      	nop
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80048cc:	4802      	ldr	r0, [pc, #8]	; (80048d8 <DMA1_Stream5_IRQHandler+0x10>)
 80048ce:	f001 f9d3 	bl	8005c78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80048d2:	bf00      	nop
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	20000138 	.word	0x20000138

080048dc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80048e0:	4802      	ldr	r0, [pc, #8]	; (80048ec <DMA1_Stream6_IRQHandler+0x10>)
 80048e2:	f001 f9c9 	bl	8005c78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80048e6:	bf00      	nop
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	20000300 	.word	0x20000300

080048f0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80048f4:	4802      	ldr	r0, [pc, #8]	; (8004900 <CAN1_TX_IRQHandler+0x10>)
 80048f6:	f000 fd78 	bl	80053ea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80048fa:	bf00      	nop
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	20000530 	.word	0x20000530

08004904 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004908:	4802      	ldr	r0, [pc, #8]	; (8004914 <CAN1_RX0_IRQHandler+0x10>)
 800490a:	f000 fd6e 	bl	80053ea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800490e:	bf00      	nop
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	20000530 	.word	0x20000530

08004918 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  uart_receive_handler(&huart1);
 800491c:	4803      	ldr	r0, [pc, #12]	; (800492c <USART1_IRQHandler+0x14>)
 800491e:	f7ff fb81 	bl	8004024 <uart_receive_handler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004922:	4802      	ldr	r0, [pc, #8]	; (800492c <USART1_IRQHandler+0x14>)
 8004924:	f003 f94c 	bl	8007bc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004928:	bf00      	nop
 800492a:	bd80      	pop	{r7, pc}
 800492c:	20000360 	.word	0x20000360

08004930 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004934:	4802      	ldr	r0, [pc, #8]	; (8004940 <USART2_IRQHandler+0x10>)
 8004936:	f003 f943 	bl	8007bc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800493a:	bf00      	nop
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	200004f0 	.word	0x200004f0

08004944 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004948:	4802      	ldr	r0, [pc, #8]	; (8004954 <DMA2_Stream2_IRQHandler+0x10>)
 800494a:	f001 f995 	bl	8005c78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800494e:	bf00      	nop
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	200002a0 	.word	0x200002a0

08004958 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800495c:	4802      	ldr	r0, [pc, #8]	; (8004968 <CAN2_TX_IRQHandler+0x10>)
 800495e:	f000 fd44 	bl	80053ea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8004962:	bf00      	nop
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	20000278 	.word	0x20000278

0800496c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004970:	4802      	ldr	r0, [pc, #8]	; (800497c <CAN2_RX0_IRQHandler+0x10>)
 8004972:	f000 fd3a 	bl	80053ea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8004976:	bf00      	nop
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	20000278 	.word	0x20000278

08004980 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004984:	4802      	ldr	r0, [pc, #8]	; (8004990 <USART6_IRQHandler+0x10>)
 8004986:	f003 f91b 	bl	8007bc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800498a:	bf00      	nop
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	200003a8 	.word	0x200003a8

08004994 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004998:	4b08      	ldr	r3, [pc, #32]	; (80049bc <SystemInit+0x28>)
 800499a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499e:	4a07      	ldr	r2, [pc, #28]	; (80049bc <SystemInit+0x28>)
 80049a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80049a8:	4b04      	ldr	r3, [pc, #16]	; (80049bc <SystemInit+0x28>)
 80049aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80049ae:	609a      	str	r2, [r3, #8]
#endif
}
 80049b0:	bf00      	nop
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	e000ed00 	.word	0xe000ed00

080049c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80049c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80049c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80049c6:	e003      	b.n	80049d0 <LoopCopyDataInit>

080049c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80049c8:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80049ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80049cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80049ce:	3104      	adds	r1, #4

080049d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80049d0:	480b      	ldr	r0, [pc, #44]	; (8004a00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80049d2:	4b0c      	ldr	r3, [pc, #48]	; (8004a04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80049d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80049d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80049d8:	d3f6      	bcc.n	80049c8 <CopyDataInit>
  ldr  r2, =_sbss
 80049da:	4a0b      	ldr	r2, [pc, #44]	; (8004a08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80049dc:	e002      	b.n	80049e4 <LoopFillZerobss>

080049de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80049de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80049e0:	f842 3b04 	str.w	r3, [r2], #4

080049e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80049e4:	4b09      	ldr	r3, [pc, #36]	; (8004a0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80049e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80049e8:	d3f9      	bcc.n	80049de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80049ea:	f7ff ffd3 	bl	8004994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80049ee:	f003 fea9 	bl	8008744 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049f2:	f7fc fc0f 	bl	8001214 <main>
  bx  lr    
 80049f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80049f8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80049fc:	080095c8 	.word	0x080095c8
  ldr  r0, =_sdata
 8004a00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004a04:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8004a08:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8004a0c:	20000a28 	.word	0x20000a28

08004a10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a10:	e7fe      	b.n	8004a10 <ADC_IRQHandler>
	...

08004a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a18:	4b0e      	ldr	r3, [pc, #56]	; (8004a54 <HAL_Init+0x40>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a0d      	ldr	r2, [pc, #52]	; (8004a54 <HAL_Init+0x40>)
 8004a1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a24:	4b0b      	ldr	r3, [pc, #44]	; (8004a54 <HAL_Init+0x40>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a0a      	ldr	r2, [pc, #40]	; (8004a54 <HAL_Init+0x40>)
 8004a2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a30:	4b08      	ldr	r3, [pc, #32]	; (8004a54 <HAL_Init+0x40>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a07      	ldr	r2, [pc, #28]	; (8004a54 <HAL_Init+0x40>)
 8004a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a3c:	2003      	movs	r0, #3
 8004a3e:	f000 ffcd 	bl	80059dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a42:	2000      	movs	r0, #0
 8004a44:	f000 f808 	bl	8004a58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a48:	f7ff fb2a 	bl	80040a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	40023c00 	.word	0x40023c00

08004a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a60:	4b12      	ldr	r3, [pc, #72]	; (8004aac <HAL_InitTick+0x54>)
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	4b12      	ldr	r3, [pc, #72]	; (8004ab0 <HAL_InitTick+0x58>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	4619      	mov	r1, r3
 8004a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 ffe5 	bl	8005a46 <HAL_SYSTICK_Config>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e00e      	b.n	8004aa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b0f      	cmp	r3, #15
 8004a8a:	d80a      	bhi.n	8004aa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	f04f 30ff 	mov.w	r0, #4294967295
 8004a94:	f000 ffad 	bl	80059f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a98:	4a06      	ldr	r2, [pc, #24]	; (8004ab4 <HAL_InitTick+0x5c>)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	e000      	b.n	8004aa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3708      	adds	r7, #8
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	20000014 	.word	0x20000014
 8004ab0:	2000001c 	.word	0x2000001c
 8004ab4:	20000018 	.word	0x20000018

08004ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004abc:	4b06      	ldr	r3, [pc, #24]	; (8004ad8 <HAL_IncTick+0x20>)
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	4b06      	ldr	r3, [pc, #24]	; (8004adc <HAL_IncTick+0x24>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	4a04      	ldr	r2, [pc, #16]	; (8004adc <HAL_IncTick+0x24>)
 8004aca:	6013      	str	r3, [r2, #0]
}
 8004acc:	bf00      	nop
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	2000001c 	.word	0x2000001c
 8004adc:	20000a24 	.word	0x20000a24

08004ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8004ae4:	4b03      	ldr	r3, [pc, #12]	; (8004af4 <HAL_GetTick+0x14>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	20000a24 	.word	0x20000a24

08004af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b00:	f7ff ffee 	bl	8004ae0 <HAL_GetTick>
 8004b04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b10:	d005      	beq.n	8004b1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b12:	4b09      	ldr	r3, [pc, #36]	; (8004b38 <HAL_Delay+0x40>)
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	461a      	mov	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b1e:	bf00      	nop
 8004b20:	f7ff ffde 	bl	8004ae0 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d8f7      	bhi.n	8004b20 <HAL_Delay+0x28>
  {
  }
}
 8004b30:	bf00      	nop
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	2000001c 	.word	0x2000001c

08004b3c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e0ed      	b.n	8004d2a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d102      	bne.n	8004b60 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7ff fac8 	bl	80040f0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 0202 	bic.w	r2, r2, #2
 8004b6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b70:	f7ff ffb6 	bl	8004ae0 <HAL_GetTick>
 8004b74:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004b76:	e012      	b.n	8004b9e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b78:	f7ff ffb2 	bl	8004ae0 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b0a      	cmp	r3, #10
 8004b84:	d90b      	bls.n	8004b9e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2205      	movs	r2, #5
 8004b96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e0c5      	b.n	8004d2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1e5      	bne.n	8004b78 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f042 0201 	orr.w	r2, r2, #1
 8004bba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bbc:	f7ff ff90 	bl	8004ae0 <HAL_GetTick>
 8004bc0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004bc2:	e012      	b.n	8004bea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004bc4:	f7ff ff8c 	bl	8004ae0 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b0a      	cmp	r3, #10
 8004bd0:	d90b      	bls.n	8004bea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2205      	movs	r2, #5
 8004be2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e09f      	b.n	8004d2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0e5      	beq.n	8004bc4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	7e1b      	ldrb	r3, [r3, #24]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d108      	bne.n	8004c12 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	e007      	b.n	8004c22 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	7e5b      	ldrb	r3, [r3, #25]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d108      	bne.n	8004c3c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	e007      	b.n	8004c4c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	7e9b      	ldrb	r3, [r3, #26]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d108      	bne.n	8004c66 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0220 	orr.w	r2, r2, #32
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	e007      	b.n	8004c76 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0220 	bic.w	r2, r2, #32
 8004c74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	7edb      	ldrb	r3, [r3, #27]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d108      	bne.n	8004c90 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 0210 	bic.w	r2, r2, #16
 8004c8c:	601a      	str	r2, [r3, #0]
 8004c8e:	e007      	b.n	8004ca0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0210 	orr.w	r2, r2, #16
 8004c9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	7f1b      	ldrb	r3, [r3, #28]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d108      	bne.n	8004cba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0208 	orr.w	r2, r2, #8
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	e007      	b.n	8004cca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0208 	bic.w	r2, r2, #8
 8004cc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	7f5b      	ldrb	r3, [r3, #29]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d108      	bne.n	8004ce4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f042 0204 	orr.w	r2, r2, #4
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	e007      	b.n	8004cf4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 0204 	bic.w	r2, r2, #4
 8004cf2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	431a      	orrs	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	ea42 0103 	orr.w	r1, r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	1e5a      	subs	r2, r3, #1
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
	...

08004d34 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d4a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004d4c:	7cfb      	ldrb	r3, [r7, #19]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d003      	beq.n	8004d5a <HAL_CAN_ConfigFilter+0x26>
 8004d52:	7cfb      	ldrb	r3, [r7, #19]
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	f040 80be 	bne.w	8004ed6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004d5a:	4b65      	ldr	r3, [pc, #404]	; (8004ef0 <HAL_CAN_ConfigFilter+0x1bc>)
 8004d5c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d64:	f043 0201 	orr.w	r2, r3, #1
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d74:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	021b      	lsls	r3, r3, #8
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	f003 031f 	and.w	r3, r3, #31
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	43db      	mvns	r3, r3
 8004dac:	401a      	ands	r2, r3
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	69db      	ldr	r3, [r3, #28]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d123      	bne.n	8004e04 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	43db      	mvns	r3, r3
 8004dc6:	401a      	ands	r2, r3
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004dde:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	3248      	adds	r2, #72	; 0x48
 8004de4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004df8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004dfa:	6979      	ldr	r1, [r7, #20]
 8004dfc:	3348      	adds	r3, #72	; 0x48
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	440b      	add	r3, r1
 8004e02:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d122      	bne.n	8004e52 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	431a      	orrs	r2, r3
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004e2c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	3248      	adds	r2, #72	; 0x48
 8004e32:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e46:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e48:	6979      	ldr	r1, [r7, #20]
 8004e4a:	3348      	adds	r3, #72	; 0x48
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	440b      	add	r3, r1
 8004e50:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d109      	bne.n	8004e6e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	43db      	mvns	r3, r3
 8004e64:	401a      	ands	r2, r3
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004e6c:	e007      	b.n	8004e7e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	431a      	orrs	r2, r3
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d109      	bne.n	8004e9a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	43db      	mvns	r3, r3
 8004e90:	401a      	ands	r2, r3
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004e98:	e007      	b.n	8004eaa <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d107      	bne.n	8004ec2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ec8:	f023 0201 	bic.w	r2, r3, #1
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	e006      	b.n	8004ee4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
  }
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	371c      	adds	r7, #28
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr
 8004ef0:	40006400 	.word	0x40006400

08004ef4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d12e      	bne.n	8004f66 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0201 	bic.w	r2, r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f20:	f7ff fdde 	bl	8004ae0 <HAL_GetTick>
 8004f24:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004f26:	e012      	b.n	8004f4e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f28:	f7ff fdda 	bl	8004ae0 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b0a      	cmp	r3, #10
 8004f34:	d90b      	bls.n	8004f4e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2205      	movs	r2, #5
 8004f46:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e012      	b.n	8004f74 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1e5      	bne.n	8004f28 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004f62:	2300      	movs	r3, #0
 8004f64:	e006      	b.n	8004f74 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
  }
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b089      	sub	sp, #36	; 0x24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f90:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004f9a:	7ffb      	ldrb	r3, [r7, #31]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d003      	beq.n	8004fa8 <HAL_CAN_AddTxMessage+0x2c>
 8004fa0:	7ffb      	ldrb	r3, [r7, #31]
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	f040 80b8 	bne.w	8005118 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10a      	bne.n	8004fc8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d105      	bne.n	8004fc8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 80a0 	beq.w	8005108 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	0e1b      	lsrs	r3, r3, #24
 8004fcc:	f003 0303 	and.w	r3, r3, #3
 8004fd0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d907      	bls.n	8004fe8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e09e      	b.n	8005126 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004fe8:	2201      	movs	r2, #1
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	409a      	lsls	r2, r3
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10d      	bne.n	8005016 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005004:	68f9      	ldr	r1, [r7, #12]
 8005006:	6809      	ldr	r1, [r1, #0]
 8005008:	431a      	orrs	r2, r3
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	3318      	adds	r3, #24
 800500e:	011b      	lsls	r3, r3, #4
 8005010:	440b      	add	r3, r1
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	e00f      	b.n	8005036 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005020:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005026:	68f9      	ldr	r1, [r7, #12]
 8005028:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800502a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	3318      	adds	r3, #24
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	440b      	add	r3, r1
 8005034:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6819      	ldr	r1, [r3, #0]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	691a      	ldr	r2, [r3, #16]
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	3318      	adds	r3, #24
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	440b      	add	r3, r1
 8005046:	3304      	adds	r3, #4
 8005048:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	7d1b      	ldrb	r3, [r3, #20]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d111      	bne.n	8005076 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	3318      	adds	r3, #24
 800505a:	011b      	lsls	r3, r3, #4
 800505c:	4413      	add	r3, r2
 800505e:	3304      	adds	r3, #4
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	6811      	ldr	r1, [r2, #0]
 8005066:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	3318      	adds	r3, #24
 800506e:	011b      	lsls	r3, r3, #4
 8005070:	440b      	add	r3, r1
 8005072:	3304      	adds	r3, #4
 8005074:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	3307      	adds	r3, #7
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	061a      	lsls	r2, r3, #24
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	3306      	adds	r3, #6
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	041b      	lsls	r3, r3, #16
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3305      	adds	r3, #5
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	021b      	lsls	r3, r3, #8
 8005090:	4313      	orrs	r3, r2
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	3204      	adds	r2, #4
 8005096:	7812      	ldrb	r2, [r2, #0]
 8005098:	4610      	mov	r0, r2
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	6811      	ldr	r1, [r2, #0]
 800509e:	ea43 0200 	orr.w	r2, r3, r0
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	011b      	lsls	r3, r3, #4
 80050a6:	440b      	add	r3, r1
 80050a8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80050ac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	3303      	adds	r3, #3
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	061a      	lsls	r2, r3, #24
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	3302      	adds	r3, #2
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	041b      	lsls	r3, r3, #16
 80050be:	431a      	orrs	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	3301      	adds	r3, #1
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	021b      	lsls	r3, r3, #8
 80050c8:	4313      	orrs	r3, r2
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	7812      	ldrb	r2, [r2, #0]
 80050ce:	4610      	mov	r0, r2
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	6811      	ldr	r1, [r2, #0]
 80050d4:	ea43 0200 	orr.w	r2, r3, r0
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	011b      	lsls	r3, r3, #4
 80050dc:	440b      	add	r3, r1
 80050de:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80050e2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	3318      	adds	r3, #24
 80050ec:	011b      	lsls	r3, r3, #4
 80050ee:	4413      	add	r3, r2
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	6811      	ldr	r1, [r2, #0]
 80050f6:	f043 0201 	orr.w	r2, r3, #1
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	3318      	adds	r3, #24
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	440b      	add	r3, r1
 8005102:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005104:	2300      	movs	r3, #0
 8005106:	e00e      	b.n	8005126 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e006      	b.n	8005126 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
  }
}
 8005126:	4618      	mov	r0, r3
 8005128:	3724      	adds	r7, #36	; 0x24
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8005132:	b480      	push	{r7}
 8005134:	b085      	sub	sp, #20
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005146:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8005148:	7afb      	ldrb	r3, [r7, #11]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d002      	beq.n	8005154 <HAL_CAN_IsTxMessagePending+0x22>
 800514e:	7afb      	ldrb	r3, [r7, #11]
 8005150:	2b02      	cmp	r3, #2
 8005152:	d10b      	bne.n	800516c <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689a      	ldr	r2, [r3, #8]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	069b      	lsls	r3, r3, #26
 800515e:	401a      	ands	r2, r3
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	069b      	lsls	r3, r3, #26
 8005164:	429a      	cmp	r2, r3
 8005166:	d001      	beq.n	800516c <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8005168:	2301      	movs	r3, #1
 800516a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 800516c:	68fb      	ldr	r3, [r7, #12]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800517a:	b480      	push	{r7}
 800517c:	b087      	sub	sp, #28
 800517e:	af00      	add	r7, sp, #0
 8005180:	60f8      	str	r0, [r7, #12]
 8005182:	60b9      	str	r1, [r7, #8]
 8005184:	607a      	str	r2, [r7, #4]
 8005186:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800518e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005190:	7dfb      	ldrb	r3, [r7, #23]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d003      	beq.n	800519e <HAL_CAN_GetRxMessage+0x24>
 8005196:	7dfb      	ldrb	r3, [r7, #23]
 8005198:	2b02      	cmp	r3, #2
 800519a:	f040 80f3 	bne.w	8005384 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10e      	bne.n	80051c2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d116      	bne.n	80051e0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e0e7      	b.n	8005392 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	f003 0303 	and.w	r3, r3, #3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d107      	bne.n	80051e0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e0d8      	b.n	8005392 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	331b      	adds	r3, #27
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	4413      	add	r3, r2
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0204 	and.w	r2, r3, #4
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10c      	bne.n	8005218 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	331b      	adds	r3, #27
 8005206:	011b      	lsls	r3, r3, #4
 8005208:	4413      	add	r3, r2
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	0d5b      	lsrs	r3, r3, #21
 800520e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	e00b      	b.n	8005230 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	331b      	adds	r3, #27
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	4413      	add	r3, r2
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	08db      	lsrs	r3, r3, #3
 8005228:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	331b      	adds	r3, #27
 8005238:	011b      	lsls	r3, r3, #4
 800523a:	4413      	add	r3, r2
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0202 	and.w	r2, r3, #2
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	331b      	adds	r3, #27
 800524e:	011b      	lsls	r3, r3, #4
 8005250:	4413      	add	r3, r2
 8005252:	3304      	adds	r3, #4
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 020f 	and.w	r2, r3, #15
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	331b      	adds	r3, #27
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	4413      	add	r3, r2
 800526a:	3304      	adds	r3, #4
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	0a1b      	lsrs	r3, r3, #8
 8005270:	b2da      	uxtb	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	331b      	adds	r3, #27
 800527e:	011b      	lsls	r3, r3, #4
 8005280:	4413      	add	r3, r2
 8005282:	3304      	adds	r3, #4
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	0c1b      	lsrs	r3, r3, #16
 8005288:	b29a      	uxth	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	011b      	lsls	r3, r3, #4
 8005296:	4413      	add	r3, r2
 8005298:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	011b      	lsls	r3, r3, #4
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	0a1a      	lsrs	r2, r3, #8
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	3301      	adds	r3, #1
 80052ba:	b2d2      	uxtb	r2, r2
 80052bc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	011b      	lsls	r3, r3, #4
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	0c1a      	lsrs	r2, r3, #16
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	3302      	adds	r3, #2
 80052d4:	b2d2      	uxtb	r2, r2
 80052d6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	0e1a      	lsrs	r2, r3, #24
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	3303      	adds	r3, #3
 80052ee:	b2d2      	uxtb	r2, r2
 80052f0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	3304      	adds	r3, #4
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	011b      	lsls	r3, r3, #4
 8005312:	4413      	add	r3, r2
 8005314:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	0a1a      	lsrs	r2, r3, #8
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	3305      	adds	r3, #5
 8005320:	b2d2      	uxtb	r2, r2
 8005322:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	011b      	lsls	r3, r3, #4
 800532c:	4413      	add	r3, r2
 800532e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	0c1a      	lsrs	r2, r3, #16
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	3306      	adds	r3, #6
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	4413      	add	r3, r2
 8005348:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	0e1a      	lsrs	r2, r3, #24
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	3307      	adds	r3, #7
 8005354:	b2d2      	uxtb	r2, r2
 8005356:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d108      	bne.n	8005370 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68da      	ldr	r2, [r3, #12]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f042 0220 	orr.w	r2, r2, #32
 800536c:	60da      	str	r2, [r3, #12]
 800536e:	e007      	b.n	8005380 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691a      	ldr	r2, [r3, #16]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0220 	orr.w	r2, r2, #32
 800537e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005380:	2300      	movs	r3, #0
 8005382:	e006      	b.n	8005392 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
  }
}
 8005392:	4618      	mov	r0, r3
 8005394:	371c      	adds	r7, #28
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800539e:	b480      	push	{r7}
 80053a0:	b085      	sub	sp, #20
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053ae:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80053b0:	7bfb      	ldrb	r3, [r7, #15]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d002      	beq.n	80053bc <HAL_CAN_ActivateNotification+0x1e>
 80053b6:	7bfb      	ldrb	r3, [r7, #15]
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d109      	bne.n	80053d0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6959      	ldr	r1, [r3, #20]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	430a      	orrs	r2, r1
 80053ca:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	e006      	b.n	80053de <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
  }
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b08a      	sub	sp, #40	; 0x28
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80053f2:	2300      	movs	r3, #0
 80053f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d07c      	beq.n	800552a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d023      	beq.n	8005482 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2201      	movs	r2, #1
 8005440:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	2b00      	cmp	r3, #0
 800544a:	d003      	beq.n	8005454 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f97d 	bl	800574c <HAL_CAN_TxMailbox0CompleteCallback>
 8005452:	e016      	b.n	8005482 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	f003 0304 	and.w	r3, r3, #4
 800545a:	2b00      	cmp	r3, #0
 800545c:	d004      	beq.n	8005468 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005464:	627b      	str	r3, [r7, #36]	; 0x24
 8005466:	e00c      	b.n	8005482 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	f003 0308 	and.w	r3, r3, #8
 800546e:	2b00      	cmp	r3, #0
 8005470:	d004      	beq.n	800547c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
 800547a:	e002      	b.n	8005482 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f983 	bl	8005788 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005488:	2b00      	cmp	r3, #0
 800548a:	d024      	beq.n	80054d6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005494:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f95d 	bl	8005760 <HAL_CAN_TxMailbox1CompleteCallback>
 80054a6:	e016      	b.n	80054d6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d004      	beq.n	80054bc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80054b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80054b8:	627b      	str	r3, [r7, #36]	; 0x24
 80054ba:	e00c      	b.n	80054d6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d004      	beq.n	80054d0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054cc:	627b      	str	r3, [r7, #36]	; 0x24
 80054ce:	e002      	b.n	80054d6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f963 	bl	800579c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d024      	beq.n	800552a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80054e8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f93d 	bl	8005774 <HAL_CAN_TxMailbox2CompleteCallback>
 80054fa:	e016      	b.n	800552a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d004      	beq.n	8005510 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800550c:	627b      	str	r3, [r7, #36]	; 0x24
 800550e:	e00c      	b.n	800552a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d004      	beq.n	8005524 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005520:	627b      	str	r3, [r7, #36]	; 0x24
 8005522:	e002      	b.n	800552a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f943 	bl	80057b0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	f003 0308 	and.w	r3, r3, #8
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00c      	beq.n	800554e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f003 0310 	and.w	r3, r3, #16
 800553a:	2b00      	cmp	r3, #0
 800553c:	d007      	beq.n	800554e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005544:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2210      	movs	r2, #16
 800554c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00b      	beq.n	8005570 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f003 0308 	and.w	r3, r3, #8
 800555e:	2b00      	cmp	r3, #0
 8005560:	d006      	beq.n	8005570 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2208      	movs	r2, #8
 8005568:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f92a 	bl	80057c4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d009      	beq.n	800558e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f003 0303 	and.w	r3, r3, #3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d002      	beq.n	800558e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7fc fd5d 	bl	8002048 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00c      	beq.n	80055b2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	f003 0310 	and.w	r3, r3, #16
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d007      	beq.n	80055b2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2210      	movs	r2, #16
 80055b0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	f003 0320 	and.w	r3, r3, #32
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00b      	beq.n	80055d4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	f003 0308 	and.w	r3, r3, #8
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d006      	beq.n	80055d4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2208      	movs	r2, #8
 80055cc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f90c 	bl	80057ec <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	f003 0310 	and.w	r3, r3, #16
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d009      	beq.n	80055f2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	f003 0303 	and.w	r3, r3, #3
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d002      	beq.n	80055f2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f8f3 	bl	80057d8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80055f2:	6a3b      	ldr	r3, [r7, #32]
 80055f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00b      	beq.n	8005614 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f003 0310 	and.w	r3, r3, #16
 8005602:	2b00      	cmp	r3, #0
 8005604:	d006      	beq.n	8005614 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2210      	movs	r2, #16
 800560c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f8f6 	bl	8005800 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005614:	6a3b      	ldr	r3, [r7, #32]
 8005616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00b      	beq.n	8005636 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	f003 0308 	and.w	r3, r3, #8
 8005624:	2b00      	cmp	r3, #0
 8005626:	d006      	beq.n	8005636 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2208      	movs	r2, #8
 800562e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f8ef 	bl	8005814 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005636:	6a3b      	ldr	r3, [r7, #32]
 8005638:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d075      	beq.n	800572c <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	f003 0304 	and.w	r3, r3, #4
 8005646:	2b00      	cmp	r3, #0
 8005648:	d06c      	beq.n	8005724 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005650:	2b00      	cmp	r3, #0
 8005652:	d008      	beq.n	8005666 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	f043 0301 	orr.w	r3, r3, #1
 8005664:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800566c:	2b00      	cmp	r3, #0
 800566e:	d008      	beq.n	8005682 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005676:	2b00      	cmp	r3, #0
 8005678:	d003      	beq.n	8005682 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	f043 0302 	orr.w	r3, r3, #2
 8005680:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005688:	2b00      	cmp	r3, #0
 800568a:	d008      	beq.n	800569e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	f043 0304 	orr.w	r3, r3, #4
 800569c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d03d      	beq.n	8005724 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d038      	beq.n	8005724 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056b8:	2b30      	cmp	r3, #48	; 0x30
 80056ba:	d017      	beq.n	80056ec <HAL_CAN_IRQHandler+0x302>
 80056bc:	2b30      	cmp	r3, #48	; 0x30
 80056be:	d804      	bhi.n	80056ca <HAL_CAN_IRQHandler+0x2e0>
 80056c0:	2b10      	cmp	r3, #16
 80056c2:	d009      	beq.n	80056d8 <HAL_CAN_IRQHandler+0x2ee>
 80056c4:	2b20      	cmp	r3, #32
 80056c6:	d00c      	beq.n	80056e2 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80056c8:	e024      	b.n	8005714 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80056ca:	2b50      	cmp	r3, #80	; 0x50
 80056cc:	d018      	beq.n	8005700 <HAL_CAN_IRQHandler+0x316>
 80056ce:	2b60      	cmp	r3, #96	; 0x60
 80056d0:	d01b      	beq.n	800570a <HAL_CAN_IRQHandler+0x320>
 80056d2:	2b40      	cmp	r3, #64	; 0x40
 80056d4:	d00f      	beq.n	80056f6 <HAL_CAN_IRQHandler+0x30c>
            break;
 80056d6:	e01d      	b.n	8005714 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	f043 0308 	orr.w	r3, r3, #8
 80056de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80056e0:	e018      	b.n	8005714 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	f043 0310 	orr.w	r3, r3, #16
 80056e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80056ea:	e013      	b.n	8005714 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	f043 0320 	orr.w	r3, r3, #32
 80056f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80056f4:	e00e      	b.n	8005714 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80056fe:	e009      	b.n	8005714 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005706:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005708:	e004      	b.n	8005714 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005710:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005712:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	699a      	ldr	r2, [r3, #24]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005722:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2204      	movs	r2, #4
 800572a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	2b00      	cmp	r3, #0
 8005730:	d008      	beq.n	8005744 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	431a      	orrs	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f872 	bl	8005828 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005744:	bf00      	nop
 8005746:	3728      	adds	r7, #40	; 0x28
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f003 0307 	and.w	r3, r3, #7
 800584a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800584c:	4b0c      	ldr	r3, [pc, #48]	; (8005880 <__NVIC_SetPriorityGrouping+0x44>)
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005858:	4013      	ands	r3, r2
 800585a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005864:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800586c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800586e:	4a04      	ldr	r2, [pc, #16]	; (8005880 <__NVIC_SetPriorityGrouping+0x44>)
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	60d3      	str	r3, [r2, #12]
}
 8005874:	bf00      	nop
 8005876:	3714      	adds	r7, #20
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr
 8005880:	e000ed00 	.word	0xe000ed00

08005884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005884:	b480      	push	{r7}
 8005886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005888:	4b04      	ldr	r3, [pc, #16]	; (800589c <__NVIC_GetPriorityGrouping+0x18>)
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	0a1b      	lsrs	r3, r3, #8
 800588e:	f003 0307 	and.w	r3, r3, #7
}
 8005892:	4618      	mov	r0, r3
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	e000ed00 	.word	0xe000ed00

080058a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	4603      	mov	r3, r0
 80058a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	db0b      	blt.n	80058ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058b2:	79fb      	ldrb	r3, [r7, #7]
 80058b4:	f003 021f 	and.w	r2, r3, #31
 80058b8:	4907      	ldr	r1, [pc, #28]	; (80058d8 <__NVIC_EnableIRQ+0x38>)
 80058ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058be:	095b      	lsrs	r3, r3, #5
 80058c0:	2001      	movs	r0, #1
 80058c2:	fa00 f202 	lsl.w	r2, r0, r2
 80058c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80058ca:	bf00      	nop
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	e000e100 	.word	0xe000e100

080058dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	4603      	mov	r3, r0
 80058e4:	6039      	str	r1, [r7, #0]
 80058e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	db0a      	blt.n	8005906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	b2da      	uxtb	r2, r3
 80058f4:	490c      	ldr	r1, [pc, #48]	; (8005928 <__NVIC_SetPriority+0x4c>)
 80058f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058fa:	0112      	lsls	r2, r2, #4
 80058fc:	b2d2      	uxtb	r2, r2
 80058fe:	440b      	add	r3, r1
 8005900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005904:	e00a      	b.n	800591c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	b2da      	uxtb	r2, r3
 800590a:	4908      	ldr	r1, [pc, #32]	; (800592c <__NVIC_SetPriority+0x50>)
 800590c:	79fb      	ldrb	r3, [r7, #7]
 800590e:	f003 030f 	and.w	r3, r3, #15
 8005912:	3b04      	subs	r3, #4
 8005914:	0112      	lsls	r2, r2, #4
 8005916:	b2d2      	uxtb	r2, r2
 8005918:	440b      	add	r3, r1
 800591a:	761a      	strb	r2, [r3, #24]
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	e000e100 	.word	0xe000e100
 800592c:	e000ed00 	.word	0xe000ed00

08005930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005930:	b480      	push	{r7}
 8005932:	b089      	sub	sp, #36	; 0x24
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f003 0307 	and.w	r3, r3, #7
 8005942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	f1c3 0307 	rsb	r3, r3, #7
 800594a:	2b04      	cmp	r3, #4
 800594c:	bf28      	it	cs
 800594e:	2304      	movcs	r3, #4
 8005950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	3304      	adds	r3, #4
 8005956:	2b06      	cmp	r3, #6
 8005958:	d902      	bls.n	8005960 <NVIC_EncodePriority+0x30>
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	3b03      	subs	r3, #3
 800595e:	e000      	b.n	8005962 <NVIC_EncodePriority+0x32>
 8005960:	2300      	movs	r3, #0
 8005962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005964:	f04f 32ff 	mov.w	r2, #4294967295
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	fa02 f303 	lsl.w	r3, r2, r3
 800596e:	43da      	mvns	r2, r3
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	401a      	ands	r2, r3
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005978:	f04f 31ff 	mov.w	r1, #4294967295
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	fa01 f303 	lsl.w	r3, r1, r3
 8005982:	43d9      	mvns	r1, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005988:	4313      	orrs	r3, r2
         );
}
 800598a:	4618      	mov	r0, r3
 800598c:	3724      	adds	r7, #36	; 0x24
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
	...

08005998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	3b01      	subs	r3, #1
 80059a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059a8:	d301      	bcc.n	80059ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80059aa:	2301      	movs	r3, #1
 80059ac:	e00f      	b.n	80059ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059ae:	4a0a      	ldr	r2, [pc, #40]	; (80059d8 <SysTick_Config+0x40>)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80059b6:	210f      	movs	r1, #15
 80059b8:	f04f 30ff 	mov.w	r0, #4294967295
 80059bc:	f7ff ff8e 	bl	80058dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059c0:	4b05      	ldr	r3, [pc, #20]	; (80059d8 <SysTick_Config+0x40>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059c6:	4b04      	ldr	r3, [pc, #16]	; (80059d8 <SysTick_Config+0x40>)
 80059c8:	2207      	movs	r2, #7
 80059ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3708      	adds	r7, #8
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	e000e010 	.word	0xe000e010

080059dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f7ff ff29 	bl	800583c <__NVIC_SetPriorityGrouping>
}
 80059ea:	bf00      	nop
 80059ec:	3708      	adds	r7, #8
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b086      	sub	sp, #24
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	4603      	mov	r3, r0
 80059fa:	60b9      	str	r1, [r7, #8]
 80059fc:	607a      	str	r2, [r7, #4]
 80059fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005a00:	2300      	movs	r3, #0
 8005a02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a04:	f7ff ff3e 	bl	8005884 <__NVIC_GetPriorityGrouping>
 8005a08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	68b9      	ldr	r1, [r7, #8]
 8005a0e:	6978      	ldr	r0, [r7, #20]
 8005a10:	f7ff ff8e 	bl	8005930 <NVIC_EncodePriority>
 8005a14:	4602      	mov	r2, r0
 8005a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a1a:	4611      	mov	r1, r2
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7ff ff5d 	bl	80058dc <__NVIC_SetPriority>
}
 8005a22:	bf00      	nop
 8005a24:	3718      	adds	r7, #24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b082      	sub	sp, #8
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	4603      	mov	r3, r0
 8005a32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff ff31 	bl	80058a0 <__NVIC_EnableIRQ>
}
 8005a3e:	bf00      	nop
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b082      	sub	sp, #8
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f7ff ffa2 	bl	8005998 <SysTick_Config>
 8005a54:	4603      	mov	r3, r0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
	...

08005a60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005a6c:	f7ff f838 	bl	8004ae0 <HAL_GetTick>
 8005a70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d101      	bne.n	8005a7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e099      	b.n	8005bb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f022 0201 	bic.w	r2, r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a9c:	e00f      	b.n	8005abe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a9e:	f7ff f81f 	bl	8004ae0 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	2b05      	cmp	r3, #5
 8005aaa:	d908      	bls.n	8005abe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2203      	movs	r2, #3
 8005ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e078      	b.n	8005bb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1e8      	bne.n	8005a9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	4b38      	ldr	r3, [pc, #224]	; (8005bb8 <HAL_DMA_Init+0x158>)
 8005ad8:	4013      	ands	r3, r2
 8005ada:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005aea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005af6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a1b      	ldr	r3, [r3, #32]
 8005b08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b14:	2b04      	cmp	r3, #4
 8005b16:	d107      	bne.n	8005b28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b20:	4313      	orrs	r3, r2
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f023 0307 	bic.w	r3, r3, #7
 8005b3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	d117      	bne.n	8005b82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00e      	beq.n	8005b82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fa75 	bl	8006054 <DMA_CheckFifoParam>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d008      	beq.n	8005b82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2240      	movs	r2, #64	; 0x40
 8005b74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e016      	b.n	8005bb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 fa2c 	bl	8005fe8 <DMA_CalcBaseAndBitshift>
 8005b90:	4603      	mov	r3, r0
 8005b92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b98:	223f      	movs	r2, #63	; 0x3f
 8005b9a:	409a      	lsls	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3718      	adds	r7, #24
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	f010803f 	.word	0xf010803f

08005bbc <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
 8005bc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d101      	bne.n	8005bdc <HAL_DMA_Start+0x20>
 8005bd8:	2302      	movs	r3, #2
 8005bda:	e026      	b.n	8005c2a <HAL_DMA_Start+0x6e>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d115      	bne.n	8005c1c <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	68b9      	ldr	r1, [r7, #8]
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 f9c1 	bl	8005f8c <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f042 0201 	orr.w	r2, r2, #1
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	e005      	b.n	8005c28 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005c24:	2302      	movs	r3, #2
 8005c26:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8005c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b083      	sub	sp, #12
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d004      	beq.n	8005c50 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2280      	movs	r2, #128	; 0x80
 8005c4a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e00c      	b.n	8005c6a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2205      	movs	r2, #5
 8005c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 0201 	bic.w	r2, r2, #1
 8005c66:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
	...

08005c78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005c80:	2300      	movs	r3, #0
 8005c82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005c84:	4b92      	ldr	r3, [pc, #584]	; (8005ed0 <HAL_DMA_IRQHandler+0x258>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a92      	ldr	r2, [pc, #584]	; (8005ed4 <HAL_DMA_IRQHandler+0x25c>)
 8005c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8e:	0a9b      	lsrs	r3, r3, #10
 8005c90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ca2:	2208      	movs	r2, #8
 8005ca4:	409a      	lsls	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	4013      	ands	r3, r2
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d01a      	beq.n	8005ce4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d013      	beq.n	8005ce4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f022 0204 	bic.w	r2, r2, #4
 8005cca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd0:	2208      	movs	r2, #8
 8005cd2:	409a      	lsls	r2, r3
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cdc:	f043 0201 	orr.w	r2, r3, #1
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ce8:	2201      	movs	r2, #1
 8005cea:	409a      	lsls	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4013      	ands	r3, r2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d012      	beq.n	8005d1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00b      	beq.n	8005d1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d06:	2201      	movs	r2, #1
 8005d08:	409a      	lsls	r2, r3
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d12:	f043 0202 	orr.w	r2, r3, #2
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d1e:	2204      	movs	r2, #4
 8005d20:	409a      	lsls	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	4013      	ands	r3, r2
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d012      	beq.n	8005d50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0302 	and.w	r3, r3, #2
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00b      	beq.n	8005d50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d3c:	2204      	movs	r2, #4
 8005d3e:	409a      	lsls	r2, r3
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d48:	f043 0204 	orr.w	r2, r3, #4
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d54:	2210      	movs	r2, #16
 8005d56:	409a      	lsls	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d043      	beq.n	8005de8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0308 	and.w	r3, r3, #8
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d03c      	beq.n	8005de8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d72:	2210      	movs	r2, #16
 8005d74:	409a      	lsls	r2, r3
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d018      	beq.n	8005dba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d108      	bne.n	8005da8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d024      	beq.n	8005de8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	4798      	blx	r3
 8005da6:	e01f      	b.n	8005de8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d01b      	beq.n	8005de8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	4798      	blx	r3
 8005db8:	e016      	b.n	8005de8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d107      	bne.n	8005dd8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 0208 	bic.w	r2, r2, #8
 8005dd6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d003      	beq.n	8005de8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dec:	2220      	movs	r2, #32
 8005dee:	409a      	lsls	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	4013      	ands	r3, r2
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f000 808e 	beq.w	8005f16 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0310 	and.w	r3, r3, #16
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 8086 	beq.w	8005f16 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e0e:	2220      	movs	r2, #32
 8005e10:	409a      	lsls	r2, r3
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b05      	cmp	r3, #5
 8005e20:	d136      	bne.n	8005e90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 0216 	bic.w	r2, r2, #22
 8005e30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	695a      	ldr	r2, [r3, #20]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d103      	bne.n	8005e52 <HAL_DMA_IRQHandler+0x1da>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d007      	beq.n	8005e62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 0208 	bic.w	r2, r2, #8
 8005e60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e66:	223f      	movs	r2, #63	; 0x3f
 8005e68:	409a      	lsls	r2, r3
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d07d      	beq.n	8005f82 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	4798      	blx	r3
        }
        return;
 8005e8e:	e078      	b.n	8005f82 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d01c      	beq.n	8005ed8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d108      	bne.n	8005ebe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d030      	beq.n	8005f16 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	4798      	blx	r3
 8005ebc:	e02b      	b.n	8005f16 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d027      	beq.n	8005f16 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	4798      	blx	r3
 8005ece:	e022      	b.n	8005f16 <HAL_DMA_IRQHandler+0x29e>
 8005ed0:	20000014 	.word	0x20000014
 8005ed4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10f      	bne.n	8005f06 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 0210 	bic.w	r2, r2, #16
 8005ef4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d032      	beq.n	8005f84 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d022      	beq.n	8005f70 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2205      	movs	r2, #5
 8005f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 0201 	bic.w	r2, r2, #1
 8005f40:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	3301      	adds	r3, #1
 8005f46:	60bb      	str	r3, [r7, #8]
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d307      	bcc.n	8005f5e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0301 	and.w	r3, r3, #1
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1f2      	bne.n	8005f42 <HAL_DMA_IRQHandler+0x2ca>
 8005f5c:	e000      	b.n	8005f60 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005f5e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d005      	beq.n	8005f84 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	4798      	blx	r3
 8005f80:	e000      	b.n	8005f84 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005f82:	bf00      	nop
    }
  }
}
 8005f84:	3718      	adds	r7, #24
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop

08005f8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
 8005f98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005fa8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	683a      	ldr	r2, [r7, #0]
 8005fb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	2b40      	cmp	r3, #64	; 0x40
 8005fb8:	d108      	bne.n	8005fcc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005fca:	e007      	b.n	8005fdc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	60da      	str	r2, [r3, #12]
}
 8005fdc:	bf00      	nop
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	3b10      	subs	r3, #16
 8005ff8:	4a14      	ldr	r2, [pc, #80]	; (800604c <DMA_CalcBaseAndBitshift+0x64>)
 8005ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8005ffe:	091b      	lsrs	r3, r3, #4
 8006000:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006002:	4a13      	ldr	r2, [pc, #76]	; (8006050 <DMA_CalcBaseAndBitshift+0x68>)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	4413      	add	r3, r2
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	461a      	mov	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2b03      	cmp	r3, #3
 8006014:	d909      	bls.n	800602a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800601e:	f023 0303 	bic.w	r3, r3, #3
 8006022:	1d1a      	adds	r2, r3, #4
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	659a      	str	r2, [r3, #88]	; 0x58
 8006028:	e007      	b.n	800603a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006032:	f023 0303 	bic.w	r3, r3, #3
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800603e:	4618      	mov	r0, r3
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	aaaaaaab 	.word	0xaaaaaaab
 8006050:	08009560 	.word	0x08009560

08006054 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800605c:	2300      	movs	r3, #0
 800605e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006064:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d11f      	bne.n	80060ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	2b03      	cmp	r3, #3
 8006072:	d855      	bhi.n	8006120 <DMA_CheckFifoParam+0xcc>
 8006074:	a201      	add	r2, pc, #4	; (adr r2, 800607c <DMA_CheckFifoParam+0x28>)
 8006076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607a:	bf00      	nop
 800607c:	0800608d 	.word	0x0800608d
 8006080:	0800609f 	.word	0x0800609f
 8006084:	0800608d 	.word	0x0800608d
 8006088:	08006121 	.word	0x08006121
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006090:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d045      	beq.n	8006124 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800609c:	e042      	b.n	8006124 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80060a6:	d13f      	bne.n	8006128 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060ac:	e03c      	b.n	8006128 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060b6:	d121      	bne.n	80060fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2b03      	cmp	r3, #3
 80060bc:	d836      	bhi.n	800612c <DMA_CheckFifoParam+0xd8>
 80060be:	a201      	add	r2, pc, #4	; (adr r2, 80060c4 <DMA_CheckFifoParam+0x70>)
 80060c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c4:	080060d5 	.word	0x080060d5
 80060c8:	080060db 	.word	0x080060db
 80060cc:	080060d5 	.word	0x080060d5
 80060d0:	080060ed 	.word	0x080060ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	73fb      	strb	r3, [r7, #15]
      break;
 80060d8:	e02f      	b.n	800613a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d024      	beq.n	8006130 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060ea:	e021      	b.n	8006130 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80060f4:	d11e      	bne.n	8006134 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80060fa:	e01b      	b.n	8006134 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d902      	bls.n	8006108 <DMA_CheckFifoParam+0xb4>
 8006102:	2b03      	cmp	r3, #3
 8006104:	d003      	beq.n	800610e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006106:	e018      	b.n	800613a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	73fb      	strb	r3, [r7, #15]
      break;
 800610c:	e015      	b.n	800613a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006112:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00e      	beq.n	8006138 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	73fb      	strb	r3, [r7, #15]
      break;
 800611e:	e00b      	b.n	8006138 <DMA_CheckFifoParam+0xe4>
      break;
 8006120:	bf00      	nop
 8006122:	e00a      	b.n	800613a <DMA_CheckFifoParam+0xe6>
      break;
 8006124:	bf00      	nop
 8006126:	e008      	b.n	800613a <DMA_CheckFifoParam+0xe6>
      break;
 8006128:	bf00      	nop
 800612a:	e006      	b.n	800613a <DMA_CheckFifoParam+0xe6>
      break;
 800612c:	bf00      	nop
 800612e:	e004      	b.n	800613a <DMA_CheckFifoParam+0xe6>
      break;
 8006130:	bf00      	nop
 8006132:	e002      	b.n	800613a <DMA_CheckFifoParam+0xe6>
      break;   
 8006134:	bf00      	nop
 8006136:	e000      	b.n	800613a <DMA_CheckFifoParam+0xe6>
      break;
 8006138:	bf00      	nop
    }
  } 
  
  return status; 
 800613a:	7bfb      	ldrb	r3, [r7, #15]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3714      	adds	r7, #20
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006148:	b480      	push	{r7}
 800614a:	b089      	sub	sp, #36	; 0x24
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006152:	2300      	movs	r3, #0
 8006154:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006156:	2300      	movs	r3, #0
 8006158:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800615a:	2300      	movs	r3, #0
 800615c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800615e:	2300      	movs	r3, #0
 8006160:	61fb      	str	r3, [r7, #28]
 8006162:	e177      	b.n	8006454 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006164:	2201      	movs	r2, #1
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	fa02 f303 	lsl.w	r3, r2, r3
 800616c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	4013      	ands	r3, r2
 8006176:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	429a      	cmp	r2, r3
 800617e:	f040 8166 	bne.w	800644e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d00b      	beq.n	80061a2 <HAL_GPIO_Init+0x5a>
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	2b02      	cmp	r3, #2
 8006190:	d007      	beq.n	80061a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006196:	2b11      	cmp	r3, #17
 8006198:	d003      	beq.n	80061a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	2b12      	cmp	r3, #18
 80061a0:	d130      	bne.n	8006204 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	005b      	lsls	r3, r3, #1
 80061ac:	2203      	movs	r2, #3
 80061ae:	fa02 f303 	lsl.w	r3, r2, r3
 80061b2:	43db      	mvns	r3, r3
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	4013      	ands	r3, r2
 80061b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	68da      	ldr	r2, [r3, #12]
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	005b      	lsls	r3, r3, #1
 80061c2:	fa02 f303 	lsl.w	r3, r2, r3
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80061d8:	2201      	movs	r2, #1
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	fa02 f303 	lsl.w	r3, r2, r3
 80061e0:	43db      	mvns	r3, r3
 80061e2:	69ba      	ldr	r2, [r7, #24]
 80061e4:	4013      	ands	r3, r2
 80061e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	091b      	lsrs	r3, r3, #4
 80061ee:	f003 0201 	and.w	r2, r3, #1
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	fa02 f303 	lsl.w	r3, r2, r3
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	005b      	lsls	r3, r3, #1
 800620e:	2203      	movs	r2, #3
 8006210:	fa02 f303 	lsl.w	r3, r2, r3
 8006214:	43db      	mvns	r3, r3
 8006216:	69ba      	ldr	r2, [r7, #24]
 8006218:	4013      	ands	r3, r2
 800621a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	689a      	ldr	r2, [r3, #8]
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	fa02 f303 	lsl.w	r3, r2, r3
 8006228:	69ba      	ldr	r2, [r7, #24]
 800622a:	4313      	orrs	r3, r2
 800622c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	2b02      	cmp	r3, #2
 800623a:	d003      	beq.n	8006244 <HAL_GPIO_Init+0xfc>
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	2b12      	cmp	r3, #18
 8006242:	d123      	bne.n	800628c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	08da      	lsrs	r2, r3, #3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	3208      	adds	r2, #8
 800624c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006250:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	f003 0307 	and.w	r3, r3, #7
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	220f      	movs	r2, #15
 800625c:	fa02 f303 	lsl.w	r3, r2, r3
 8006260:	43db      	mvns	r3, r3
 8006262:	69ba      	ldr	r2, [r7, #24]
 8006264:	4013      	ands	r3, r2
 8006266:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	691a      	ldr	r2, [r3, #16]
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	f003 0307 	and.w	r3, r3, #7
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	fa02 f303 	lsl.w	r3, r2, r3
 8006278:	69ba      	ldr	r2, [r7, #24]
 800627a:	4313      	orrs	r3, r2
 800627c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	08da      	lsrs	r2, r3, #3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	3208      	adds	r2, #8
 8006286:	69b9      	ldr	r1, [r7, #24]
 8006288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	2203      	movs	r2, #3
 8006298:	fa02 f303 	lsl.w	r3, r2, r3
 800629c:	43db      	mvns	r3, r3
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	4013      	ands	r3, r2
 80062a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f003 0203 	and.w	r2, r3, #3
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	005b      	lsls	r3, r3, #1
 80062b0:	fa02 f303 	lsl.w	r3, r2, r3
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 80c0 	beq.w	800644e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062ce:	2300      	movs	r3, #0
 80062d0:	60fb      	str	r3, [r7, #12]
 80062d2:	4b65      	ldr	r3, [pc, #404]	; (8006468 <HAL_GPIO_Init+0x320>)
 80062d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d6:	4a64      	ldr	r2, [pc, #400]	; (8006468 <HAL_GPIO_Init+0x320>)
 80062d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062dc:	6453      	str	r3, [r2, #68]	; 0x44
 80062de:	4b62      	ldr	r3, [pc, #392]	; (8006468 <HAL_GPIO_Init+0x320>)
 80062e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80062ea:	4a60      	ldr	r2, [pc, #384]	; (800646c <HAL_GPIO_Init+0x324>)
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	089b      	lsrs	r3, r3, #2
 80062f0:	3302      	adds	r3, #2
 80062f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	f003 0303 	and.w	r3, r3, #3
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	220f      	movs	r2, #15
 8006302:	fa02 f303 	lsl.w	r3, r2, r3
 8006306:	43db      	mvns	r3, r3
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	4013      	ands	r3, r2
 800630c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a57      	ldr	r2, [pc, #348]	; (8006470 <HAL_GPIO_Init+0x328>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d037      	beq.n	8006386 <HAL_GPIO_Init+0x23e>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a56      	ldr	r2, [pc, #344]	; (8006474 <HAL_GPIO_Init+0x32c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d031      	beq.n	8006382 <HAL_GPIO_Init+0x23a>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a55      	ldr	r2, [pc, #340]	; (8006478 <HAL_GPIO_Init+0x330>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d02b      	beq.n	800637e <HAL_GPIO_Init+0x236>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a54      	ldr	r2, [pc, #336]	; (800647c <HAL_GPIO_Init+0x334>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d025      	beq.n	800637a <HAL_GPIO_Init+0x232>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a53      	ldr	r2, [pc, #332]	; (8006480 <HAL_GPIO_Init+0x338>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d01f      	beq.n	8006376 <HAL_GPIO_Init+0x22e>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a52      	ldr	r2, [pc, #328]	; (8006484 <HAL_GPIO_Init+0x33c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d019      	beq.n	8006372 <HAL_GPIO_Init+0x22a>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a51      	ldr	r2, [pc, #324]	; (8006488 <HAL_GPIO_Init+0x340>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d013      	beq.n	800636e <HAL_GPIO_Init+0x226>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a50      	ldr	r2, [pc, #320]	; (800648c <HAL_GPIO_Init+0x344>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d00d      	beq.n	800636a <HAL_GPIO_Init+0x222>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a4f      	ldr	r2, [pc, #316]	; (8006490 <HAL_GPIO_Init+0x348>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d007      	beq.n	8006366 <HAL_GPIO_Init+0x21e>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a4e      	ldr	r2, [pc, #312]	; (8006494 <HAL_GPIO_Init+0x34c>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d101      	bne.n	8006362 <HAL_GPIO_Init+0x21a>
 800635e:	2309      	movs	r3, #9
 8006360:	e012      	b.n	8006388 <HAL_GPIO_Init+0x240>
 8006362:	230a      	movs	r3, #10
 8006364:	e010      	b.n	8006388 <HAL_GPIO_Init+0x240>
 8006366:	2308      	movs	r3, #8
 8006368:	e00e      	b.n	8006388 <HAL_GPIO_Init+0x240>
 800636a:	2307      	movs	r3, #7
 800636c:	e00c      	b.n	8006388 <HAL_GPIO_Init+0x240>
 800636e:	2306      	movs	r3, #6
 8006370:	e00a      	b.n	8006388 <HAL_GPIO_Init+0x240>
 8006372:	2305      	movs	r3, #5
 8006374:	e008      	b.n	8006388 <HAL_GPIO_Init+0x240>
 8006376:	2304      	movs	r3, #4
 8006378:	e006      	b.n	8006388 <HAL_GPIO_Init+0x240>
 800637a:	2303      	movs	r3, #3
 800637c:	e004      	b.n	8006388 <HAL_GPIO_Init+0x240>
 800637e:	2302      	movs	r3, #2
 8006380:	e002      	b.n	8006388 <HAL_GPIO_Init+0x240>
 8006382:	2301      	movs	r3, #1
 8006384:	e000      	b.n	8006388 <HAL_GPIO_Init+0x240>
 8006386:	2300      	movs	r3, #0
 8006388:	69fa      	ldr	r2, [r7, #28]
 800638a:	f002 0203 	and.w	r2, r2, #3
 800638e:	0092      	lsls	r2, r2, #2
 8006390:	4093      	lsls	r3, r2
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	4313      	orrs	r3, r2
 8006396:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006398:	4934      	ldr	r1, [pc, #208]	; (800646c <HAL_GPIO_Init+0x324>)
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	089b      	lsrs	r3, r3, #2
 800639e:	3302      	adds	r3, #2
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80063a6:	4b3c      	ldr	r3, [pc, #240]	; (8006498 <HAL_GPIO_Init+0x350>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	43db      	mvns	r3, r3
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	4013      	ands	r3, r2
 80063b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80063c2:	69ba      	ldr	r2, [r7, #24]
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80063ca:	4a33      	ldr	r2, [pc, #204]	; (8006498 <HAL_GPIO_Init+0x350>)
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80063d0:	4b31      	ldr	r3, [pc, #196]	; (8006498 <HAL_GPIO_Init+0x350>)
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	43db      	mvns	r3, r3
 80063da:	69ba      	ldr	r2, [r7, #24]
 80063dc:	4013      	ands	r3, r2
 80063de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d003      	beq.n	80063f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80063ec:	69ba      	ldr	r2, [r7, #24]
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80063f4:	4a28      	ldr	r2, [pc, #160]	; (8006498 <HAL_GPIO_Init+0x350>)
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80063fa:	4b27      	ldr	r3, [pc, #156]	; (8006498 <HAL_GPIO_Init+0x350>)
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	43db      	mvns	r3, r3
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	4013      	ands	r3, r2
 8006408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d003      	beq.n	800641e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006416:	69ba      	ldr	r2, [r7, #24]
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	4313      	orrs	r3, r2
 800641c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800641e:	4a1e      	ldr	r2, [pc, #120]	; (8006498 <HAL_GPIO_Init+0x350>)
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006424:	4b1c      	ldr	r3, [pc, #112]	; (8006498 <HAL_GPIO_Init+0x350>)
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	43db      	mvns	r3, r3
 800642e:	69ba      	ldr	r2, [r7, #24]
 8006430:	4013      	ands	r3, r2
 8006432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d003      	beq.n	8006448 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006440:	69ba      	ldr	r2, [r7, #24]
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	4313      	orrs	r3, r2
 8006446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006448:	4a13      	ldr	r2, [pc, #76]	; (8006498 <HAL_GPIO_Init+0x350>)
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	3301      	adds	r3, #1
 8006452:	61fb      	str	r3, [r7, #28]
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	2b0f      	cmp	r3, #15
 8006458:	f67f ae84 	bls.w	8006164 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800645c:	bf00      	nop
 800645e:	3724      	adds	r7, #36	; 0x24
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr
 8006468:	40023800 	.word	0x40023800
 800646c:	40013800 	.word	0x40013800
 8006470:	40020000 	.word	0x40020000
 8006474:	40020400 	.word	0x40020400
 8006478:	40020800 	.word	0x40020800
 800647c:	40020c00 	.word	0x40020c00
 8006480:	40021000 	.word	0x40021000
 8006484:	40021400 	.word	0x40021400
 8006488:	40021800 	.word	0x40021800
 800648c:	40021c00 	.word	0x40021c00
 8006490:	40022000 	.word	0x40022000
 8006494:	40022400 	.word	0x40022400
 8006498:	40013c00 	.word	0x40013c00

0800649c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	460b      	mov	r3, r1
 80064a6:	807b      	strh	r3, [r7, #2]
 80064a8:	4613      	mov	r3, r2
 80064aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80064ac:	787b      	ldrb	r3, [r7, #1]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d003      	beq.n	80064ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80064b2:	887a      	ldrh	r2, [r7, #2]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80064b8:	e003      	b.n	80064c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80064ba:	887b      	ldrh	r3, [r7, #2]
 80064bc:	041a      	lsls	r2, r3, #16
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	619a      	str	r2, [r3, #24]
}
 80064c2:	bf00      	nop
 80064c4:	370c      	adds	r7, #12
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80064ce:	b480      	push	{r7}
 80064d0:	b083      	sub	sp, #12
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
 80064d6:	460b      	mov	r3, r1
 80064d8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	695a      	ldr	r2, [r3, #20]
 80064de:	887b      	ldrh	r3, [r7, #2]
 80064e0:	401a      	ands	r2, r3
 80064e2:	887b      	ldrh	r3, [r7, #2]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d104      	bne.n	80064f2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80064e8:	887b      	ldrh	r3, [r7, #2]
 80064ea:	041a      	lsls	r2, r3, #16
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80064f0:	e002      	b.n	80064f8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80064f2:	887a      	ldrh	r2, [r7, #2]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	619a      	str	r2, [r3, #24]
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e25b      	b.n	80069ce <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d075      	beq.n	800660e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006522:	4ba3      	ldr	r3, [pc, #652]	; (80067b0 <HAL_RCC_OscConfig+0x2ac>)
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f003 030c 	and.w	r3, r3, #12
 800652a:	2b04      	cmp	r3, #4
 800652c:	d00c      	beq.n	8006548 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800652e:	4ba0      	ldr	r3, [pc, #640]	; (80067b0 <HAL_RCC_OscConfig+0x2ac>)
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006536:	2b08      	cmp	r3, #8
 8006538:	d112      	bne.n	8006560 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800653a:	4b9d      	ldr	r3, [pc, #628]	; (80067b0 <HAL_RCC_OscConfig+0x2ac>)
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006546:	d10b      	bne.n	8006560 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006548:	4b99      	ldr	r3, [pc, #612]	; (80067b0 <HAL_RCC_OscConfig+0x2ac>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d05b      	beq.n	800660c <HAL_RCC_OscConfig+0x108>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d157      	bne.n	800660c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e236      	b.n	80069ce <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006568:	d106      	bne.n	8006578 <HAL_RCC_OscConfig+0x74>
 800656a:	4b91      	ldr	r3, [pc, #580]	; (80067b0 <HAL_RCC_OscConfig+0x2ac>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a90      	ldr	r2, [pc, #576]	; (80067b0 <HAL_RCC_OscConfig+0x2ac>)
 8006570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006574:	6013      	str	r3, [r2, #0]
 8006576:	e01d      	b.n	80065b4 <HAL_RCC_OscConfig+0xb0>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006580:	d10c      	bne.n	800659c <HAL_RCC_OscConfig+0x98>
 8006582:	4b8b      	ldr	r3, [pc, #556]	; (80067b0 <HAL_RCC_OscConfig+0x2ac>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a8a      	ldr	r2, [pc, #552]	; (80067b0 <HAL_RCC_OscConfig+0x2ac>)
 8006588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800658c:	6013      	str	r3, [r2, #0]
 800658e:	4b88      	ldr	r3, [pc, #544]	; (80067b0 <HAL_RCC_OscConfig+0x2ac>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a87      	ldr	r2, [pc, #540]	; (80067b0 <HAL_RCC_OscConfig+0x2ac>)
 8006594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	e00b      	b.n	80065b4 <HAL_RCC_OscConfig+0xb0>
 800659c:	4b84      	ldr	r3, [pc, #528]	; (80067b0 <HAL_RCC_OscConfig+0x2ac>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a83      	ldr	r2, [pc, #524]	; (80067b0 <HAL_RCC_OscConfig+0x2ac>)
 80065a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065a6:	6013      	str	r3, [r2, #0]
 80065a8:	4b81      	ldr	r3, [pc, #516]	; (80067b0 <HAL_RCC_OscConfig+0x2ac>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a80      	ldr	r2, [pc, #512]	; (80067b0 <HAL_RCC_OscConfig+0x2ac>)
 80065ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d013      	beq.n	80065e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065bc:	f7fe fa90 	bl	8004ae0 <HAL_GetTick>
 80065c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065c2:	e008      	b.n	80065d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065c4:	f7fe fa8c 	bl	8004ae0 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b64      	cmp	r3, #100	; 0x64
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e1fb      	b.n	80069ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065d6:	4b76      	ldr	r3, [pc, #472]	; (80067b0 <HAL_RCC_OscConfig+0x2ac>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d0f0      	beq.n	80065c4 <HAL_RCC_OscConfig+0xc0>
 80065e2:	e014      	b.n	800660e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065e4:	f7fe fa7c 	bl	8004ae0 <HAL_GetTick>
 80065e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065ea:	e008      	b.n	80065fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065ec:	f7fe fa78 	bl	8004ae0 <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	2b64      	cmp	r3, #100	; 0x64
 80065f8:	d901      	bls.n	80065fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e1e7      	b.n	80069ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065fe:	4b6c      	ldr	r3, [pc, #432]	; (80067b0 <HAL_RCC_OscConfig+0x2ac>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1f0      	bne.n	80065ec <HAL_RCC_OscConfig+0xe8>
 800660a:	e000      	b.n	800660e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800660c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d063      	beq.n	80066e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800661a:	4b65      	ldr	r3, [pc, #404]	; (80067b0 <HAL_RCC_OscConfig+0x2ac>)
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f003 030c 	and.w	r3, r3, #12
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00b      	beq.n	800663e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006626:	4b62      	ldr	r3, [pc, #392]	; (80067b0 <HAL_RCC_OscConfig+0x2ac>)
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800662e:	2b08      	cmp	r3, #8
 8006630:	d11c      	bne.n	800666c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006632:	4b5f      	ldr	r3, [pc, #380]	; (80067b0 <HAL_RCC_OscConfig+0x2ac>)
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d116      	bne.n	800666c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800663e:	4b5c      	ldr	r3, [pc, #368]	; (80067b0 <HAL_RCC_OscConfig+0x2ac>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d005      	beq.n	8006656 <HAL_RCC_OscConfig+0x152>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	2b01      	cmp	r3, #1
 8006650:	d001      	beq.n	8006656 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e1bb      	b.n	80069ce <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006656:	4b56      	ldr	r3, [pc, #344]	; (80067b0 <HAL_RCC_OscConfig+0x2ac>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	00db      	lsls	r3, r3, #3
 8006664:	4952      	ldr	r1, [pc, #328]	; (80067b0 <HAL_RCC_OscConfig+0x2ac>)
 8006666:	4313      	orrs	r3, r2
 8006668:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800666a:	e03a      	b.n	80066e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d020      	beq.n	80066b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006674:	4b4f      	ldr	r3, [pc, #316]	; (80067b4 <HAL_RCC_OscConfig+0x2b0>)
 8006676:	2201      	movs	r2, #1
 8006678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800667a:	f7fe fa31 	bl	8004ae0 <HAL_GetTick>
 800667e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006680:	e008      	b.n	8006694 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006682:	f7fe fa2d 	bl	8004ae0 <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	2b02      	cmp	r3, #2
 800668e:	d901      	bls.n	8006694 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e19c      	b.n	80069ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006694:	4b46      	ldr	r3, [pc, #280]	; (80067b0 <HAL_RCC_OscConfig+0x2ac>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0302 	and.w	r3, r3, #2
 800669c:	2b00      	cmp	r3, #0
 800669e:	d0f0      	beq.n	8006682 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066a0:	4b43      	ldr	r3, [pc, #268]	; (80067b0 <HAL_RCC_OscConfig+0x2ac>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	00db      	lsls	r3, r3, #3
 80066ae:	4940      	ldr	r1, [pc, #256]	; (80067b0 <HAL_RCC_OscConfig+0x2ac>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	600b      	str	r3, [r1, #0]
 80066b4:	e015      	b.n	80066e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066b6:	4b3f      	ldr	r3, [pc, #252]	; (80067b4 <HAL_RCC_OscConfig+0x2b0>)
 80066b8:	2200      	movs	r2, #0
 80066ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066bc:	f7fe fa10 	bl	8004ae0 <HAL_GetTick>
 80066c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066c2:	e008      	b.n	80066d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066c4:	f7fe fa0c 	bl	8004ae0 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d901      	bls.n	80066d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e17b      	b.n	80069ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066d6:	4b36      	ldr	r3, [pc, #216]	; (80067b0 <HAL_RCC_OscConfig+0x2ac>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0302 	and.w	r3, r3, #2
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1f0      	bne.n	80066c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0308 	and.w	r3, r3, #8
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d030      	beq.n	8006750 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d016      	beq.n	8006724 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066f6:	4b30      	ldr	r3, [pc, #192]	; (80067b8 <HAL_RCC_OscConfig+0x2b4>)
 80066f8:	2201      	movs	r2, #1
 80066fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066fc:	f7fe f9f0 	bl	8004ae0 <HAL_GetTick>
 8006700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006702:	e008      	b.n	8006716 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006704:	f7fe f9ec 	bl	8004ae0 <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	2b02      	cmp	r3, #2
 8006710:	d901      	bls.n	8006716 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e15b      	b.n	80069ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006716:	4b26      	ldr	r3, [pc, #152]	; (80067b0 <HAL_RCC_OscConfig+0x2ac>)
 8006718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800671a:	f003 0302 	and.w	r3, r3, #2
 800671e:	2b00      	cmp	r3, #0
 8006720:	d0f0      	beq.n	8006704 <HAL_RCC_OscConfig+0x200>
 8006722:	e015      	b.n	8006750 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006724:	4b24      	ldr	r3, [pc, #144]	; (80067b8 <HAL_RCC_OscConfig+0x2b4>)
 8006726:	2200      	movs	r2, #0
 8006728:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800672a:	f7fe f9d9 	bl	8004ae0 <HAL_GetTick>
 800672e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006730:	e008      	b.n	8006744 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006732:	f7fe f9d5 	bl	8004ae0 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	2b02      	cmp	r3, #2
 800673e:	d901      	bls.n	8006744 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e144      	b.n	80069ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006744:	4b1a      	ldr	r3, [pc, #104]	; (80067b0 <HAL_RCC_OscConfig+0x2ac>)
 8006746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006748:	f003 0302 	and.w	r3, r3, #2
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1f0      	bne.n	8006732 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0304 	and.w	r3, r3, #4
 8006758:	2b00      	cmp	r3, #0
 800675a:	f000 80a0 	beq.w	800689e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800675e:	2300      	movs	r3, #0
 8006760:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006762:	4b13      	ldr	r3, [pc, #76]	; (80067b0 <HAL_RCC_OscConfig+0x2ac>)
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10f      	bne.n	800678e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800676e:	2300      	movs	r3, #0
 8006770:	60bb      	str	r3, [r7, #8]
 8006772:	4b0f      	ldr	r3, [pc, #60]	; (80067b0 <HAL_RCC_OscConfig+0x2ac>)
 8006774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006776:	4a0e      	ldr	r2, [pc, #56]	; (80067b0 <HAL_RCC_OscConfig+0x2ac>)
 8006778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800677c:	6413      	str	r3, [r2, #64]	; 0x40
 800677e:	4b0c      	ldr	r3, [pc, #48]	; (80067b0 <HAL_RCC_OscConfig+0x2ac>)
 8006780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006786:	60bb      	str	r3, [r7, #8]
 8006788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800678a:	2301      	movs	r3, #1
 800678c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800678e:	4b0b      	ldr	r3, [pc, #44]	; (80067bc <HAL_RCC_OscConfig+0x2b8>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006796:	2b00      	cmp	r3, #0
 8006798:	d121      	bne.n	80067de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800679a:	4b08      	ldr	r3, [pc, #32]	; (80067bc <HAL_RCC_OscConfig+0x2b8>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a07      	ldr	r2, [pc, #28]	; (80067bc <HAL_RCC_OscConfig+0x2b8>)
 80067a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067a6:	f7fe f99b 	bl	8004ae0 <HAL_GetTick>
 80067aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067ac:	e011      	b.n	80067d2 <HAL_RCC_OscConfig+0x2ce>
 80067ae:	bf00      	nop
 80067b0:	40023800 	.word	0x40023800
 80067b4:	42470000 	.word	0x42470000
 80067b8:	42470e80 	.word	0x42470e80
 80067bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067c0:	f7fe f98e 	bl	8004ae0 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d901      	bls.n	80067d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e0fd      	b.n	80069ce <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067d2:	4b81      	ldr	r3, [pc, #516]	; (80069d8 <HAL_RCC_OscConfig+0x4d4>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d0f0      	beq.n	80067c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d106      	bne.n	80067f4 <HAL_RCC_OscConfig+0x2f0>
 80067e6:	4b7d      	ldr	r3, [pc, #500]	; (80069dc <HAL_RCC_OscConfig+0x4d8>)
 80067e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ea:	4a7c      	ldr	r2, [pc, #496]	; (80069dc <HAL_RCC_OscConfig+0x4d8>)
 80067ec:	f043 0301 	orr.w	r3, r3, #1
 80067f0:	6713      	str	r3, [r2, #112]	; 0x70
 80067f2:	e01c      	b.n	800682e <HAL_RCC_OscConfig+0x32a>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	2b05      	cmp	r3, #5
 80067fa:	d10c      	bne.n	8006816 <HAL_RCC_OscConfig+0x312>
 80067fc:	4b77      	ldr	r3, [pc, #476]	; (80069dc <HAL_RCC_OscConfig+0x4d8>)
 80067fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006800:	4a76      	ldr	r2, [pc, #472]	; (80069dc <HAL_RCC_OscConfig+0x4d8>)
 8006802:	f043 0304 	orr.w	r3, r3, #4
 8006806:	6713      	str	r3, [r2, #112]	; 0x70
 8006808:	4b74      	ldr	r3, [pc, #464]	; (80069dc <HAL_RCC_OscConfig+0x4d8>)
 800680a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800680c:	4a73      	ldr	r2, [pc, #460]	; (80069dc <HAL_RCC_OscConfig+0x4d8>)
 800680e:	f043 0301 	orr.w	r3, r3, #1
 8006812:	6713      	str	r3, [r2, #112]	; 0x70
 8006814:	e00b      	b.n	800682e <HAL_RCC_OscConfig+0x32a>
 8006816:	4b71      	ldr	r3, [pc, #452]	; (80069dc <HAL_RCC_OscConfig+0x4d8>)
 8006818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800681a:	4a70      	ldr	r2, [pc, #448]	; (80069dc <HAL_RCC_OscConfig+0x4d8>)
 800681c:	f023 0301 	bic.w	r3, r3, #1
 8006820:	6713      	str	r3, [r2, #112]	; 0x70
 8006822:	4b6e      	ldr	r3, [pc, #440]	; (80069dc <HAL_RCC_OscConfig+0x4d8>)
 8006824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006826:	4a6d      	ldr	r2, [pc, #436]	; (80069dc <HAL_RCC_OscConfig+0x4d8>)
 8006828:	f023 0304 	bic.w	r3, r3, #4
 800682c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d015      	beq.n	8006862 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006836:	f7fe f953 	bl	8004ae0 <HAL_GetTick>
 800683a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800683c:	e00a      	b.n	8006854 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800683e:	f7fe f94f 	bl	8004ae0 <HAL_GetTick>
 8006842:	4602      	mov	r2, r0
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	f241 3288 	movw	r2, #5000	; 0x1388
 800684c:	4293      	cmp	r3, r2
 800684e:	d901      	bls.n	8006854 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e0bc      	b.n	80069ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006854:	4b61      	ldr	r3, [pc, #388]	; (80069dc <HAL_RCC_OscConfig+0x4d8>)
 8006856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006858:	f003 0302 	and.w	r3, r3, #2
 800685c:	2b00      	cmp	r3, #0
 800685e:	d0ee      	beq.n	800683e <HAL_RCC_OscConfig+0x33a>
 8006860:	e014      	b.n	800688c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006862:	f7fe f93d 	bl	8004ae0 <HAL_GetTick>
 8006866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006868:	e00a      	b.n	8006880 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800686a:	f7fe f939 	bl	8004ae0 <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	f241 3288 	movw	r2, #5000	; 0x1388
 8006878:	4293      	cmp	r3, r2
 800687a:	d901      	bls.n	8006880 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e0a6      	b.n	80069ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006880:	4b56      	ldr	r3, [pc, #344]	; (80069dc <HAL_RCC_OscConfig+0x4d8>)
 8006882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006884:	f003 0302 	and.w	r3, r3, #2
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1ee      	bne.n	800686a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800688c:	7dfb      	ldrb	r3, [r7, #23]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d105      	bne.n	800689e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006892:	4b52      	ldr	r3, [pc, #328]	; (80069dc <HAL_RCC_OscConfig+0x4d8>)
 8006894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006896:	4a51      	ldr	r2, [pc, #324]	; (80069dc <HAL_RCC_OscConfig+0x4d8>)
 8006898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800689c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f000 8092 	beq.w	80069cc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068a8:	4b4c      	ldr	r3, [pc, #304]	; (80069dc <HAL_RCC_OscConfig+0x4d8>)
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f003 030c 	and.w	r3, r3, #12
 80068b0:	2b08      	cmp	r3, #8
 80068b2:	d05c      	beq.n	800696e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d141      	bne.n	8006940 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068bc:	4b48      	ldr	r3, [pc, #288]	; (80069e0 <HAL_RCC_OscConfig+0x4dc>)
 80068be:	2200      	movs	r2, #0
 80068c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068c2:	f7fe f90d 	bl	8004ae0 <HAL_GetTick>
 80068c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068c8:	e008      	b.n	80068dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068ca:	f7fe f909 	bl	8004ae0 <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d901      	bls.n	80068dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e078      	b.n	80069ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068dc:	4b3f      	ldr	r3, [pc, #252]	; (80069dc <HAL_RCC_OscConfig+0x4d8>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1f0      	bne.n	80068ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	69da      	ldr	r2, [r3, #28]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	431a      	orrs	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f6:	019b      	lsls	r3, r3, #6
 80068f8:	431a      	orrs	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fe:	085b      	lsrs	r3, r3, #1
 8006900:	3b01      	subs	r3, #1
 8006902:	041b      	lsls	r3, r3, #16
 8006904:	431a      	orrs	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690a:	061b      	lsls	r3, r3, #24
 800690c:	4933      	ldr	r1, [pc, #204]	; (80069dc <HAL_RCC_OscConfig+0x4d8>)
 800690e:	4313      	orrs	r3, r2
 8006910:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006912:	4b33      	ldr	r3, [pc, #204]	; (80069e0 <HAL_RCC_OscConfig+0x4dc>)
 8006914:	2201      	movs	r2, #1
 8006916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006918:	f7fe f8e2 	bl	8004ae0 <HAL_GetTick>
 800691c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800691e:	e008      	b.n	8006932 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006920:	f7fe f8de 	bl	8004ae0 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	2b02      	cmp	r3, #2
 800692c:	d901      	bls.n	8006932 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e04d      	b.n	80069ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006932:	4b2a      	ldr	r3, [pc, #168]	; (80069dc <HAL_RCC_OscConfig+0x4d8>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d0f0      	beq.n	8006920 <HAL_RCC_OscConfig+0x41c>
 800693e:	e045      	b.n	80069cc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006940:	4b27      	ldr	r3, [pc, #156]	; (80069e0 <HAL_RCC_OscConfig+0x4dc>)
 8006942:	2200      	movs	r2, #0
 8006944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006946:	f7fe f8cb 	bl	8004ae0 <HAL_GetTick>
 800694a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800694c:	e008      	b.n	8006960 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800694e:	f7fe f8c7 	bl	8004ae0 <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	2b02      	cmp	r3, #2
 800695a:	d901      	bls.n	8006960 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e036      	b.n	80069ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006960:	4b1e      	ldr	r3, [pc, #120]	; (80069dc <HAL_RCC_OscConfig+0x4d8>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1f0      	bne.n	800694e <HAL_RCC_OscConfig+0x44a>
 800696c:	e02e      	b.n	80069cc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	2b01      	cmp	r3, #1
 8006974:	d101      	bne.n	800697a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e029      	b.n	80069ce <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800697a:	4b18      	ldr	r3, [pc, #96]	; (80069dc <HAL_RCC_OscConfig+0x4d8>)
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	69db      	ldr	r3, [r3, #28]
 800698a:	429a      	cmp	r2, r3
 800698c:	d11c      	bne.n	80069c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006998:	429a      	cmp	r2, r3
 800699a:	d115      	bne.n	80069c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80069a2:	4013      	ands	r3, r2
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d10d      	bne.n	80069c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d106      	bne.n	80069c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d001      	beq.n	80069cc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e000      	b.n	80069ce <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3718      	adds	r7, #24
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	40007000 	.word	0x40007000
 80069dc:	40023800 	.word	0x40023800
 80069e0:	42470060 	.word	0x42470060

080069e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d101      	bne.n	80069f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e0cc      	b.n	8006b92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069f8:	4b68      	ldr	r3, [pc, #416]	; (8006b9c <HAL_RCC_ClockConfig+0x1b8>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 030f 	and.w	r3, r3, #15
 8006a00:	683a      	ldr	r2, [r7, #0]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d90c      	bls.n	8006a20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a06:	4b65      	ldr	r3, [pc, #404]	; (8006b9c <HAL_RCC_ClockConfig+0x1b8>)
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	b2d2      	uxtb	r2, r2
 8006a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a0e:	4b63      	ldr	r3, [pc, #396]	; (8006b9c <HAL_RCC_ClockConfig+0x1b8>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 030f 	and.w	r3, r3, #15
 8006a16:	683a      	ldr	r2, [r7, #0]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d001      	beq.n	8006a20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e0b8      	b.n	8006b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0302 	and.w	r3, r3, #2
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d020      	beq.n	8006a6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0304 	and.w	r3, r3, #4
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d005      	beq.n	8006a44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a38:	4b59      	ldr	r3, [pc, #356]	; (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	4a58      	ldr	r2, [pc, #352]	; (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006a42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0308 	and.w	r3, r3, #8
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d005      	beq.n	8006a5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a50:	4b53      	ldr	r3, [pc, #332]	; (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	4a52      	ldr	r2, [pc, #328]	; (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006a5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a5c:	4b50      	ldr	r3, [pc, #320]	; (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	494d      	ldr	r1, [pc, #308]	; (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d044      	beq.n	8006b04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d107      	bne.n	8006a92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a82:	4b47      	ldr	r3, [pc, #284]	; (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d119      	bne.n	8006ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e07f      	b.n	8006b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d003      	beq.n	8006aa2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	d107      	bne.n	8006ab2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006aa2:	4b3f      	ldr	r3, [pc, #252]	; (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d109      	bne.n	8006ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e06f      	b.n	8006b92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ab2:	4b3b      	ldr	r3, [pc, #236]	; (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0302 	and.w	r3, r3, #2
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e067      	b.n	8006b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ac2:	4b37      	ldr	r3, [pc, #220]	; (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f023 0203 	bic.w	r2, r3, #3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	4934      	ldr	r1, [pc, #208]	; (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ad4:	f7fe f804 	bl	8004ae0 <HAL_GetTick>
 8006ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ada:	e00a      	b.n	8006af2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006adc:	f7fe f800 	bl	8004ae0 <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d901      	bls.n	8006af2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e04f      	b.n	8006b92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006af2:	4b2b      	ldr	r3, [pc, #172]	; (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f003 020c 	and.w	r2, r3, #12
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d1eb      	bne.n	8006adc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b04:	4b25      	ldr	r3, [pc, #148]	; (8006b9c <HAL_RCC_ClockConfig+0x1b8>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 030f 	and.w	r3, r3, #15
 8006b0c:	683a      	ldr	r2, [r7, #0]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d20c      	bcs.n	8006b2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b12:	4b22      	ldr	r3, [pc, #136]	; (8006b9c <HAL_RCC_ClockConfig+0x1b8>)
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	b2d2      	uxtb	r2, r2
 8006b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b1a:	4b20      	ldr	r3, [pc, #128]	; (8006b9c <HAL_RCC_ClockConfig+0x1b8>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 030f 	and.w	r3, r3, #15
 8006b22:	683a      	ldr	r2, [r7, #0]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d001      	beq.n	8006b2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e032      	b.n	8006b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0304 	and.w	r3, r3, #4
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d008      	beq.n	8006b4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b38:	4b19      	ldr	r3, [pc, #100]	; (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	4916      	ldr	r1, [pc, #88]	; (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0308 	and.w	r3, r3, #8
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d009      	beq.n	8006b6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b56:	4b12      	ldr	r3, [pc, #72]	; (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	00db      	lsls	r3, r3, #3
 8006b64:	490e      	ldr	r1, [pc, #56]	; (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b6a:	f000 f821 	bl	8006bb0 <HAL_RCC_GetSysClockFreq>
 8006b6e:	4601      	mov	r1, r0
 8006b70:	4b0b      	ldr	r3, [pc, #44]	; (8006ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	091b      	lsrs	r3, r3, #4
 8006b76:	f003 030f 	and.w	r3, r3, #15
 8006b7a:	4a0a      	ldr	r2, [pc, #40]	; (8006ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8006b7c:	5cd3      	ldrb	r3, [r2, r3]
 8006b7e:	fa21 f303 	lsr.w	r3, r1, r3
 8006b82:	4a09      	ldr	r2, [pc, #36]	; (8006ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8006b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006b86:	4b09      	ldr	r3, [pc, #36]	; (8006bac <HAL_RCC_ClockConfig+0x1c8>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7fd ff64 	bl	8004a58 <HAL_InitTick>

  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	40023c00 	.word	0x40023c00
 8006ba0:	40023800 	.word	0x40023800
 8006ba4:	08009548 	.word	0x08009548
 8006ba8:	20000014 	.word	0x20000014
 8006bac:	20000018 	.word	0x20000018

08006bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	607b      	str	r3, [r7, #4]
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60fb      	str	r3, [r7, #12]
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bc6:	4b50      	ldr	r3, [pc, #320]	; (8006d08 <HAL_RCC_GetSysClockFreq+0x158>)
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f003 030c 	and.w	r3, r3, #12
 8006bce:	2b04      	cmp	r3, #4
 8006bd0:	d007      	beq.n	8006be2 <HAL_RCC_GetSysClockFreq+0x32>
 8006bd2:	2b08      	cmp	r3, #8
 8006bd4:	d008      	beq.n	8006be8 <HAL_RCC_GetSysClockFreq+0x38>
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f040 808d 	bne.w	8006cf6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006bdc:	4b4b      	ldr	r3, [pc, #300]	; (8006d0c <HAL_RCC_GetSysClockFreq+0x15c>)
 8006bde:	60bb      	str	r3, [r7, #8]
       break;
 8006be0:	e08c      	b.n	8006cfc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006be2:	4b4b      	ldr	r3, [pc, #300]	; (8006d10 <HAL_RCC_GetSysClockFreq+0x160>)
 8006be4:	60bb      	str	r3, [r7, #8]
      break;
 8006be6:	e089      	b.n	8006cfc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006be8:	4b47      	ldr	r3, [pc, #284]	; (8006d08 <HAL_RCC_GetSysClockFreq+0x158>)
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bf0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006bf2:	4b45      	ldr	r3, [pc, #276]	; (8006d08 <HAL_RCC_GetSysClockFreq+0x158>)
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d023      	beq.n	8006c46 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bfe:	4b42      	ldr	r3, [pc, #264]	; (8006d08 <HAL_RCC_GetSysClockFreq+0x158>)
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	099b      	lsrs	r3, r3, #6
 8006c04:	f04f 0400 	mov.w	r4, #0
 8006c08:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006c0c:	f04f 0200 	mov.w	r2, #0
 8006c10:	ea03 0501 	and.w	r5, r3, r1
 8006c14:	ea04 0602 	and.w	r6, r4, r2
 8006c18:	4a3d      	ldr	r2, [pc, #244]	; (8006d10 <HAL_RCC_GetSysClockFreq+0x160>)
 8006c1a:	fb02 f106 	mul.w	r1, r2, r6
 8006c1e:	2200      	movs	r2, #0
 8006c20:	fb02 f205 	mul.w	r2, r2, r5
 8006c24:	440a      	add	r2, r1
 8006c26:	493a      	ldr	r1, [pc, #232]	; (8006d10 <HAL_RCC_GetSysClockFreq+0x160>)
 8006c28:	fba5 0101 	umull	r0, r1, r5, r1
 8006c2c:	1853      	adds	r3, r2, r1
 8006c2e:	4619      	mov	r1, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f04f 0400 	mov.w	r4, #0
 8006c36:	461a      	mov	r2, r3
 8006c38:	4623      	mov	r3, r4
 8006c3a:	f7f9 ffbd 	bl	8000bb8 <__aeabi_uldivmod>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	460c      	mov	r4, r1
 8006c42:	60fb      	str	r3, [r7, #12]
 8006c44:	e049      	b.n	8006cda <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c46:	4b30      	ldr	r3, [pc, #192]	; (8006d08 <HAL_RCC_GetSysClockFreq+0x158>)
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	099b      	lsrs	r3, r3, #6
 8006c4c:	f04f 0400 	mov.w	r4, #0
 8006c50:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006c54:	f04f 0200 	mov.w	r2, #0
 8006c58:	ea03 0501 	and.w	r5, r3, r1
 8006c5c:	ea04 0602 	and.w	r6, r4, r2
 8006c60:	4629      	mov	r1, r5
 8006c62:	4632      	mov	r2, r6
 8006c64:	f04f 0300 	mov.w	r3, #0
 8006c68:	f04f 0400 	mov.w	r4, #0
 8006c6c:	0154      	lsls	r4, r2, #5
 8006c6e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006c72:	014b      	lsls	r3, r1, #5
 8006c74:	4619      	mov	r1, r3
 8006c76:	4622      	mov	r2, r4
 8006c78:	1b49      	subs	r1, r1, r5
 8006c7a:	eb62 0206 	sbc.w	r2, r2, r6
 8006c7e:	f04f 0300 	mov.w	r3, #0
 8006c82:	f04f 0400 	mov.w	r4, #0
 8006c86:	0194      	lsls	r4, r2, #6
 8006c88:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006c8c:	018b      	lsls	r3, r1, #6
 8006c8e:	1a5b      	subs	r3, r3, r1
 8006c90:	eb64 0402 	sbc.w	r4, r4, r2
 8006c94:	f04f 0100 	mov.w	r1, #0
 8006c98:	f04f 0200 	mov.w	r2, #0
 8006c9c:	00e2      	lsls	r2, r4, #3
 8006c9e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006ca2:	00d9      	lsls	r1, r3, #3
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	4614      	mov	r4, r2
 8006ca8:	195b      	adds	r3, r3, r5
 8006caa:	eb44 0406 	adc.w	r4, r4, r6
 8006cae:	f04f 0100 	mov.w	r1, #0
 8006cb2:	f04f 0200 	mov.w	r2, #0
 8006cb6:	02a2      	lsls	r2, r4, #10
 8006cb8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006cbc:	0299      	lsls	r1, r3, #10
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	4614      	mov	r4, r2
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	4621      	mov	r1, r4
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f04f 0400 	mov.w	r4, #0
 8006ccc:	461a      	mov	r2, r3
 8006cce:	4623      	mov	r3, r4
 8006cd0:	f7f9 ff72 	bl	8000bb8 <__aeabi_uldivmod>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	460c      	mov	r4, r1
 8006cd8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006cda:	4b0b      	ldr	r3, [pc, #44]	; (8006d08 <HAL_RCC_GetSysClockFreq+0x158>)
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	0c1b      	lsrs	r3, r3, #16
 8006ce0:	f003 0303 	and.w	r3, r3, #3
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	005b      	lsls	r3, r3, #1
 8006ce8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf2:	60bb      	str	r3, [r7, #8]
      break;
 8006cf4:	e002      	b.n	8006cfc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006cf6:	4b05      	ldr	r3, [pc, #20]	; (8006d0c <HAL_RCC_GetSysClockFreq+0x15c>)
 8006cf8:	60bb      	str	r3, [r7, #8]
      break;
 8006cfa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006cfc:	68bb      	ldr	r3, [r7, #8]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d06:	bf00      	nop
 8006d08:	40023800 	.word	0x40023800
 8006d0c:	00f42400 	.word	0x00f42400
 8006d10:	00b71b00 	.word	0x00b71b00

08006d14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d14:	b480      	push	{r7}
 8006d16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d18:	4b03      	ldr	r3, [pc, #12]	; (8006d28 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	20000014 	.word	0x20000014

08006d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d30:	f7ff fff0 	bl	8006d14 <HAL_RCC_GetHCLKFreq>
 8006d34:	4601      	mov	r1, r0
 8006d36:	4b05      	ldr	r3, [pc, #20]	; (8006d4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	0a9b      	lsrs	r3, r3, #10
 8006d3c:	f003 0307 	and.w	r3, r3, #7
 8006d40:	4a03      	ldr	r2, [pc, #12]	; (8006d50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d42:	5cd3      	ldrb	r3, [r2, r3]
 8006d44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	40023800 	.word	0x40023800
 8006d50:	08009558 	.word	0x08009558

08006d54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006d58:	f7ff ffdc 	bl	8006d14 <HAL_RCC_GetHCLKFreq>
 8006d5c:	4601      	mov	r1, r0
 8006d5e:	4b05      	ldr	r3, [pc, #20]	; (8006d74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	0b5b      	lsrs	r3, r3, #13
 8006d64:	f003 0307 	and.w	r3, r3, #7
 8006d68:	4a03      	ldr	r2, [pc, #12]	; (8006d78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d6a:	5cd3      	ldrb	r3, [r2, r3]
 8006d6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	40023800 	.word	0x40023800
 8006d78:	08009558 	.word	0x08009558

08006d7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e056      	b.n	8006e3c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d106      	bne.n	8006dae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f7fd fa61 	bl	8004270 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2202      	movs	r2, #2
 8006db2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dc4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	685a      	ldr	r2, [r3, #4]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	431a      	orrs	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	695b      	ldr	r3, [r3, #20]
 8006de0:	431a      	orrs	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dea:	431a      	orrs	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	69db      	ldr	r3, [r3, #28]
 8006df0:	431a      	orrs	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	ea42 0103 	orr.w	r1, r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	430a      	orrs	r2, r1
 8006e04:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	0c1b      	lsrs	r3, r3, #16
 8006e0c:	f003 0104 	and.w	r1, r3, #4
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	69da      	ldr	r2, [r3, #28]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b08c      	sub	sp, #48	; 0x30
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
 8006e50:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e52:	2301      	movs	r3, #1
 8006e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e56:	2300      	movs	r3, #0
 8006e58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d101      	bne.n	8006e6a <HAL_SPI_TransmitReceive+0x26>
 8006e66:	2302      	movs	r3, #2
 8006e68:	e18a      	b.n	8007180 <HAL_SPI_TransmitReceive+0x33c>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e72:	f7fd fe35 	bl	8004ae0 <HAL_GetTick>
 8006e76:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006e88:	887b      	ldrh	r3, [r7, #2]
 8006e8a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d00f      	beq.n	8006eb4 <HAL_SPI_TransmitReceive+0x70>
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e9a:	d107      	bne.n	8006eac <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d103      	bne.n	8006eac <HAL_SPI_TransmitReceive+0x68>
 8006ea4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ea8:	2b04      	cmp	r3, #4
 8006eaa:	d003      	beq.n	8006eb4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006eac:	2302      	movs	r3, #2
 8006eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006eb2:	e15b      	b.n	800716c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d005      	beq.n	8006ec6 <HAL_SPI_TransmitReceive+0x82>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d002      	beq.n	8006ec6 <HAL_SPI_TransmitReceive+0x82>
 8006ec0:	887b      	ldrh	r3, [r7, #2]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d103      	bne.n	8006ece <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006ecc:	e14e      	b.n	800716c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b04      	cmp	r3, #4
 8006ed8:	d003      	beq.n	8006ee2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2205      	movs	r2, #5
 8006ede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	887a      	ldrh	r2, [r7, #2]
 8006ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	887a      	ldrh	r2, [r7, #2]
 8006ef8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	887a      	ldrh	r2, [r7, #2]
 8006f04:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	887a      	ldrh	r2, [r7, #2]
 8006f0a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f22:	2b40      	cmp	r3, #64	; 0x40
 8006f24:	d007      	beq.n	8006f36 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f34:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f3e:	d178      	bne.n	8007032 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d002      	beq.n	8006f4e <HAL_SPI_TransmitReceive+0x10a>
 8006f48:	8b7b      	ldrh	r3, [r7, #26]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d166      	bne.n	800701c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f52:	881a      	ldrh	r2, [r3, #0]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5e:	1c9a      	adds	r2, r3, #2
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f72:	e053      	b.n	800701c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f003 0302 	and.w	r3, r3, #2
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d11b      	bne.n	8006fba <HAL_SPI_TransmitReceive+0x176>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d016      	beq.n	8006fba <HAL_SPI_TransmitReceive+0x176>
 8006f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d113      	bne.n	8006fba <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f96:	881a      	ldrh	r2, [r3, #0]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa2:	1c9a      	adds	r2, r3, #2
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d119      	bne.n	8006ffc <HAL_SPI_TransmitReceive+0x1b8>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d014      	beq.n	8006ffc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68da      	ldr	r2, [r3, #12]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fdc:	b292      	uxth	r2, r2
 8006fde:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe4:	1c9a      	adds	r2, r3, #2
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006ffc:	f7fd fd70 	bl	8004ae0 <HAL_GetTick>
 8007000:	4602      	mov	r2, r0
 8007002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007008:	429a      	cmp	r2, r3
 800700a:	d807      	bhi.n	800701c <HAL_SPI_TransmitReceive+0x1d8>
 800700c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007012:	d003      	beq.n	800701c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800701a:	e0a7      	b.n	800716c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007020:	b29b      	uxth	r3, r3
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1a6      	bne.n	8006f74 <HAL_SPI_TransmitReceive+0x130>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800702a:	b29b      	uxth	r3, r3
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1a1      	bne.n	8006f74 <HAL_SPI_TransmitReceive+0x130>
 8007030:	e07c      	b.n	800712c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d002      	beq.n	8007040 <HAL_SPI_TransmitReceive+0x1fc>
 800703a:	8b7b      	ldrh	r3, [r7, #26]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d16b      	bne.n	8007118 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	330c      	adds	r3, #12
 800704a:	7812      	ldrb	r2, [r2, #0]
 800704c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007052:	1c5a      	adds	r2, r3, #1
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800705c:	b29b      	uxth	r3, r3
 800705e:	3b01      	subs	r3, #1
 8007060:	b29a      	uxth	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007066:	e057      	b.n	8007118 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	f003 0302 	and.w	r3, r3, #2
 8007072:	2b02      	cmp	r3, #2
 8007074:	d11c      	bne.n	80070b0 <HAL_SPI_TransmitReceive+0x26c>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800707a:	b29b      	uxth	r3, r3
 800707c:	2b00      	cmp	r3, #0
 800707e:	d017      	beq.n	80070b0 <HAL_SPI_TransmitReceive+0x26c>
 8007080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007082:	2b01      	cmp	r3, #1
 8007084:	d114      	bne.n	80070b0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	330c      	adds	r3, #12
 8007090:	7812      	ldrb	r2, [r2, #0]
 8007092:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007098:	1c5a      	adds	r2, r3, #1
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	3b01      	subs	r3, #1
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070ac:	2300      	movs	r3, #0
 80070ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d119      	bne.n	80070f2 <HAL_SPI_TransmitReceive+0x2ae>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d014      	beq.n	80070f2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68da      	ldr	r2, [r3, #12]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d2:	b2d2      	uxtb	r2, r2
 80070d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070da:	1c5a      	adds	r2, r3, #1
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	3b01      	subs	r3, #1
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80070ee:	2301      	movs	r3, #1
 80070f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80070f2:	f7fd fcf5 	bl	8004ae0 <HAL_GetTick>
 80070f6:	4602      	mov	r2, r0
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070fe:	429a      	cmp	r2, r3
 8007100:	d803      	bhi.n	800710a <HAL_SPI_TransmitReceive+0x2c6>
 8007102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007108:	d102      	bne.n	8007110 <HAL_SPI_TransmitReceive+0x2cc>
 800710a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710c:	2b00      	cmp	r3, #0
 800710e:	d103      	bne.n	8007118 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007116:	e029      	b.n	800716c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800711c:	b29b      	uxth	r3, r3
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1a2      	bne.n	8007068 <HAL_SPI_TransmitReceive+0x224>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007126:	b29b      	uxth	r3, r3
 8007128:	2b00      	cmp	r3, #0
 800712a:	d19d      	bne.n	8007068 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800712c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800712e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f000 f893 	bl	800725c <SPI_EndRxTxTransaction>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d006      	beq.n	800714a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2220      	movs	r2, #32
 8007146:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007148:	e010      	b.n	800716c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10b      	bne.n	800716a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007152:	2300      	movs	r3, #0
 8007154:	617b      	str	r3, [r7, #20]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	617b      	str	r3, [r7, #20]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	617b      	str	r3, [r7, #20]
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	e000      	b.n	800716c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800716a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800717c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007180:	4618      	mov	r0, r3
 8007182:	3730      	adds	r7, #48	; 0x30
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	603b      	str	r3, [r7, #0]
 8007194:	4613      	mov	r3, r2
 8007196:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007198:	e04c      	b.n	8007234 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a0:	d048      	beq.n	8007234 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80071a2:	f7fd fc9d 	bl	8004ae0 <HAL_GetTick>
 80071a6:	4602      	mov	r2, r0
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d902      	bls.n	80071b8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d13d      	bne.n	8007234 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685a      	ldr	r2, [r3, #4]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80071c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071d0:	d111      	bne.n	80071f6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071da:	d004      	beq.n	80071e6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071e4:	d107      	bne.n	80071f6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071fe:	d10f      	bne.n	8007220 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800720e:	601a      	str	r2, [r3, #0]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800721e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e00f      	b.n	8007254 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689a      	ldr	r2, [r3, #8]
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	4013      	ands	r3, r2
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	429a      	cmp	r2, r3
 8007242:	bf0c      	ite	eq
 8007244:	2301      	moveq	r3, #1
 8007246:	2300      	movne	r3, #0
 8007248:	b2db      	uxtb	r3, r3
 800724a:	461a      	mov	r2, r3
 800724c:	79fb      	ldrb	r3, [r7, #7]
 800724e:	429a      	cmp	r2, r3
 8007250:	d1a3      	bne.n	800719a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b088      	sub	sp, #32
 8007260:	af02      	add	r7, sp, #8
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007268:	4b1b      	ldr	r3, [pc, #108]	; (80072d8 <SPI_EndRxTxTransaction+0x7c>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a1b      	ldr	r2, [pc, #108]	; (80072dc <SPI_EndRxTxTransaction+0x80>)
 800726e:	fba2 2303 	umull	r2, r3, r2, r3
 8007272:	0d5b      	lsrs	r3, r3, #21
 8007274:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007278:	fb02 f303 	mul.w	r3, r2, r3
 800727c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007286:	d112      	bne.n	80072ae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	9300      	str	r3, [sp, #0]
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	2200      	movs	r2, #0
 8007290:	2180      	movs	r1, #128	; 0x80
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f7ff ff78 	bl	8007188 <SPI_WaitFlagStateUntilTimeout>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d016      	beq.n	80072cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a2:	f043 0220 	orr.w	r2, r3, #32
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80072aa:	2303      	movs	r3, #3
 80072ac:	e00f      	b.n	80072ce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00a      	beq.n	80072ca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	3b01      	subs	r3, #1
 80072b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072c4:	2b80      	cmp	r3, #128	; 0x80
 80072c6:	d0f2      	beq.n	80072ae <SPI_EndRxTxTransaction+0x52>
 80072c8:	e000      	b.n	80072cc <SPI_EndRxTxTransaction+0x70>
        break;
 80072ca:	bf00      	nop
  }

  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3718      	adds	r7, #24
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	20000014 	.word	0x20000014
 80072dc:	165e9f81 	.word	0x165e9f81

080072e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d101      	bne.n	80072f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e01d      	b.n	800732e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d106      	bne.n	800730c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f7fc fffa 	bl	8004300 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2202      	movs	r2, #2
 8007310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	3304      	adds	r3, #4
 800731c:	4619      	mov	r1, r3
 800731e:	4610      	mov	r0, r2
 8007320:	f000 f90e 	bl	8007540 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
	...

08007338 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2201      	movs	r2, #1
 8007348:	6839      	ldr	r1, [r7, #0]
 800734a:	4618      	mov	r0, r3
 800734c:	f000 fb48 	bl	80079e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a15      	ldr	r2, [pc, #84]	; (80073ac <HAL_TIM_PWM_Start+0x74>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d004      	beq.n	8007364 <HAL_TIM_PWM_Start+0x2c>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a14      	ldr	r2, [pc, #80]	; (80073b0 <HAL_TIM_PWM_Start+0x78>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d101      	bne.n	8007368 <HAL_TIM_PWM_Start+0x30>
 8007364:	2301      	movs	r3, #1
 8007366:	e000      	b.n	800736a <HAL_TIM_PWM_Start+0x32>
 8007368:	2300      	movs	r3, #0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d007      	beq.n	800737e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800737c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	f003 0307 	and.w	r3, r3, #7
 8007388:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2b06      	cmp	r3, #6
 800738e:	d007      	beq.n	80073a0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f042 0201 	orr.w	r2, r2, #1
 800739e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	40010000 	.word	0x40010000
 80073b0:	40010400 	.word	0x40010400

080073b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d101      	bne.n	80073ce <HAL_TIM_PWM_ConfigChannel+0x1a>
 80073ca:	2302      	movs	r3, #2
 80073cc:	e0b4      	b.n	8007538 <HAL_TIM_PWM_ConfigChannel+0x184>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2201      	movs	r2, #1
 80073d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2202      	movs	r2, #2
 80073da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2b0c      	cmp	r3, #12
 80073e2:	f200 809f 	bhi.w	8007524 <HAL_TIM_PWM_ConfigChannel+0x170>
 80073e6:	a201      	add	r2, pc, #4	; (adr r2, 80073ec <HAL_TIM_PWM_ConfigChannel+0x38>)
 80073e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ec:	08007421 	.word	0x08007421
 80073f0:	08007525 	.word	0x08007525
 80073f4:	08007525 	.word	0x08007525
 80073f8:	08007525 	.word	0x08007525
 80073fc:	08007461 	.word	0x08007461
 8007400:	08007525 	.word	0x08007525
 8007404:	08007525 	.word	0x08007525
 8007408:	08007525 	.word	0x08007525
 800740c:	080074a3 	.word	0x080074a3
 8007410:	08007525 	.word	0x08007525
 8007414:	08007525 	.word	0x08007525
 8007418:	08007525 	.word	0x08007525
 800741c:	080074e3 	.word	0x080074e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68b9      	ldr	r1, [r7, #8]
 8007426:	4618      	mov	r0, r3
 8007428:	f000 f92a 	bl	8007680 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	699a      	ldr	r2, [r3, #24]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f042 0208 	orr.w	r2, r2, #8
 800743a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	699a      	ldr	r2, [r3, #24]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f022 0204 	bic.w	r2, r2, #4
 800744a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	6999      	ldr	r1, [r3, #24]
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	691a      	ldr	r2, [r3, #16]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	430a      	orrs	r2, r1
 800745c:	619a      	str	r2, [r3, #24]
      break;
 800745e:	e062      	b.n	8007526 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68b9      	ldr	r1, [r7, #8]
 8007466:	4618      	mov	r0, r3
 8007468:	f000 f97a 	bl	8007760 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	699a      	ldr	r2, [r3, #24]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800747a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	699a      	ldr	r2, [r3, #24]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800748a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6999      	ldr	r1, [r3, #24]
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	021a      	lsls	r2, r3, #8
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	430a      	orrs	r2, r1
 800749e:	619a      	str	r2, [r3, #24]
      break;
 80074a0:	e041      	b.n	8007526 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68b9      	ldr	r1, [r7, #8]
 80074a8:	4618      	mov	r0, r3
 80074aa:	f000 f9cf 	bl	800784c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	69da      	ldr	r2, [r3, #28]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f042 0208 	orr.w	r2, r2, #8
 80074bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	69da      	ldr	r2, [r3, #28]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f022 0204 	bic.w	r2, r2, #4
 80074cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	69d9      	ldr	r1, [r3, #28]
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	691a      	ldr	r2, [r3, #16]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	430a      	orrs	r2, r1
 80074de:	61da      	str	r2, [r3, #28]
      break;
 80074e0:	e021      	b.n	8007526 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68b9      	ldr	r1, [r7, #8]
 80074e8:	4618      	mov	r0, r3
 80074ea:	f000 fa23 	bl	8007934 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	69da      	ldr	r2, [r3, #28]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	69da      	ldr	r2, [r3, #28]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800750c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	69d9      	ldr	r1, [r3, #28]
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	021a      	lsls	r2, r3, #8
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	430a      	orrs	r2, r1
 8007520:	61da      	str	r2, [r3, #28]
      break;
 8007522:	e000      	b.n	8007526 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007524:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007540:	b480      	push	{r7}
 8007542:	b085      	sub	sp, #20
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a40      	ldr	r2, [pc, #256]	; (8007654 <TIM_Base_SetConfig+0x114>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d013      	beq.n	8007580 <TIM_Base_SetConfig+0x40>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800755e:	d00f      	beq.n	8007580 <TIM_Base_SetConfig+0x40>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a3d      	ldr	r2, [pc, #244]	; (8007658 <TIM_Base_SetConfig+0x118>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d00b      	beq.n	8007580 <TIM_Base_SetConfig+0x40>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a3c      	ldr	r2, [pc, #240]	; (800765c <TIM_Base_SetConfig+0x11c>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d007      	beq.n	8007580 <TIM_Base_SetConfig+0x40>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a3b      	ldr	r2, [pc, #236]	; (8007660 <TIM_Base_SetConfig+0x120>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d003      	beq.n	8007580 <TIM_Base_SetConfig+0x40>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a3a      	ldr	r2, [pc, #232]	; (8007664 <TIM_Base_SetConfig+0x124>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d108      	bne.n	8007592 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007586:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	4313      	orrs	r3, r2
 8007590:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a2f      	ldr	r2, [pc, #188]	; (8007654 <TIM_Base_SetConfig+0x114>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d02b      	beq.n	80075f2 <TIM_Base_SetConfig+0xb2>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075a0:	d027      	beq.n	80075f2 <TIM_Base_SetConfig+0xb2>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a2c      	ldr	r2, [pc, #176]	; (8007658 <TIM_Base_SetConfig+0x118>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d023      	beq.n	80075f2 <TIM_Base_SetConfig+0xb2>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a2b      	ldr	r2, [pc, #172]	; (800765c <TIM_Base_SetConfig+0x11c>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d01f      	beq.n	80075f2 <TIM_Base_SetConfig+0xb2>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a2a      	ldr	r2, [pc, #168]	; (8007660 <TIM_Base_SetConfig+0x120>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d01b      	beq.n	80075f2 <TIM_Base_SetConfig+0xb2>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a29      	ldr	r2, [pc, #164]	; (8007664 <TIM_Base_SetConfig+0x124>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d017      	beq.n	80075f2 <TIM_Base_SetConfig+0xb2>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a28      	ldr	r2, [pc, #160]	; (8007668 <TIM_Base_SetConfig+0x128>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d013      	beq.n	80075f2 <TIM_Base_SetConfig+0xb2>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a27      	ldr	r2, [pc, #156]	; (800766c <TIM_Base_SetConfig+0x12c>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d00f      	beq.n	80075f2 <TIM_Base_SetConfig+0xb2>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a26      	ldr	r2, [pc, #152]	; (8007670 <TIM_Base_SetConfig+0x130>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d00b      	beq.n	80075f2 <TIM_Base_SetConfig+0xb2>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a25      	ldr	r2, [pc, #148]	; (8007674 <TIM_Base_SetConfig+0x134>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d007      	beq.n	80075f2 <TIM_Base_SetConfig+0xb2>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a24      	ldr	r2, [pc, #144]	; (8007678 <TIM_Base_SetConfig+0x138>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d003      	beq.n	80075f2 <TIM_Base_SetConfig+0xb2>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a23      	ldr	r2, [pc, #140]	; (800767c <TIM_Base_SetConfig+0x13c>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d108      	bne.n	8007604 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	4313      	orrs	r3, r2
 8007602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	695b      	ldr	r3, [r3, #20]
 800760e:	4313      	orrs	r3, r2
 8007610:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	689a      	ldr	r2, [r3, #8]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a0a      	ldr	r2, [pc, #40]	; (8007654 <TIM_Base_SetConfig+0x114>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d003      	beq.n	8007638 <TIM_Base_SetConfig+0xf8>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a0c      	ldr	r2, [pc, #48]	; (8007664 <TIM_Base_SetConfig+0x124>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d103      	bne.n	8007640 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	691a      	ldr	r2, [r3, #16]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	615a      	str	r2, [r3, #20]
}
 8007646:	bf00      	nop
 8007648:	3714      	adds	r7, #20
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	40010000 	.word	0x40010000
 8007658:	40000400 	.word	0x40000400
 800765c:	40000800 	.word	0x40000800
 8007660:	40000c00 	.word	0x40000c00
 8007664:	40010400 	.word	0x40010400
 8007668:	40014000 	.word	0x40014000
 800766c:	40014400 	.word	0x40014400
 8007670:	40014800 	.word	0x40014800
 8007674:	40001800 	.word	0x40001800
 8007678:	40001c00 	.word	0x40001c00
 800767c:	40002000 	.word	0x40002000

08007680 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007680:	b480      	push	{r7}
 8007682:	b087      	sub	sp, #28
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a1b      	ldr	r3, [r3, #32]
 800768e:	f023 0201 	bic.w	r2, r3, #1
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f023 0303 	bic.w	r3, r3, #3
 80076b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	4313      	orrs	r3, r2
 80076c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	f023 0302 	bic.w	r3, r3, #2
 80076c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a20      	ldr	r2, [pc, #128]	; (8007758 <TIM_OC1_SetConfig+0xd8>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d003      	beq.n	80076e4 <TIM_OC1_SetConfig+0x64>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a1f      	ldr	r2, [pc, #124]	; (800775c <TIM_OC1_SetConfig+0xdc>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d10c      	bne.n	80076fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	f023 0308 	bic.w	r3, r3, #8
 80076ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	697a      	ldr	r2, [r7, #20]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	f023 0304 	bic.w	r3, r3, #4
 80076fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a15      	ldr	r2, [pc, #84]	; (8007758 <TIM_OC1_SetConfig+0xd8>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d003      	beq.n	800770e <TIM_OC1_SetConfig+0x8e>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a14      	ldr	r2, [pc, #80]	; (800775c <TIM_OC1_SetConfig+0xdc>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d111      	bne.n	8007732 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800771c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	4313      	orrs	r3, r2
 8007726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	693a      	ldr	r2, [r7, #16]
 800772e:	4313      	orrs	r3, r2
 8007730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	685a      	ldr	r2, [r3, #4]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	697a      	ldr	r2, [r7, #20]
 800774a:	621a      	str	r2, [r3, #32]
}
 800774c:	bf00      	nop
 800774e:	371c      	adds	r7, #28
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr
 8007758:	40010000 	.word	0x40010000
 800775c:	40010400 	.word	0x40010400

08007760 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007760:	b480      	push	{r7}
 8007762:	b087      	sub	sp, #28
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a1b      	ldr	r3, [r3, #32]
 800776e:	f023 0210 	bic.w	r2, r3, #16
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	699b      	ldr	r3, [r3, #24]
 8007786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800778e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007796:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	021b      	lsls	r3, r3, #8
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	f023 0320 	bic.w	r3, r3, #32
 80077aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	011b      	lsls	r3, r3, #4
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a22      	ldr	r2, [pc, #136]	; (8007844 <TIM_OC2_SetConfig+0xe4>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d003      	beq.n	80077c8 <TIM_OC2_SetConfig+0x68>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a21      	ldr	r2, [pc, #132]	; (8007848 <TIM_OC2_SetConfig+0xe8>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d10d      	bne.n	80077e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	011b      	lsls	r3, r3, #4
 80077d6:	697a      	ldr	r2, [r7, #20]
 80077d8:	4313      	orrs	r3, r2
 80077da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a17      	ldr	r2, [pc, #92]	; (8007844 <TIM_OC2_SetConfig+0xe4>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d003      	beq.n	80077f4 <TIM_OC2_SetConfig+0x94>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a16      	ldr	r2, [pc, #88]	; (8007848 <TIM_OC2_SetConfig+0xe8>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d113      	bne.n	800781c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007802:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	695b      	ldr	r3, [r3, #20]
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	693a      	ldr	r2, [r7, #16]
 800780c:	4313      	orrs	r3, r2
 800780e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	693a      	ldr	r2, [r7, #16]
 8007818:	4313      	orrs	r3, r2
 800781a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	685a      	ldr	r2, [r3, #4]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	621a      	str	r2, [r3, #32]
}
 8007836:	bf00      	nop
 8007838:	371c      	adds	r7, #28
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	40010000 	.word	0x40010000
 8007848:	40010400 	.word	0x40010400

0800784c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800784c:	b480      	push	{r7}
 800784e:	b087      	sub	sp, #28
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a1b      	ldr	r3, [r3, #32]
 800785a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a1b      	ldr	r3, [r3, #32]
 8007866:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	69db      	ldr	r3, [r3, #28]
 8007872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800787a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f023 0303 	bic.w	r3, r3, #3
 8007882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	4313      	orrs	r3, r2
 800788c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007894:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	021b      	lsls	r3, r3, #8
 800789c:	697a      	ldr	r2, [r7, #20]
 800789e:	4313      	orrs	r3, r2
 80078a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a21      	ldr	r2, [pc, #132]	; (800792c <TIM_OC3_SetConfig+0xe0>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d003      	beq.n	80078b2 <TIM_OC3_SetConfig+0x66>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a20      	ldr	r2, [pc, #128]	; (8007930 <TIM_OC3_SetConfig+0xe4>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d10d      	bne.n	80078ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	021b      	lsls	r3, r3, #8
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a16      	ldr	r2, [pc, #88]	; (800792c <TIM_OC3_SetConfig+0xe0>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d003      	beq.n	80078de <TIM_OC3_SetConfig+0x92>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a15      	ldr	r2, [pc, #84]	; (8007930 <TIM_OC3_SetConfig+0xe4>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d113      	bne.n	8007906 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	011b      	lsls	r3, r3, #4
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	011b      	lsls	r3, r3, #4
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	4313      	orrs	r3, r2
 8007904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	685a      	ldr	r2, [r3, #4]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	621a      	str	r2, [r3, #32]
}
 8007920:	bf00      	nop
 8007922:	371c      	adds	r7, #28
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	40010000 	.word	0x40010000
 8007930:	40010400 	.word	0x40010400

08007934 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007934:	b480      	push	{r7}
 8007936:	b087      	sub	sp, #28
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	69db      	ldr	r3, [r3, #28]
 800795a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800796a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	021b      	lsls	r3, r3, #8
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	4313      	orrs	r3, r2
 8007976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800797e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	031b      	lsls	r3, r3, #12
 8007986:	693a      	ldr	r2, [r7, #16]
 8007988:	4313      	orrs	r3, r2
 800798a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a12      	ldr	r2, [pc, #72]	; (80079d8 <TIM_OC4_SetConfig+0xa4>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d003      	beq.n	800799c <TIM_OC4_SetConfig+0x68>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4a11      	ldr	r2, [pc, #68]	; (80079dc <TIM_OC4_SetConfig+0xa8>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d109      	bne.n	80079b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	695b      	ldr	r3, [r3, #20]
 80079a8:	019b      	lsls	r3, r3, #6
 80079aa:	697a      	ldr	r2, [r7, #20]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	693a      	ldr	r2, [r7, #16]
 80079c8:	621a      	str	r2, [r3, #32]
}
 80079ca:	bf00      	nop
 80079cc:	371c      	adds	r7, #28
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	40010000 	.word	0x40010000
 80079dc:	40010400 	.word	0x40010400

080079e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b087      	sub	sp, #28
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	f003 031f 	and.w	r3, r3, #31
 80079f2:	2201      	movs	r2, #1
 80079f4:	fa02 f303 	lsl.w	r3, r2, r3
 80079f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6a1a      	ldr	r2, [r3, #32]
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	43db      	mvns	r3, r3
 8007a02:	401a      	ands	r2, r3
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6a1a      	ldr	r2, [r3, #32]
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	f003 031f 	and.w	r3, r3, #31
 8007a12:	6879      	ldr	r1, [r7, #4]
 8007a14:	fa01 f303 	lsl.w	r3, r1, r3
 8007a18:	431a      	orrs	r2, r3
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	621a      	str	r2, [r3, #32]
}
 8007a1e:	bf00      	nop
 8007a20:	371c      	adds	r7, #28
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
	...

08007a2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d101      	bne.n	8007a44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a40:	2302      	movs	r3, #2
 8007a42:	e05a      	b.n	8007afa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2202      	movs	r2, #2
 8007a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a21      	ldr	r2, [pc, #132]	; (8007b08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d022      	beq.n	8007ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a90:	d01d      	beq.n	8007ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a1d      	ldr	r2, [pc, #116]	; (8007b0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d018      	beq.n	8007ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a1b      	ldr	r2, [pc, #108]	; (8007b10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d013      	beq.n	8007ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a1a      	ldr	r2, [pc, #104]	; (8007b14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d00e      	beq.n	8007ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a18      	ldr	r2, [pc, #96]	; (8007b18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d009      	beq.n	8007ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a17      	ldr	r2, [pc, #92]	; (8007b1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d004      	beq.n	8007ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a15      	ldr	r2, [pc, #84]	; (8007b20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d10c      	bne.n	8007ae8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ad4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3714      	adds	r7, #20
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	40010000 	.word	0x40010000
 8007b0c:	40000400 	.word	0x40000400
 8007b10:	40000800 	.word	0x40000800
 8007b14:	40000c00 	.word	0x40000c00
 8007b18:	40010400 	.word	0x40010400
 8007b1c:	40014000 	.word	0x40014000
 8007b20:	40001800 	.word	0x40001800

08007b24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d101      	bne.n	8007b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e03f      	b.n	8007bb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d106      	bne.n	8007b50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7fc fd28 	bl	80045a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2224      	movs	r2, #36	; 0x24
 8007b54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68da      	ldr	r2, [r3, #12]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 fa69 	bl	8008040 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	691a      	ldr	r2, [r3, #16]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	695a      	ldr	r2, [r3, #20]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68da      	ldr	r2, [r3, #12]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2220      	movs	r2, #32
 8007ba8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2220      	movs	r2, #32
 8007bb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
	...

08007bc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b088      	sub	sp, #32
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007be0:	2300      	movs	r3, #0
 8007be2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007be4:	2300      	movs	r3, #0
 8007be6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	f003 030f 	and.w	r3, r3, #15
 8007bee:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d10d      	bne.n	8007c12 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	f003 0320 	and.w	r3, r3, #32
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d008      	beq.n	8007c12 <HAL_UART_IRQHandler+0x52>
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	f003 0320 	and.w	r3, r3, #32
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d003      	beq.n	8007c12 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 f996 	bl	8007f3c <UART_Receive_IT>
      return;
 8007c10:	e0d1      	b.n	8007db6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 80b0 	beq.w	8007d7a <HAL_UART_IRQHandler+0x1ba>
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f003 0301 	and.w	r3, r3, #1
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d105      	bne.n	8007c30 <HAL_UART_IRQHandler+0x70>
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f000 80a5 	beq.w	8007d7a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	f003 0301 	and.w	r3, r3, #1
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00a      	beq.n	8007c50 <HAL_UART_IRQHandler+0x90>
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d005      	beq.n	8007c50 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c48:	f043 0201 	orr.w	r2, r3, #1
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	f003 0304 	and.w	r3, r3, #4
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00a      	beq.n	8007c70 <HAL_UART_IRQHandler+0xb0>
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	f003 0301 	and.w	r3, r3, #1
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d005      	beq.n	8007c70 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c68:	f043 0202 	orr.w	r2, r3, #2
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	f003 0302 	and.w	r3, r3, #2
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00a      	beq.n	8007c90 <HAL_UART_IRQHandler+0xd0>
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	f003 0301 	and.w	r3, r3, #1
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d005      	beq.n	8007c90 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c88:	f043 0204 	orr.w	r2, r3, #4
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	f003 0308 	and.w	r3, r3, #8
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00f      	beq.n	8007cba <HAL_UART_IRQHandler+0xfa>
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	f003 0320 	and.w	r3, r3, #32
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d104      	bne.n	8007cae <HAL_UART_IRQHandler+0xee>
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	f003 0301 	and.w	r3, r3, #1
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d005      	beq.n	8007cba <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cb2:	f043 0208 	orr.w	r2, r3, #8
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d078      	beq.n	8007db4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	f003 0320 	and.w	r3, r3, #32
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d007      	beq.n	8007cdc <HAL_UART_IRQHandler+0x11c>
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	f003 0320 	and.w	r3, r3, #32
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d002      	beq.n	8007cdc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 f930 	bl	8007f3c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce6:	2b40      	cmp	r3, #64	; 0x40
 8007ce8:	bf0c      	ite	eq
 8007cea:	2301      	moveq	r3, #1
 8007cec:	2300      	movne	r3, #0
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cf6:	f003 0308 	and.w	r3, r3, #8
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d102      	bne.n	8007d04 <HAL_UART_IRQHandler+0x144>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d031      	beq.n	8007d68 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 f879 	bl	8007dfc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	695b      	ldr	r3, [r3, #20]
 8007d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d14:	2b40      	cmp	r3, #64	; 0x40
 8007d16:	d123      	bne.n	8007d60 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	695a      	ldr	r2, [r3, #20]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d26:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d013      	beq.n	8007d58 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d34:	4a21      	ldr	r2, [pc, #132]	; (8007dbc <HAL_UART_IRQHandler+0x1fc>)
 8007d36:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7fd ff78 	bl	8005c32 <HAL_DMA_Abort_IT>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d016      	beq.n	8007d76 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007d52:	4610      	mov	r0, r2
 8007d54:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d56:	e00e      	b.n	8007d76 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f845 	bl	8007de8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d5e:	e00a      	b.n	8007d76 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f841 	bl	8007de8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d66:	e006      	b.n	8007d76 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 f83d 	bl	8007de8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007d74:	e01e      	b.n	8007db4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d76:	bf00      	nop
    return;
 8007d78:	e01c      	b.n	8007db4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d008      	beq.n	8007d96 <HAL_UART_IRQHandler+0x1d6>
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d003      	beq.n	8007d96 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f866 	bl	8007e60 <UART_Transmit_IT>
    return;
 8007d94:	e00f      	b.n	8007db6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00a      	beq.n	8007db6 <HAL_UART_IRQHandler+0x1f6>
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d005      	beq.n	8007db6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f8ae 	bl	8007f0c <UART_EndTransmit_IT>
    return;
 8007db0:	bf00      	nop
 8007db2:	e000      	b.n	8007db6 <HAL_UART_IRQHandler+0x1f6>
    return;
 8007db4:	bf00      	nop
  }
}
 8007db6:	3720      	adds	r7, #32
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	08007e39 	.word	0x08007e39

08007dc0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007dc8:	bf00      	nop
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68da      	ldr	r2, [r3, #12]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007e12:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	695a      	ldr	r2, [r3, #20]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f022 0201 	bic.w	r2, r2, #1
 8007e22:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2220      	movs	r2, #32
 8007e28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007e2c:	bf00      	nop
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f7ff ffc8 	bl	8007de8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e58:	bf00      	nop
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	2b21      	cmp	r3, #33	; 0x21
 8007e72:	d144      	bne.n	8007efe <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e7c:	d11a      	bne.n	8007eb4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a1b      	ldr	r3, [r3, #32]
 8007e82:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	881b      	ldrh	r3, [r3, #0]
 8007e88:	461a      	mov	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e92:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d105      	bne.n	8007ea8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a1b      	ldr	r3, [r3, #32]
 8007ea0:	1c9a      	adds	r2, r3, #2
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	621a      	str	r2, [r3, #32]
 8007ea6:	e00e      	b.n	8007ec6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a1b      	ldr	r3, [r3, #32]
 8007eac:	1c5a      	adds	r2, r3, #1
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	621a      	str	r2, [r3, #32]
 8007eb2:	e008      	b.n	8007ec6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a1b      	ldr	r3, [r3, #32]
 8007eb8:	1c59      	adds	r1, r3, #1
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	6211      	str	r1, [r2, #32]
 8007ebe:	781a      	ldrb	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10f      	bne.n	8007efa <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68da      	ldr	r2, [r3, #12]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ee8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68da      	ldr	r2, [r3, #12]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ef8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007efa:	2300      	movs	r3, #0
 8007efc:	e000      	b.n	8007f00 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007efe:	2302      	movs	r3, #2
  }
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3714      	adds	r7, #20
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68da      	ldr	r2, [r3, #12]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f22:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2220      	movs	r2, #32
 8007f28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7ff ff47 	bl	8007dc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	2b22      	cmp	r3, #34	; 0x22
 8007f4e:	d171      	bne.n	8008034 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f58:	d123      	bne.n	8007fa2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f5e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d10e      	bne.n	8007f86 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f7e:	1c9a      	adds	r2, r3, #2
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	629a      	str	r2, [r3, #40]	; 0x28
 8007f84:	e029      	b.n	8007fda <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9a:	1c5a      	adds	r2, r3, #1
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	629a      	str	r2, [r3, #40]	; 0x28
 8007fa0:	e01b      	b.n	8007fda <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10a      	bne.n	8007fc0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	6858      	ldr	r0, [r3, #4]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb4:	1c59      	adds	r1, r3, #1
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	6291      	str	r1, [r2, #40]	; 0x28
 8007fba:	b2c2      	uxtb	r2, r0
 8007fbc:	701a      	strb	r2, [r3, #0]
 8007fbe:	e00c      	b.n	8007fda <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	b2da      	uxtb	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fcc:	1c58      	adds	r0, r3, #1
 8007fce:	6879      	ldr	r1, [r7, #4]
 8007fd0:	6288      	str	r0, [r1, #40]	; 0x28
 8007fd2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007fd6:	b2d2      	uxtb	r2, r2
 8007fd8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d120      	bne.n	8008030 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68da      	ldr	r2, [r3, #12]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f022 0220 	bic.w	r2, r2, #32
 8007ffc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68da      	ldr	r2, [r3, #12]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800800c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	695a      	ldr	r2, [r3, #20]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f022 0201 	bic.w	r2, r2, #1
 800801c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2220      	movs	r2, #32
 8008022:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f7ff fed4 	bl	8007dd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800802c:	2300      	movs	r3, #0
 800802e:	e002      	b.n	8008036 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008030:	2300      	movs	r3, #0
 8008032:	e000      	b.n	8008036 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008034:	2302      	movs	r3, #2
  }
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
	...

08008040 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008044:	b085      	sub	sp, #20
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	68da      	ldr	r2, [r3, #12]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	430a      	orrs	r2, r1
 800805e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	689a      	ldr	r2, [r3, #8]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	431a      	orrs	r2, r3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	431a      	orrs	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	69db      	ldr	r3, [r3, #28]
 8008074:	4313      	orrs	r3, r2
 8008076:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008082:	f023 030c 	bic.w	r3, r3, #12
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	6812      	ldr	r2, [r2, #0]
 800808a:	68f9      	ldr	r1, [r7, #12]
 800808c:	430b      	orrs	r3, r1
 800808e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	695b      	ldr	r3, [r3, #20]
 8008096:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	699a      	ldr	r2, [r3, #24]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	430a      	orrs	r2, r1
 80080a4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080ae:	f040 818b 	bne.w	80083c8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4ac1      	ldr	r2, [pc, #772]	; (80083bc <UART_SetConfig+0x37c>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d005      	beq.n	80080c8 <UART_SetConfig+0x88>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4abf      	ldr	r2, [pc, #764]	; (80083c0 <UART_SetConfig+0x380>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	f040 80bd 	bne.w	8008242 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80080c8:	f7fe fe44 	bl	8006d54 <HAL_RCC_GetPCLK2Freq>
 80080cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	461d      	mov	r5, r3
 80080d2:	f04f 0600 	mov.w	r6, #0
 80080d6:	46a8      	mov	r8, r5
 80080d8:	46b1      	mov	r9, r6
 80080da:	eb18 0308 	adds.w	r3, r8, r8
 80080de:	eb49 0409 	adc.w	r4, r9, r9
 80080e2:	4698      	mov	r8, r3
 80080e4:	46a1      	mov	r9, r4
 80080e6:	eb18 0805 	adds.w	r8, r8, r5
 80080ea:	eb49 0906 	adc.w	r9, r9, r6
 80080ee:	f04f 0100 	mov.w	r1, #0
 80080f2:	f04f 0200 	mov.w	r2, #0
 80080f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80080fa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80080fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008102:	4688      	mov	r8, r1
 8008104:	4691      	mov	r9, r2
 8008106:	eb18 0005 	adds.w	r0, r8, r5
 800810a:	eb49 0106 	adc.w	r1, r9, r6
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	461d      	mov	r5, r3
 8008114:	f04f 0600 	mov.w	r6, #0
 8008118:	196b      	adds	r3, r5, r5
 800811a:	eb46 0406 	adc.w	r4, r6, r6
 800811e:	461a      	mov	r2, r3
 8008120:	4623      	mov	r3, r4
 8008122:	f7f8 fd49 	bl	8000bb8 <__aeabi_uldivmod>
 8008126:	4603      	mov	r3, r0
 8008128:	460c      	mov	r4, r1
 800812a:	461a      	mov	r2, r3
 800812c:	4ba5      	ldr	r3, [pc, #660]	; (80083c4 <UART_SetConfig+0x384>)
 800812e:	fba3 2302 	umull	r2, r3, r3, r2
 8008132:	095b      	lsrs	r3, r3, #5
 8008134:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	461d      	mov	r5, r3
 800813c:	f04f 0600 	mov.w	r6, #0
 8008140:	46a9      	mov	r9, r5
 8008142:	46b2      	mov	sl, r6
 8008144:	eb19 0309 	adds.w	r3, r9, r9
 8008148:	eb4a 040a 	adc.w	r4, sl, sl
 800814c:	4699      	mov	r9, r3
 800814e:	46a2      	mov	sl, r4
 8008150:	eb19 0905 	adds.w	r9, r9, r5
 8008154:	eb4a 0a06 	adc.w	sl, sl, r6
 8008158:	f04f 0100 	mov.w	r1, #0
 800815c:	f04f 0200 	mov.w	r2, #0
 8008160:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008164:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008168:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800816c:	4689      	mov	r9, r1
 800816e:	4692      	mov	sl, r2
 8008170:	eb19 0005 	adds.w	r0, r9, r5
 8008174:	eb4a 0106 	adc.w	r1, sl, r6
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	461d      	mov	r5, r3
 800817e:	f04f 0600 	mov.w	r6, #0
 8008182:	196b      	adds	r3, r5, r5
 8008184:	eb46 0406 	adc.w	r4, r6, r6
 8008188:	461a      	mov	r2, r3
 800818a:	4623      	mov	r3, r4
 800818c:	f7f8 fd14 	bl	8000bb8 <__aeabi_uldivmod>
 8008190:	4603      	mov	r3, r0
 8008192:	460c      	mov	r4, r1
 8008194:	461a      	mov	r2, r3
 8008196:	4b8b      	ldr	r3, [pc, #556]	; (80083c4 <UART_SetConfig+0x384>)
 8008198:	fba3 1302 	umull	r1, r3, r3, r2
 800819c:	095b      	lsrs	r3, r3, #5
 800819e:	2164      	movs	r1, #100	; 0x64
 80081a0:	fb01 f303 	mul.w	r3, r1, r3
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	00db      	lsls	r3, r3, #3
 80081a8:	3332      	adds	r3, #50	; 0x32
 80081aa:	4a86      	ldr	r2, [pc, #536]	; (80083c4 <UART_SetConfig+0x384>)
 80081ac:	fba2 2303 	umull	r2, r3, r2, r3
 80081b0:	095b      	lsrs	r3, r3, #5
 80081b2:	005b      	lsls	r3, r3, #1
 80081b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80081b8:	4498      	add	r8, r3
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	461d      	mov	r5, r3
 80081be:	f04f 0600 	mov.w	r6, #0
 80081c2:	46a9      	mov	r9, r5
 80081c4:	46b2      	mov	sl, r6
 80081c6:	eb19 0309 	adds.w	r3, r9, r9
 80081ca:	eb4a 040a 	adc.w	r4, sl, sl
 80081ce:	4699      	mov	r9, r3
 80081d0:	46a2      	mov	sl, r4
 80081d2:	eb19 0905 	adds.w	r9, r9, r5
 80081d6:	eb4a 0a06 	adc.w	sl, sl, r6
 80081da:	f04f 0100 	mov.w	r1, #0
 80081de:	f04f 0200 	mov.w	r2, #0
 80081e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80081e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80081ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80081ee:	4689      	mov	r9, r1
 80081f0:	4692      	mov	sl, r2
 80081f2:	eb19 0005 	adds.w	r0, r9, r5
 80081f6:	eb4a 0106 	adc.w	r1, sl, r6
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	461d      	mov	r5, r3
 8008200:	f04f 0600 	mov.w	r6, #0
 8008204:	196b      	adds	r3, r5, r5
 8008206:	eb46 0406 	adc.w	r4, r6, r6
 800820a:	461a      	mov	r2, r3
 800820c:	4623      	mov	r3, r4
 800820e:	f7f8 fcd3 	bl	8000bb8 <__aeabi_uldivmod>
 8008212:	4603      	mov	r3, r0
 8008214:	460c      	mov	r4, r1
 8008216:	461a      	mov	r2, r3
 8008218:	4b6a      	ldr	r3, [pc, #424]	; (80083c4 <UART_SetConfig+0x384>)
 800821a:	fba3 1302 	umull	r1, r3, r3, r2
 800821e:	095b      	lsrs	r3, r3, #5
 8008220:	2164      	movs	r1, #100	; 0x64
 8008222:	fb01 f303 	mul.w	r3, r1, r3
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	00db      	lsls	r3, r3, #3
 800822a:	3332      	adds	r3, #50	; 0x32
 800822c:	4a65      	ldr	r2, [pc, #404]	; (80083c4 <UART_SetConfig+0x384>)
 800822e:	fba2 2303 	umull	r2, r3, r2, r3
 8008232:	095b      	lsrs	r3, r3, #5
 8008234:	f003 0207 	and.w	r2, r3, #7
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4442      	add	r2, r8
 800823e:	609a      	str	r2, [r3, #8]
 8008240:	e26f      	b.n	8008722 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008242:	f7fe fd73 	bl	8006d2c <HAL_RCC_GetPCLK1Freq>
 8008246:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	461d      	mov	r5, r3
 800824c:	f04f 0600 	mov.w	r6, #0
 8008250:	46a8      	mov	r8, r5
 8008252:	46b1      	mov	r9, r6
 8008254:	eb18 0308 	adds.w	r3, r8, r8
 8008258:	eb49 0409 	adc.w	r4, r9, r9
 800825c:	4698      	mov	r8, r3
 800825e:	46a1      	mov	r9, r4
 8008260:	eb18 0805 	adds.w	r8, r8, r5
 8008264:	eb49 0906 	adc.w	r9, r9, r6
 8008268:	f04f 0100 	mov.w	r1, #0
 800826c:	f04f 0200 	mov.w	r2, #0
 8008270:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008274:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008278:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800827c:	4688      	mov	r8, r1
 800827e:	4691      	mov	r9, r2
 8008280:	eb18 0005 	adds.w	r0, r8, r5
 8008284:	eb49 0106 	adc.w	r1, r9, r6
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	461d      	mov	r5, r3
 800828e:	f04f 0600 	mov.w	r6, #0
 8008292:	196b      	adds	r3, r5, r5
 8008294:	eb46 0406 	adc.w	r4, r6, r6
 8008298:	461a      	mov	r2, r3
 800829a:	4623      	mov	r3, r4
 800829c:	f7f8 fc8c 	bl	8000bb8 <__aeabi_uldivmod>
 80082a0:	4603      	mov	r3, r0
 80082a2:	460c      	mov	r4, r1
 80082a4:	461a      	mov	r2, r3
 80082a6:	4b47      	ldr	r3, [pc, #284]	; (80083c4 <UART_SetConfig+0x384>)
 80082a8:	fba3 2302 	umull	r2, r3, r3, r2
 80082ac:	095b      	lsrs	r3, r3, #5
 80082ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	461d      	mov	r5, r3
 80082b6:	f04f 0600 	mov.w	r6, #0
 80082ba:	46a9      	mov	r9, r5
 80082bc:	46b2      	mov	sl, r6
 80082be:	eb19 0309 	adds.w	r3, r9, r9
 80082c2:	eb4a 040a 	adc.w	r4, sl, sl
 80082c6:	4699      	mov	r9, r3
 80082c8:	46a2      	mov	sl, r4
 80082ca:	eb19 0905 	adds.w	r9, r9, r5
 80082ce:	eb4a 0a06 	adc.w	sl, sl, r6
 80082d2:	f04f 0100 	mov.w	r1, #0
 80082d6:	f04f 0200 	mov.w	r2, #0
 80082da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80082de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80082e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80082e6:	4689      	mov	r9, r1
 80082e8:	4692      	mov	sl, r2
 80082ea:	eb19 0005 	adds.w	r0, r9, r5
 80082ee:	eb4a 0106 	adc.w	r1, sl, r6
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	461d      	mov	r5, r3
 80082f8:	f04f 0600 	mov.w	r6, #0
 80082fc:	196b      	adds	r3, r5, r5
 80082fe:	eb46 0406 	adc.w	r4, r6, r6
 8008302:	461a      	mov	r2, r3
 8008304:	4623      	mov	r3, r4
 8008306:	f7f8 fc57 	bl	8000bb8 <__aeabi_uldivmod>
 800830a:	4603      	mov	r3, r0
 800830c:	460c      	mov	r4, r1
 800830e:	461a      	mov	r2, r3
 8008310:	4b2c      	ldr	r3, [pc, #176]	; (80083c4 <UART_SetConfig+0x384>)
 8008312:	fba3 1302 	umull	r1, r3, r3, r2
 8008316:	095b      	lsrs	r3, r3, #5
 8008318:	2164      	movs	r1, #100	; 0x64
 800831a:	fb01 f303 	mul.w	r3, r1, r3
 800831e:	1ad3      	subs	r3, r2, r3
 8008320:	00db      	lsls	r3, r3, #3
 8008322:	3332      	adds	r3, #50	; 0x32
 8008324:	4a27      	ldr	r2, [pc, #156]	; (80083c4 <UART_SetConfig+0x384>)
 8008326:	fba2 2303 	umull	r2, r3, r2, r3
 800832a:	095b      	lsrs	r3, r3, #5
 800832c:	005b      	lsls	r3, r3, #1
 800832e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008332:	4498      	add	r8, r3
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	461d      	mov	r5, r3
 8008338:	f04f 0600 	mov.w	r6, #0
 800833c:	46a9      	mov	r9, r5
 800833e:	46b2      	mov	sl, r6
 8008340:	eb19 0309 	adds.w	r3, r9, r9
 8008344:	eb4a 040a 	adc.w	r4, sl, sl
 8008348:	4699      	mov	r9, r3
 800834a:	46a2      	mov	sl, r4
 800834c:	eb19 0905 	adds.w	r9, r9, r5
 8008350:	eb4a 0a06 	adc.w	sl, sl, r6
 8008354:	f04f 0100 	mov.w	r1, #0
 8008358:	f04f 0200 	mov.w	r2, #0
 800835c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008360:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008364:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008368:	4689      	mov	r9, r1
 800836a:	4692      	mov	sl, r2
 800836c:	eb19 0005 	adds.w	r0, r9, r5
 8008370:	eb4a 0106 	adc.w	r1, sl, r6
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	461d      	mov	r5, r3
 800837a:	f04f 0600 	mov.w	r6, #0
 800837e:	196b      	adds	r3, r5, r5
 8008380:	eb46 0406 	adc.w	r4, r6, r6
 8008384:	461a      	mov	r2, r3
 8008386:	4623      	mov	r3, r4
 8008388:	f7f8 fc16 	bl	8000bb8 <__aeabi_uldivmod>
 800838c:	4603      	mov	r3, r0
 800838e:	460c      	mov	r4, r1
 8008390:	461a      	mov	r2, r3
 8008392:	4b0c      	ldr	r3, [pc, #48]	; (80083c4 <UART_SetConfig+0x384>)
 8008394:	fba3 1302 	umull	r1, r3, r3, r2
 8008398:	095b      	lsrs	r3, r3, #5
 800839a:	2164      	movs	r1, #100	; 0x64
 800839c:	fb01 f303 	mul.w	r3, r1, r3
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	00db      	lsls	r3, r3, #3
 80083a4:	3332      	adds	r3, #50	; 0x32
 80083a6:	4a07      	ldr	r2, [pc, #28]	; (80083c4 <UART_SetConfig+0x384>)
 80083a8:	fba2 2303 	umull	r2, r3, r2, r3
 80083ac:	095b      	lsrs	r3, r3, #5
 80083ae:	f003 0207 	and.w	r2, r3, #7
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4442      	add	r2, r8
 80083b8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80083ba:	e1b2      	b.n	8008722 <UART_SetConfig+0x6e2>
 80083bc:	40011000 	.word	0x40011000
 80083c0:	40011400 	.word	0x40011400
 80083c4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4ad7      	ldr	r2, [pc, #860]	; (800872c <UART_SetConfig+0x6ec>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d005      	beq.n	80083de <UART_SetConfig+0x39e>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4ad6      	ldr	r2, [pc, #856]	; (8008730 <UART_SetConfig+0x6f0>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	f040 80d1 	bne.w	8008580 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80083de:	f7fe fcb9 	bl	8006d54 <HAL_RCC_GetPCLK2Freq>
 80083e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	469a      	mov	sl, r3
 80083e8:	f04f 0b00 	mov.w	fp, #0
 80083ec:	46d0      	mov	r8, sl
 80083ee:	46d9      	mov	r9, fp
 80083f0:	eb18 0308 	adds.w	r3, r8, r8
 80083f4:	eb49 0409 	adc.w	r4, r9, r9
 80083f8:	4698      	mov	r8, r3
 80083fa:	46a1      	mov	r9, r4
 80083fc:	eb18 080a 	adds.w	r8, r8, sl
 8008400:	eb49 090b 	adc.w	r9, r9, fp
 8008404:	f04f 0100 	mov.w	r1, #0
 8008408:	f04f 0200 	mov.w	r2, #0
 800840c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008410:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008414:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008418:	4688      	mov	r8, r1
 800841a:	4691      	mov	r9, r2
 800841c:	eb1a 0508 	adds.w	r5, sl, r8
 8008420:	eb4b 0609 	adc.w	r6, fp, r9
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	4619      	mov	r1, r3
 800842a:	f04f 0200 	mov.w	r2, #0
 800842e:	f04f 0300 	mov.w	r3, #0
 8008432:	f04f 0400 	mov.w	r4, #0
 8008436:	0094      	lsls	r4, r2, #2
 8008438:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800843c:	008b      	lsls	r3, r1, #2
 800843e:	461a      	mov	r2, r3
 8008440:	4623      	mov	r3, r4
 8008442:	4628      	mov	r0, r5
 8008444:	4631      	mov	r1, r6
 8008446:	f7f8 fbb7 	bl	8000bb8 <__aeabi_uldivmod>
 800844a:	4603      	mov	r3, r0
 800844c:	460c      	mov	r4, r1
 800844e:	461a      	mov	r2, r3
 8008450:	4bb8      	ldr	r3, [pc, #736]	; (8008734 <UART_SetConfig+0x6f4>)
 8008452:	fba3 2302 	umull	r2, r3, r3, r2
 8008456:	095b      	lsrs	r3, r3, #5
 8008458:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	469b      	mov	fp, r3
 8008460:	f04f 0c00 	mov.w	ip, #0
 8008464:	46d9      	mov	r9, fp
 8008466:	46e2      	mov	sl, ip
 8008468:	eb19 0309 	adds.w	r3, r9, r9
 800846c:	eb4a 040a 	adc.w	r4, sl, sl
 8008470:	4699      	mov	r9, r3
 8008472:	46a2      	mov	sl, r4
 8008474:	eb19 090b 	adds.w	r9, r9, fp
 8008478:	eb4a 0a0c 	adc.w	sl, sl, ip
 800847c:	f04f 0100 	mov.w	r1, #0
 8008480:	f04f 0200 	mov.w	r2, #0
 8008484:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008488:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800848c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008490:	4689      	mov	r9, r1
 8008492:	4692      	mov	sl, r2
 8008494:	eb1b 0509 	adds.w	r5, fp, r9
 8008498:	eb4c 060a 	adc.w	r6, ip, sl
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	4619      	mov	r1, r3
 80084a2:	f04f 0200 	mov.w	r2, #0
 80084a6:	f04f 0300 	mov.w	r3, #0
 80084aa:	f04f 0400 	mov.w	r4, #0
 80084ae:	0094      	lsls	r4, r2, #2
 80084b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80084b4:	008b      	lsls	r3, r1, #2
 80084b6:	461a      	mov	r2, r3
 80084b8:	4623      	mov	r3, r4
 80084ba:	4628      	mov	r0, r5
 80084bc:	4631      	mov	r1, r6
 80084be:	f7f8 fb7b 	bl	8000bb8 <__aeabi_uldivmod>
 80084c2:	4603      	mov	r3, r0
 80084c4:	460c      	mov	r4, r1
 80084c6:	461a      	mov	r2, r3
 80084c8:	4b9a      	ldr	r3, [pc, #616]	; (8008734 <UART_SetConfig+0x6f4>)
 80084ca:	fba3 1302 	umull	r1, r3, r3, r2
 80084ce:	095b      	lsrs	r3, r3, #5
 80084d0:	2164      	movs	r1, #100	; 0x64
 80084d2:	fb01 f303 	mul.w	r3, r1, r3
 80084d6:	1ad3      	subs	r3, r2, r3
 80084d8:	011b      	lsls	r3, r3, #4
 80084da:	3332      	adds	r3, #50	; 0x32
 80084dc:	4a95      	ldr	r2, [pc, #596]	; (8008734 <UART_SetConfig+0x6f4>)
 80084de:	fba2 2303 	umull	r2, r3, r2, r3
 80084e2:	095b      	lsrs	r3, r3, #5
 80084e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084e8:	4498      	add	r8, r3
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	469b      	mov	fp, r3
 80084ee:	f04f 0c00 	mov.w	ip, #0
 80084f2:	46d9      	mov	r9, fp
 80084f4:	46e2      	mov	sl, ip
 80084f6:	eb19 0309 	adds.w	r3, r9, r9
 80084fa:	eb4a 040a 	adc.w	r4, sl, sl
 80084fe:	4699      	mov	r9, r3
 8008500:	46a2      	mov	sl, r4
 8008502:	eb19 090b 	adds.w	r9, r9, fp
 8008506:	eb4a 0a0c 	adc.w	sl, sl, ip
 800850a:	f04f 0100 	mov.w	r1, #0
 800850e:	f04f 0200 	mov.w	r2, #0
 8008512:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008516:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800851a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800851e:	4689      	mov	r9, r1
 8008520:	4692      	mov	sl, r2
 8008522:	eb1b 0509 	adds.w	r5, fp, r9
 8008526:	eb4c 060a 	adc.w	r6, ip, sl
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	4619      	mov	r1, r3
 8008530:	f04f 0200 	mov.w	r2, #0
 8008534:	f04f 0300 	mov.w	r3, #0
 8008538:	f04f 0400 	mov.w	r4, #0
 800853c:	0094      	lsls	r4, r2, #2
 800853e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008542:	008b      	lsls	r3, r1, #2
 8008544:	461a      	mov	r2, r3
 8008546:	4623      	mov	r3, r4
 8008548:	4628      	mov	r0, r5
 800854a:	4631      	mov	r1, r6
 800854c:	f7f8 fb34 	bl	8000bb8 <__aeabi_uldivmod>
 8008550:	4603      	mov	r3, r0
 8008552:	460c      	mov	r4, r1
 8008554:	461a      	mov	r2, r3
 8008556:	4b77      	ldr	r3, [pc, #476]	; (8008734 <UART_SetConfig+0x6f4>)
 8008558:	fba3 1302 	umull	r1, r3, r3, r2
 800855c:	095b      	lsrs	r3, r3, #5
 800855e:	2164      	movs	r1, #100	; 0x64
 8008560:	fb01 f303 	mul.w	r3, r1, r3
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	011b      	lsls	r3, r3, #4
 8008568:	3332      	adds	r3, #50	; 0x32
 800856a:	4a72      	ldr	r2, [pc, #456]	; (8008734 <UART_SetConfig+0x6f4>)
 800856c:	fba2 2303 	umull	r2, r3, r2, r3
 8008570:	095b      	lsrs	r3, r3, #5
 8008572:	f003 020f 	and.w	r2, r3, #15
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4442      	add	r2, r8
 800857c:	609a      	str	r2, [r3, #8]
 800857e:	e0d0      	b.n	8008722 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008580:	f7fe fbd4 	bl	8006d2c <HAL_RCC_GetPCLK1Freq>
 8008584:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	469a      	mov	sl, r3
 800858a:	f04f 0b00 	mov.w	fp, #0
 800858e:	46d0      	mov	r8, sl
 8008590:	46d9      	mov	r9, fp
 8008592:	eb18 0308 	adds.w	r3, r8, r8
 8008596:	eb49 0409 	adc.w	r4, r9, r9
 800859a:	4698      	mov	r8, r3
 800859c:	46a1      	mov	r9, r4
 800859e:	eb18 080a 	adds.w	r8, r8, sl
 80085a2:	eb49 090b 	adc.w	r9, r9, fp
 80085a6:	f04f 0100 	mov.w	r1, #0
 80085aa:	f04f 0200 	mov.w	r2, #0
 80085ae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80085b2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80085b6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80085ba:	4688      	mov	r8, r1
 80085bc:	4691      	mov	r9, r2
 80085be:	eb1a 0508 	adds.w	r5, sl, r8
 80085c2:	eb4b 0609 	adc.w	r6, fp, r9
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	4619      	mov	r1, r3
 80085cc:	f04f 0200 	mov.w	r2, #0
 80085d0:	f04f 0300 	mov.w	r3, #0
 80085d4:	f04f 0400 	mov.w	r4, #0
 80085d8:	0094      	lsls	r4, r2, #2
 80085da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80085de:	008b      	lsls	r3, r1, #2
 80085e0:	461a      	mov	r2, r3
 80085e2:	4623      	mov	r3, r4
 80085e4:	4628      	mov	r0, r5
 80085e6:	4631      	mov	r1, r6
 80085e8:	f7f8 fae6 	bl	8000bb8 <__aeabi_uldivmod>
 80085ec:	4603      	mov	r3, r0
 80085ee:	460c      	mov	r4, r1
 80085f0:	461a      	mov	r2, r3
 80085f2:	4b50      	ldr	r3, [pc, #320]	; (8008734 <UART_SetConfig+0x6f4>)
 80085f4:	fba3 2302 	umull	r2, r3, r3, r2
 80085f8:	095b      	lsrs	r3, r3, #5
 80085fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	469b      	mov	fp, r3
 8008602:	f04f 0c00 	mov.w	ip, #0
 8008606:	46d9      	mov	r9, fp
 8008608:	46e2      	mov	sl, ip
 800860a:	eb19 0309 	adds.w	r3, r9, r9
 800860e:	eb4a 040a 	adc.w	r4, sl, sl
 8008612:	4699      	mov	r9, r3
 8008614:	46a2      	mov	sl, r4
 8008616:	eb19 090b 	adds.w	r9, r9, fp
 800861a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800861e:	f04f 0100 	mov.w	r1, #0
 8008622:	f04f 0200 	mov.w	r2, #0
 8008626:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800862a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800862e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008632:	4689      	mov	r9, r1
 8008634:	4692      	mov	sl, r2
 8008636:	eb1b 0509 	adds.w	r5, fp, r9
 800863a:	eb4c 060a 	adc.w	r6, ip, sl
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	4619      	mov	r1, r3
 8008644:	f04f 0200 	mov.w	r2, #0
 8008648:	f04f 0300 	mov.w	r3, #0
 800864c:	f04f 0400 	mov.w	r4, #0
 8008650:	0094      	lsls	r4, r2, #2
 8008652:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008656:	008b      	lsls	r3, r1, #2
 8008658:	461a      	mov	r2, r3
 800865a:	4623      	mov	r3, r4
 800865c:	4628      	mov	r0, r5
 800865e:	4631      	mov	r1, r6
 8008660:	f7f8 faaa 	bl	8000bb8 <__aeabi_uldivmod>
 8008664:	4603      	mov	r3, r0
 8008666:	460c      	mov	r4, r1
 8008668:	461a      	mov	r2, r3
 800866a:	4b32      	ldr	r3, [pc, #200]	; (8008734 <UART_SetConfig+0x6f4>)
 800866c:	fba3 1302 	umull	r1, r3, r3, r2
 8008670:	095b      	lsrs	r3, r3, #5
 8008672:	2164      	movs	r1, #100	; 0x64
 8008674:	fb01 f303 	mul.w	r3, r1, r3
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	011b      	lsls	r3, r3, #4
 800867c:	3332      	adds	r3, #50	; 0x32
 800867e:	4a2d      	ldr	r2, [pc, #180]	; (8008734 <UART_SetConfig+0x6f4>)
 8008680:	fba2 2303 	umull	r2, r3, r2, r3
 8008684:	095b      	lsrs	r3, r3, #5
 8008686:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800868a:	4498      	add	r8, r3
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	469b      	mov	fp, r3
 8008690:	f04f 0c00 	mov.w	ip, #0
 8008694:	46d9      	mov	r9, fp
 8008696:	46e2      	mov	sl, ip
 8008698:	eb19 0309 	adds.w	r3, r9, r9
 800869c:	eb4a 040a 	adc.w	r4, sl, sl
 80086a0:	4699      	mov	r9, r3
 80086a2:	46a2      	mov	sl, r4
 80086a4:	eb19 090b 	adds.w	r9, r9, fp
 80086a8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80086ac:	f04f 0100 	mov.w	r1, #0
 80086b0:	f04f 0200 	mov.w	r2, #0
 80086b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80086bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80086c0:	4689      	mov	r9, r1
 80086c2:	4692      	mov	sl, r2
 80086c4:	eb1b 0509 	adds.w	r5, fp, r9
 80086c8:	eb4c 060a 	adc.w	r6, ip, sl
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	4619      	mov	r1, r3
 80086d2:	f04f 0200 	mov.w	r2, #0
 80086d6:	f04f 0300 	mov.w	r3, #0
 80086da:	f04f 0400 	mov.w	r4, #0
 80086de:	0094      	lsls	r4, r2, #2
 80086e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80086e4:	008b      	lsls	r3, r1, #2
 80086e6:	461a      	mov	r2, r3
 80086e8:	4623      	mov	r3, r4
 80086ea:	4628      	mov	r0, r5
 80086ec:	4631      	mov	r1, r6
 80086ee:	f7f8 fa63 	bl	8000bb8 <__aeabi_uldivmod>
 80086f2:	4603      	mov	r3, r0
 80086f4:	460c      	mov	r4, r1
 80086f6:	461a      	mov	r2, r3
 80086f8:	4b0e      	ldr	r3, [pc, #56]	; (8008734 <UART_SetConfig+0x6f4>)
 80086fa:	fba3 1302 	umull	r1, r3, r3, r2
 80086fe:	095b      	lsrs	r3, r3, #5
 8008700:	2164      	movs	r1, #100	; 0x64
 8008702:	fb01 f303 	mul.w	r3, r1, r3
 8008706:	1ad3      	subs	r3, r2, r3
 8008708:	011b      	lsls	r3, r3, #4
 800870a:	3332      	adds	r3, #50	; 0x32
 800870c:	4a09      	ldr	r2, [pc, #36]	; (8008734 <UART_SetConfig+0x6f4>)
 800870e:	fba2 2303 	umull	r2, r3, r2, r3
 8008712:	095b      	lsrs	r3, r3, #5
 8008714:	f003 020f 	and.w	r2, r3, #15
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4442      	add	r2, r8
 800871e:	609a      	str	r2, [r3, #8]
}
 8008720:	e7ff      	b.n	8008722 <UART_SetConfig+0x6e2>
 8008722:	bf00      	nop
 8008724:	3714      	adds	r7, #20
 8008726:	46bd      	mov	sp, r7
 8008728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800872c:	40011000 	.word	0x40011000
 8008730:	40011400 	.word	0x40011400
 8008734:	51eb851f 	.word	0x51eb851f

08008738 <__errno>:
 8008738:	4b01      	ldr	r3, [pc, #4]	; (8008740 <__errno+0x8>)
 800873a:	6818      	ldr	r0, [r3, #0]
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	20000020 	.word	0x20000020

08008744 <__libc_init_array>:
 8008744:	b570      	push	{r4, r5, r6, lr}
 8008746:	4e0d      	ldr	r6, [pc, #52]	; (800877c <__libc_init_array+0x38>)
 8008748:	4c0d      	ldr	r4, [pc, #52]	; (8008780 <__libc_init_array+0x3c>)
 800874a:	1ba4      	subs	r4, r4, r6
 800874c:	10a4      	asrs	r4, r4, #2
 800874e:	2500      	movs	r5, #0
 8008750:	42a5      	cmp	r5, r4
 8008752:	d109      	bne.n	8008768 <__libc_init_array+0x24>
 8008754:	4e0b      	ldr	r6, [pc, #44]	; (8008784 <__libc_init_array+0x40>)
 8008756:	4c0c      	ldr	r4, [pc, #48]	; (8008788 <__libc_init_array+0x44>)
 8008758:	f000 feae 	bl	80094b8 <_init>
 800875c:	1ba4      	subs	r4, r4, r6
 800875e:	10a4      	asrs	r4, r4, #2
 8008760:	2500      	movs	r5, #0
 8008762:	42a5      	cmp	r5, r4
 8008764:	d105      	bne.n	8008772 <__libc_init_array+0x2e>
 8008766:	bd70      	pop	{r4, r5, r6, pc}
 8008768:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800876c:	4798      	blx	r3
 800876e:	3501      	adds	r5, #1
 8008770:	e7ee      	b.n	8008750 <__libc_init_array+0xc>
 8008772:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008776:	4798      	blx	r3
 8008778:	3501      	adds	r5, #1
 800877a:	e7f2      	b.n	8008762 <__libc_init_array+0x1e>
 800877c:	080095c0 	.word	0x080095c0
 8008780:	080095c0 	.word	0x080095c0
 8008784:	080095c0 	.word	0x080095c0
 8008788:	080095c4 	.word	0x080095c4

0800878c <memcpy>:
 800878c:	b510      	push	{r4, lr}
 800878e:	1e43      	subs	r3, r0, #1
 8008790:	440a      	add	r2, r1
 8008792:	4291      	cmp	r1, r2
 8008794:	d100      	bne.n	8008798 <memcpy+0xc>
 8008796:	bd10      	pop	{r4, pc}
 8008798:	f811 4b01 	ldrb.w	r4, [r1], #1
 800879c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087a0:	e7f7      	b.n	8008792 <memcpy+0x6>

080087a2 <memset>:
 80087a2:	4402      	add	r2, r0
 80087a4:	4603      	mov	r3, r0
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d100      	bne.n	80087ac <memset+0xa>
 80087aa:	4770      	bx	lr
 80087ac:	f803 1b01 	strb.w	r1, [r3], #1
 80087b0:	e7f9      	b.n	80087a6 <memset+0x4>

080087b2 <fmax>:
 80087b2:	b508      	push	{r3, lr}
 80087b4:	ed2d 8b04 	vpush	{d8-d9}
 80087b8:	eeb0 8a40 	vmov.f32	s16, s0
 80087bc:	eef0 8a60 	vmov.f32	s17, s1
 80087c0:	eeb0 9a41 	vmov.f32	s18, s2
 80087c4:	eef0 9a61 	vmov.f32	s19, s3
 80087c8:	f000 f842 	bl	8008850 <__fpclassifyd>
 80087cc:	b168      	cbz	r0, 80087ea <fmax+0x38>
 80087ce:	eeb0 0a49 	vmov.f32	s0, s18
 80087d2:	eef0 0a69 	vmov.f32	s1, s19
 80087d6:	f000 f83b 	bl	8008850 <__fpclassifyd>
 80087da:	b150      	cbz	r0, 80087f2 <fmax+0x40>
 80087dc:	ec53 2b19 	vmov	r2, r3, d9
 80087e0:	ec51 0b18 	vmov	r0, r1, d8
 80087e4:	f7f8 f950 	bl	8000a88 <__aeabi_dcmpgt>
 80087e8:	b918      	cbnz	r0, 80087f2 <fmax+0x40>
 80087ea:	eeb0 8a49 	vmov.f32	s16, s18
 80087ee:	eef0 8a69 	vmov.f32	s17, s19
 80087f2:	eeb0 0a48 	vmov.f32	s0, s16
 80087f6:	eef0 0a68 	vmov.f32	s1, s17
 80087fa:	ecbd 8b04 	vpop	{d8-d9}
 80087fe:	bd08      	pop	{r3, pc}

08008800 <fmin>:
 8008800:	b508      	push	{r3, lr}
 8008802:	ed2d 8b04 	vpush	{d8-d9}
 8008806:	eeb0 8a40 	vmov.f32	s16, s0
 800880a:	eef0 8a60 	vmov.f32	s17, s1
 800880e:	eeb0 9a41 	vmov.f32	s18, s2
 8008812:	eef0 9a61 	vmov.f32	s19, s3
 8008816:	f000 f81b 	bl	8008850 <__fpclassifyd>
 800881a:	b168      	cbz	r0, 8008838 <fmin+0x38>
 800881c:	eeb0 0a49 	vmov.f32	s0, s18
 8008820:	eef0 0a69 	vmov.f32	s1, s19
 8008824:	f000 f814 	bl	8008850 <__fpclassifyd>
 8008828:	b150      	cbz	r0, 8008840 <fmin+0x40>
 800882a:	ec53 2b19 	vmov	r2, r3, d9
 800882e:	ec51 0b18 	vmov	r0, r1, d8
 8008832:	f7f8 f90b 	bl	8000a4c <__aeabi_dcmplt>
 8008836:	b918      	cbnz	r0, 8008840 <fmin+0x40>
 8008838:	eeb0 8a49 	vmov.f32	s16, s18
 800883c:	eef0 8a69 	vmov.f32	s17, s19
 8008840:	eeb0 0a48 	vmov.f32	s0, s16
 8008844:	eef0 0a68 	vmov.f32	s1, s17
 8008848:	ecbd 8b04 	vpop	{d8-d9}
 800884c:	bd08      	pop	{r3, pc}
	...

08008850 <__fpclassifyd>:
 8008850:	ec51 0b10 	vmov	r0, r1, d0
 8008854:	f031 4200 	bics.w	r2, r1, #2147483648	; 0x80000000
 8008858:	b510      	push	{r4, lr}
 800885a:	460b      	mov	r3, r1
 800885c:	d01b      	beq.n	8008896 <__fpclassifyd+0x46>
 800885e:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
 8008862:	490f      	ldr	r1, [pc, #60]	; (80088a0 <__fpclassifyd+0x50>)
 8008864:	428c      	cmp	r4, r1
 8008866:	d910      	bls.n	800888a <__fpclassifyd+0x3a>
 8008868:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 800886c:	490c      	ldr	r1, [pc, #48]	; (80088a0 <__fpclassifyd+0x50>)
 800886e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008872:	428b      	cmp	r3, r1
 8008874:	d909      	bls.n	800888a <__fpclassifyd+0x3a>
 8008876:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800887a:	d308      	bcc.n	800888e <__fpclassifyd+0x3e>
 800887c:	4b09      	ldr	r3, [pc, #36]	; (80088a4 <__fpclassifyd+0x54>)
 800887e:	429a      	cmp	r2, r3
 8008880:	d107      	bne.n	8008892 <__fpclassifyd+0x42>
 8008882:	fab0 f080 	clz	r0, r0
 8008886:	0940      	lsrs	r0, r0, #5
 8008888:	bd10      	pop	{r4, pc}
 800888a:	2004      	movs	r0, #4
 800888c:	e7fc      	b.n	8008888 <__fpclassifyd+0x38>
 800888e:	2003      	movs	r0, #3
 8008890:	e7fa      	b.n	8008888 <__fpclassifyd+0x38>
 8008892:	2000      	movs	r0, #0
 8008894:	e7f8      	b.n	8008888 <__fpclassifyd+0x38>
 8008896:	2800      	cmp	r0, #0
 8008898:	d1e6      	bne.n	8008868 <__fpclassifyd+0x18>
 800889a:	2002      	movs	r0, #2
 800889c:	e7f4      	b.n	8008888 <__fpclassifyd+0x38>
 800889e:	bf00      	nop
 80088a0:	7fdfffff 	.word	0x7fdfffff
 80088a4:	7ff00000 	.word	0x7ff00000

080088a8 <asin>:
 80088a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088aa:	ed2d 8b02 	vpush	{d8}
 80088ae:	4e26      	ldr	r6, [pc, #152]	; (8008948 <asin+0xa0>)
 80088b0:	b08b      	sub	sp, #44	; 0x2c
 80088b2:	ec55 4b10 	vmov	r4, r5, d0
 80088b6:	f000 f8ab 	bl	8008a10 <__ieee754_asin>
 80088ba:	f996 3000 	ldrsb.w	r3, [r6]
 80088be:	eeb0 8a40 	vmov.f32	s16, s0
 80088c2:	eef0 8a60 	vmov.f32	s17, s1
 80088c6:	3301      	adds	r3, #1
 80088c8:	d036      	beq.n	8008938 <asin+0x90>
 80088ca:	4622      	mov	r2, r4
 80088cc:	462b      	mov	r3, r5
 80088ce:	4620      	mov	r0, r4
 80088d0:	4629      	mov	r1, r5
 80088d2:	f7f8 f8e3 	bl	8000a9c <__aeabi_dcmpun>
 80088d6:	4607      	mov	r7, r0
 80088d8:	bb70      	cbnz	r0, 8008938 <asin+0x90>
 80088da:	ec45 4b10 	vmov	d0, r4, r5
 80088de:	f000 fdd7 	bl	8009490 <fabs>
 80088e2:	2200      	movs	r2, #0
 80088e4:	4b19      	ldr	r3, [pc, #100]	; (800894c <asin+0xa4>)
 80088e6:	ec51 0b10 	vmov	r0, r1, d0
 80088ea:	f7f8 f8cd 	bl	8000a88 <__aeabi_dcmpgt>
 80088ee:	b318      	cbz	r0, 8008938 <asin+0x90>
 80088f0:	2301      	movs	r3, #1
 80088f2:	9300      	str	r3, [sp, #0]
 80088f4:	4816      	ldr	r0, [pc, #88]	; (8008950 <asin+0xa8>)
 80088f6:	4b17      	ldr	r3, [pc, #92]	; (8008954 <asin+0xac>)
 80088f8:	9301      	str	r3, [sp, #4]
 80088fa:	9708      	str	r7, [sp, #32]
 80088fc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008900:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008904:	f000 fdd0 	bl	80094a8 <nan>
 8008908:	f996 3000 	ldrsb.w	r3, [r6]
 800890c:	2b02      	cmp	r3, #2
 800890e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8008912:	d104      	bne.n	800891e <asin+0x76>
 8008914:	f7ff ff10 	bl	8008738 <__errno>
 8008918:	2321      	movs	r3, #33	; 0x21
 800891a:	6003      	str	r3, [r0, #0]
 800891c:	e004      	b.n	8008928 <asin+0x80>
 800891e:	4668      	mov	r0, sp
 8008920:	f000 fdbf 	bl	80094a2 <matherr>
 8008924:	2800      	cmp	r0, #0
 8008926:	d0f5      	beq.n	8008914 <asin+0x6c>
 8008928:	9b08      	ldr	r3, [sp, #32]
 800892a:	b11b      	cbz	r3, 8008934 <asin+0x8c>
 800892c:	f7ff ff04 	bl	8008738 <__errno>
 8008930:	9b08      	ldr	r3, [sp, #32]
 8008932:	6003      	str	r3, [r0, #0]
 8008934:	ed9d 8b06 	vldr	d8, [sp, #24]
 8008938:	eeb0 0a48 	vmov.f32	s0, s16
 800893c:	eef0 0a68 	vmov.f32	s1, s17
 8008940:	b00b      	add	sp, #44	; 0x2c
 8008942:	ecbd 8b02 	vpop	{d8}
 8008946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008948:	20000084 	.word	0x20000084
 800894c:	3ff00000 	.word	0x3ff00000
 8008950:	0800956c 	.word	0x0800956c
 8008954:	08009568 	.word	0x08009568

08008958 <atan2>:
 8008958:	f000 ba6a 	b.w	8008e30 <__ieee754_atan2>

0800895c <sqrt>:
 800895c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008960:	ed2d 8b02 	vpush	{d8}
 8008964:	b08b      	sub	sp, #44	; 0x2c
 8008966:	ec55 4b10 	vmov	r4, r5, d0
 800896a:	f000 fb3f 	bl	8008fec <__ieee754_sqrt>
 800896e:	4b26      	ldr	r3, [pc, #152]	; (8008a08 <sqrt+0xac>)
 8008970:	eeb0 8a40 	vmov.f32	s16, s0
 8008974:	eef0 8a60 	vmov.f32	s17, s1
 8008978:	f993 6000 	ldrsb.w	r6, [r3]
 800897c:	1c73      	adds	r3, r6, #1
 800897e:	d02a      	beq.n	80089d6 <sqrt+0x7a>
 8008980:	4622      	mov	r2, r4
 8008982:	462b      	mov	r3, r5
 8008984:	4620      	mov	r0, r4
 8008986:	4629      	mov	r1, r5
 8008988:	f7f8 f888 	bl	8000a9c <__aeabi_dcmpun>
 800898c:	4607      	mov	r7, r0
 800898e:	bb10      	cbnz	r0, 80089d6 <sqrt+0x7a>
 8008990:	f04f 0800 	mov.w	r8, #0
 8008994:	f04f 0900 	mov.w	r9, #0
 8008998:	4642      	mov	r2, r8
 800899a:	464b      	mov	r3, r9
 800899c:	4620      	mov	r0, r4
 800899e:	4629      	mov	r1, r5
 80089a0:	f7f8 f854 	bl	8000a4c <__aeabi_dcmplt>
 80089a4:	b1b8      	cbz	r0, 80089d6 <sqrt+0x7a>
 80089a6:	2301      	movs	r3, #1
 80089a8:	9300      	str	r3, [sp, #0]
 80089aa:	4b18      	ldr	r3, [pc, #96]	; (8008a0c <sqrt+0xb0>)
 80089ac:	9301      	str	r3, [sp, #4]
 80089ae:	9708      	str	r7, [sp, #32]
 80089b0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80089b4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80089b8:	b9b6      	cbnz	r6, 80089e8 <sqrt+0x8c>
 80089ba:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80089be:	4668      	mov	r0, sp
 80089c0:	f000 fd6f 	bl	80094a2 <matherr>
 80089c4:	b1d0      	cbz	r0, 80089fc <sqrt+0xa0>
 80089c6:	9b08      	ldr	r3, [sp, #32]
 80089c8:	b11b      	cbz	r3, 80089d2 <sqrt+0x76>
 80089ca:	f7ff feb5 	bl	8008738 <__errno>
 80089ce:	9b08      	ldr	r3, [sp, #32]
 80089d0:	6003      	str	r3, [r0, #0]
 80089d2:	ed9d 8b06 	vldr	d8, [sp, #24]
 80089d6:	eeb0 0a48 	vmov.f32	s0, s16
 80089da:	eef0 0a68 	vmov.f32	s1, s17
 80089de:	b00b      	add	sp, #44	; 0x2c
 80089e0:	ecbd 8b02 	vpop	{d8}
 80089e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089e8:	4642      	mov	r2, r8
 80089ea:	464b      	mov	r3, r9
 80089ec:	4640      	mov	r0, r8
 80089ee:	4649      	mov	r1, r9
 80089f0:	f7f7 fee4 	bl	80007bc <__aeabi_ddiv>
 80089f4:	2e02      	cmp	r6, #2
 80089f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80089fa:	d1e0      	bne.n	80089be <sqrt+0x62>
 80089fc:	f7ff fe9c 	bl	8008738 <__errno>
 8008a00:	2321      	movs	r3, #33	; 0x21
 8008a02:	6003      	str	r3, [r0, #0]
 8008a04:	e7df      	b.n	80089c6 <sqrt+0x6a>
 8008a06:	bf00      	nop
 8008a08:	20000084 	.word	0x20000084
 8008a0c:	0800956d 	.word	0x0800956d

08008a10 <__ieee754_asin>:
 8008a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a14:	ec55 4b10 	vmov	r4, r5, d0
 8008a18:	4bcb      	ldr	r3, [pc, #812]	; (8008d48 <__ieee754_asin+0x338>)
 8008a1a:	b087      	sub	sp, #28
 8008a1c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8008a20:	429f      	cmp	r7, r3
 8008a22:	9501      	str	r5, [sp, #4]
 8008a24:	dd31      	ble.n	8008a8a <__ieee754_asin+0x7a>
 8008a26:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 8008a2a:	ee10 3a10 	vmov	r3, s0
 8008a2e:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 8008a32:	433b      	orrs	r3, r7
 8008a34:	d117      	bne.n	8008a66 <__ieee754_asin+0x56>
 8008a36:	a3aa      	add	r3, pc, #680	; (adr r3, 8008ce0 <__ieee754_asin+0x2d0>)
 8008a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3c:	ee10 0a10 	vmov	r0, s0
 8008a40:	4629      	mov	r1, r5
 8008a42:	f7f7 fd91 	bl	8000568 <__aeabi_dmul>
 8008a46:	a3a8      	add	r3, pc, #672	; (adr r3, 8008ce8 <__ieee754_asin+0x2d8>)
 8008a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4c:	4606      	mov	r6, r0
 8008a4e:	460f      	mov	r7, r1
 8008a50:	4620      	mov	r0, r4
 8008a52:	4629      	mov	r1, r5
 8008a54:	f7f7 fd88 	bl	8000568 <__aeabi_dmul>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	4630      	mov	r0, r6
 8008a5e:	4639      	mov	r1, r7
 8008a60:	f7f7 fbcc 	bl	80001fc <__adddf3>
 8008a64:	e00a      	b.n	8008a7c <__ieee754_asin+0x6c>
 8008a66:	ee10 2a10 	vmov	r2, s0
 8008a6a:	462b      	mov	r3, r5
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	4629      	mov	r1, r5
 8008a70:	f7f7 fbc2 	bl	80001f8 <__aeabi_dsub>
 8008a74:	4602      	mov	r2, r0
 8008a76:	460b      	mov	r3, r1
 8008a78:	f7f7 fea0 	bl	80007bc <__aeabi_ddiv>
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	460d      	mov	r5, r1
 8008a80:	ec45 4b10 	vmov	d0, r4, r5
 8008a84:	b007      	add	sp, #28
 8008a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a8a:	4bb0      	ldr	r3, [pc, #704]	; (8008d4c <__ieee754_asin+0x33c>)
 8008a8c:	429f      	cmp	r7, r3
 8008a8e:	dc11      	bgt.n	8008ab4 <__ieee754_asin+0xa4>
 8008a90:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8008a94:	f280 80ae 	bge.w	8008bf4 <__ieee754_asin+0x1e4>
 8008a98:	a395      	add	r3, pc, #596	; (adr r3, 8008cf0 <__ieee754_asin+0x2e0>)
 8008a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9e:	ee10 0a10 	vmov	r0, s0
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	f7f7 fbaa 	bl	80001fc <__adddf3>
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	4ba9      	ldr	r3, [pc, #676]	; (8008d50 <__ieee754_asin+0x340>)
 8008aac:	f7f7 ffec 	bl	8000a88 <__aeabi_dcmpgt>
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	d1e5      	bne.n	8008a80 <__ieee754_asin+0x70>
 8008ab4:	ec45 4b10 	vmov	d0, r4, r5
 8008ab8:	f000 fcea 	bl	8009490 <fabs>
 8008abc:	2000      	movs	r0, #0
 8008abe:	ec53 2b10 	vmov	r2, r3, d0
 8008ac2:	49a3      	ldr	r1, [pc, #652]	; (8008d50 <__ieee754_asin+0x340>)
 8008ac4:	f7f7 fb98 	bl	80001f8 <__aeabi_dsub>
 8008ac8:	2200      	movs	r2, #0
 8008aca:	4ba2      	ldr	r3, [pc, #648]	; (8008d54 <__ieee754_asin+0x344>)
 8008acc:	f7f7 fd4c 	bl	8000568 <__aeabi_dmul>
 8008ad0:	a389      	add	r3, pc, #548	; (adr r3, 8008cf8 <__ieee754_asin+0x2e8>)
 8008ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad6:	4604      	mov	r4, r0
 8008ad8:	460d      	mov	r5, r1
 8008ada:	f7f7 fd45 	bl	8000568 <__aeabi_dmul>
 8008ade:	a388      	add	r3, pc, #544	; (adr r3, 8008d00 <__ieee754_asin+0x2f0>)
 8008ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae4:	f7f7 fb8a 	bl	80001fc <__adddf3>
 8008ae8:	4622      	mov	r2, r4
 8008aea:	462b      	mov	r3, r5
 8008aec:	f7f7 fd3c 	bl	8000568 <__aeabi_dmul>
 8008af0:	a385      	add	r3, pc, #532	; (adr r3, 8008d08 <__ieee754_asin+0x2f8>)
 8008af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af6:	f7f7 fb7f 	bl	80001f8 <__aeabi_dsub>
 8008afa:	4622      	mov	r2, r4
 8008afc:	462b      	mov	r3, r5
 8008afe:	f7f7 fd33 	bl	8000568 <__aeabi_dmul>
 8008b02:	a383      	add	r3, pc, #524	; (adr r3, 8008d10 <__ieee754_asin+0x300>)
 8008b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b08:	f7f7 fb78 	bl	80001fc <__adddf3>
 8008b0c:	4622      	mov	r2, r4
 8008b0e:	462b      	mov	r3, r5
 8008b10:	f7f7 fd2a 	bl	8000568 <__aeabi_dmul>
 8008b14:	a380      	add	r3, pc, #512	; (adr r3, 8008d18 <__ieee754_asin+0x308>)
 8008b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1a:	f7f7 fb6d 	bl	80001f8 <__aeabi_dsub>
 8008b1e:	4622      	mov	r2, r4
 8008b20:	462b      	mov	r3, r5
 8008b22:	f7f7 fd21 	bl	8000568 <__aeabi_dmul>
 8008b26:	a37e      	add	r3, pc, #504	; (adr r3, 8008d20 <__ieee754_asin+0x310>)
 8008b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2c:	f7f7 fb66 	bl	80001fc <__adddf3>
 8008b30:	4622      	mov	r2, r4
 8008b32:	462b      	mov	r3, r5
 8008b34:	f7f7 fd18 	bl	8000568 <__aeabi_dmul>
 8008b38:	a37b      	add	r3, pc, #492	; (adr r3, 8008d28 <__ieee754_asin+0x318>)
 8008b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3e:	4680      	mov	r8, r0
 8008b40:	4689      	mov	r9, r1
 8008b42:	4620      	mov	r0, r4
 8008b44:	4629      	mov	r1, r5
 8008b46:	f7f7 fd0f 	bl	8000568 <__aeabi_dmul>
 8008b4a:	a379      	add	r3, pc, #484	; (adr r3, 8008d30 <__ieee754_asin+0x320>)
 8008b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b50:	f7f7 fb52 	bl	80001f8 <__aeabi_dsub>
 8008b54:	4622      	mov	r2, r4
 8008b56:	462b      	mov	r3, r5
 8008b58:	f7f7 fd06 	bl	8000568 <__aeabi_dmul>
 8008b5c:	a376      	add	r3, pc, #472	; (adr r3, 8008d38 <__ieee754_asin+0x328>)
 8008b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b62:	f7f7 fb4b 	bl	80001fc <__adddf3>
 8008b66:	4622      	mov	r2, r4
 8008b68:	462b      	mov	r3, r5
 8008b6a:	f7f7 fcfd 	bl	8000568 <__aeabi_dmul>
 8008b6e:	a374      	add	r3, pc, #464	; (adr r3, 8008d40 <__ieee754_asin+0x330>)
 8008b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b74:	f7f7 fb40 	bl	80001f8 <__aeabi_dsub>
 8008b78:	4622      	mov	r2, r4
 8008b7a:	462b      	mov	r3, r5
 8008b7c:	f7f7 fcf4 	bl	8000568 <__aeabi_dmul>
 8008b80:	4b73      	ldr	r3, [pc, #460]	; (8008d50 <__ieee754_asin+0x340>)
 8008b82:	2200      	movs	r2, #0
 8008b84:	f7f7 fb3a 	bl	80001fc <__adddf3>
 8008b88:	ec45 4b10 	vmov	d0, r4, r5
 8008b8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b90:	f000 fa2c 	bl	8008fec <__ieee754_sqrt>
 8008b94:	4b70      	ldr	r3, [pc, #448]	; (8008d58 <__ieee754_asin+0x348>)
 8008b96:	429f      	cmp	r7, r3
 8008b98:	ec5b ab10 	vmov	sl, fp, d0
 8008b9c:	f340 80de 	ble.w	8008d5c <__ieee754_asin+0x34c>
 8008ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ba4:	4640      	mov	r0, r8
 8008ba6:	4649      	mov	r1, r9
 8008ba8:	f7f7 fe08 	bl	80007bc <__aeabi_ddiv>
 8008bac:	4652      	mov	r2, sl
 8008bae:	465b      	mov	r3, fp
 8008bb0:	f7f7 fcda 	bl	8000568 <__aeabi_dmul>
 8008bb4:	4652      	mov	r2, sl
 8008bb6:	465b      	mov	r3, fp
 8008bb8:	f7f7 fb20 	bl	80001fc <__adddf3>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	f7f7 fb1c 	bl	80001fc <__adddf3>
 8008bc4:	a348      	add	r3, pc, #288	; (adr r3, 8008ce8 <__ieee754_asin+0x2d8>)
 8008bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bca:	f7f7 fb15 	bl	80001f8 <__aeabi_dsub>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	a143      	add	r1, pc, #268	; (adr r1, 8008ce0 <__ieee754_asin+0x2d0>)
 8008bd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bd8:	f7f7 fb0e 	bl	80001f8 <__aeabi_dsub>
 8008bdc:	9b01      	ldr	r3, [sp, #4]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	bfdc      	itt	le
 8008be2:	4602      	movle	r2, r0
 8008be4:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8008be8:	4604      	mov	r4, r0
 8008bea:	460d      	mov	r5, r1
 8008bec:	bfdc      	itt	le
 8008bee:	4614      	movle	r4, r2
 8008bf0:	461d      	movle	r5, r3
 8008bf2:	e745      	b.n	8008a80 <__ieee754_asin+0x70>
 8008bf4:	ee10 2a10 	vmov	r2, s0
 8008bf8:	ee10 0a10 	vmov	r0, s0
 8008bfc:	462b      	mov	r3, r5
 8008bfe:	4629      	mov	r1, r5
 8008c00:	f7f7 fcb2 	bl	8000568 <__aeabi_dmul>
 8008c04:	a33c      	add	r3, pc, #240	; (adr r3, 8008cf8 <__ieee754_asin+0x2e8>)
 8008c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0a:	4606      	mov	r6, r0
 8008c0c:	460f      	mov	r7, r1
 8008c0e:	f7f7 fcab 	bl	8000568 <__aeabi_dmul>
 8008c12:	a33b      	add	r3, pc, #236	; (adr r3, 8008d00 <__ieee754_asin+0x2f0>)
 8008c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c18:	f7f7 faf0 	bl	80001fc <__adddf3>
 8008c1c:	4632      	mov	r2, r6
 8008c1e:	463b      	mov	r3, r7
 8008c20:	f7f7 fca2 	bl	8000568 <__aeabi_dmul>
 8008c24:	a338      	add	r3, pc, #224	; (adr r3, 8008d08 <__ieee754_asin+0x2f8>)
 8008c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2a:	f7f7 fae5 	bl	80001f8 <__aeabi_dsub>
 8008c2e:	4632      	mov	r2, r6
 8008c30:	463b      	mov	r3, r7
 8008c32:	f7f7 fc99 	bl	8000568 <__aeabi_dmul>
 8008c36:	a336      	add	r3, pc, #216	; (adr r3, 8008d10 <__ieee754_asin+0x300>)
 8008c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3c:	f7f7 fade 	bl	80001fc <__adddf3>
 8008c40:	4632      	mov	r2, r6
 8008c42:	463b      	mov	r3, r7
 8008c44:	f7f7 fc90 	bl	8000568 <__aeabi_dmul>
 8008c48:	a333      	add	r3, pc, #204	; (adr r3, 8008d18 <__ieee754_asin+0x308>)
 8008c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4e:	f7f7 fad3 	bl	80001f8 <__aeabi_dsub>
 8008c52:	4632      	mov	r2, r6
 8008c54:	463b      	mov	r3, r7
 8008c56:	f7f7 fc87 	bl	8000568 <__aeabi_dmul>
 8008c5a:	a331      	add	r3, pc, #196	; (adr r3, 8008d20 <__ieee754_asin+0x310>)
 8008c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c60:	f7f7 facc 	bl	80001fc <__adddf3>
 8008c64:	4632      	mov	r2, r6
 8008c66:	463b      	mov	r3, r7
 8008c68:	f7f7 fc7e 	bl	8000568 <__aeabi_dmul>
 8008c6c:	a32e      	add	r3, pc, #184	; (adr r3, 8008d28 <__ieee754_asin+0x318>)
 8008c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c72:	4680      	mov	r8, r0
 8008c74:	4689      	mov	r9, r1
 8008c76:	4630      	mov	r0, r6
 8008c78:	4639      	mov	r1, r7
 8008c7a:	f7f7 fc75 	bl	8000568 <__aeabi_dmul>
 8008c7e:	a32c      	add	r3, pc, #176	; (adr r3, 8008d30 <__ieee754_asin+0x320>)
 8008c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c84:	f7f7 fab8 	bl	80001f8 <__aeabi_dsub>
 8008c88:	4632      	mov	r2, r6
 8008c8a:	463b      	mov	r3, r7
 8008c8c:	f7f7 fc6c 	bl	8000568 <__aeabi_dmul>
 8008c90:	a329      	add	r3, pc, #164	; (adr r3, 8008d38 <__ieee754_asin+0x328>)
 8008c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c96:	f7f7 fab1 	bl	80001fc <__adddf3>
 8008c9a:	4632      	mov	r2, r6
 8008c9c:	463b      	mov	r3, r7
 8008c9e:	f7f7 fc63 	bl	8000568 <__aeabi_dmul>
 8008ca2:	a327      	add	r3, pc, #156	; (adr r3, 8008d40 <__ieee754_asin+0x330>)
 8008ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca8:	f7f7 faa6 	bl	80001f8 <__aeabi_dsub>
 8008cac:	4632      	mov	r2, r6
 8008cae:	463b      	mov	r3, r7
 8008cb0:	f7f7 fc5a 	bl	8000568 <__aeabi_dmul>
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	4b26      	ldr	r3, [pc, #152]	; (8008d50 <__ieee754_asin+0x340>)
 8008cb8:	f7f7 faa0 	bl	80001fc <__adddf3>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	4640      	mov	r0, r8
 8008cc2:	4649      	mov	r1, r9
 8008cc4:	f7f7 fd7a 	bl	80007bc <__aeabi_ddiv>
 8008cc8:	4622      	mov	r2, r4
 8008cca:	462b      	mov	r3, r5
 8008ccc:	f7f7 fc4c 	bl	8000568 <__aeabi_dmul>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	4629      	mov	r1, r5
 8008cd8:	e6c2      	b.n	8008a60 <__ieee754_asin+0x50>
 8008cda:	bf00      	nop
 8008cdc:	f3af 8000 	nop.w
 8008ce0:	54442d18 	.word	0x54442d18
 8008ce4:	3ff921fb 	.word	0x3ff921fb
 8008ce8:	33145c07 	.word	0x33145c07
 8008cec:	3c91a626 	.word	0x3c91a626
 8008cf0:	8800759c 	.word	0x8800759c
 8008cf4:	7e37e43c 	.word	0x7e37e43c
 8008cf8:	0dfdf709 	.word	0x0dfdf709
 8008cfc:	3f023de1 	.word	0x3f023de1
 8008d00:	7501b288 	.word	0x7501b288
 8008d04:	3f49efe0 	.word	0x3f49efe0
 8008d08:	b5688f3b 	.word	0xb5688f3b
 8008d0c:	3fa48228 	.word	0x3fa48228
 8008d10:	0e884455 	.word	0x0e884455
 8008d14:	3fc9c155 	.word	0x3fc9c155
 8008d18:	03eb6f7d 	.word	0x03eb6f7d
 8008d1c:	3fd4d612 	.word	0x3fd4d612
 8008d20:	55555555 	.word	0x55555555
 8008d24:	3fc55555 	.word	0x3fc55555
 8008d28:	b12e9282 	.word	0xb12e9282
 8008d2c:	3fb3b8c5 	.word	0x3fb3b8c5
 8008d30:	1b8d0159 	.word	0x1b8d0159
 8008d34:	3fe6066c 	.word	0x3fe6066c
 8008d38:	9c598ac8 	.word	0x9c598ac8
 8008d3c:	40002ae5 	.word	0x40002ae5
 8008d40:	1c8a2d4b 	.word	0x1c8a2d4b
 8008d44:	40033a27 	.word	0x40033a27
 8008d48:	3fefffff 	.word	0x3fefffff
 8008d4c:	3fdfffff 	.word	0x3fdfffff
 8008d50:	3ff00000 	.word	0x3ff00000
 8008d54:	3fe00000 	.word	0x3fe00000
 8008d58:	3fef3332 	.word	0x3fef3332
 8008d5c:	ee10 2a10 	vmov	r2, s0
 8008d60:	ee10 0a10 	vmov	r0, s0
 8008d64:	465b      	mov	r3, fp
 8008d66:	4659      	mov	r1, fp
 8008d68:	f7f7 fa48 	bl	80001fc <__adddf3>
 8008d6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d74:	4640      	mov	r0, r8
 8008d76:	4649      	mov	r1, r9
 8008d78:	f7f7 fd20 	bl	80007bc <__aeabi_ddiv>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	460b      	mov	r3, r1
 8008d80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d84:	f7f7 fbf0 	bl	8000568 <__aeabi_dmul>
 8008d88:	2600      	movs	r6, #0
 8008d8a:	4680      	mov	r8, r0
 8008d8c:	4689      	mov	r9, r1
 8008d8e:	4632      	mov	r2, r6
 8008d90:	465b      	mov	r3, fp
 8008d92:	4630      	mov	r0, r6
 8008d94:	4659      	mov	r1, fp
 8008d96:	f7f7 fbe7 	bl	8000568 <__aeabi_dmul>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	4620      	mov	r0, r4
 8008da0:	4629      	mov	r1, r5
 8008da2:	f7f7 fa29 	bl	80001f8 <__aeabi_dsub>
 8008da6:	4632      	mov	r2, r6
 8008da8:	4604      	mov	r4, r0
 8008daa:	460d      	mov	r5, r1
 8008dac:	465b      	mov	r3, fp
 8008dae:	4650      	mov	r0, sl
 8008db0:	4659      	mov	r1, fp
 8008db2:	f7f7 fa23 	bl	80001fc <__adddf3>
 8008db6:	4602      	mov	r2, r0
 8008db8:	460b      	mov	r3, r1
 8008dba:	4620      	mov	r0, r4
 8008dbc:	4629      	mov	r1, r5
 8008dbe:	f7f7 fcfd 	bl	80007bc <__aeabi_ddiv>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	f7f7 fa19 	bl	80001fc <__adddf3>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	460b      	mov	r3, r1
 8008dce:	a114      	add	r1, pc, #80	; (adr r1, 8008e20 <__ieee754_asin+0x410>)
 8008dd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dd4:	f7f7 fa10 	bl	80001f8 <__aeabi_dsub>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	460b      	mov	r3, r1
 8008ddc:	4640      	mov	r0, r8
 8008dde:	4649      	mov	r1, r9
 8008de0:	f7f7 fa0a 	bl	80001f8 <__aeabi_dsub>
 8008de4:	465f      	mov	r7, fp
 8008de6:	4604      	mov	r4, r0
 8008de8:	460d      	mov	r5, r1
 8008dea:	4632      	mov	r2, r6
 8008dec:	465b      	mov	r3, fp
 8008dee:	4630      	mov	r0, r6
 8008df0:	4639      	mov	r1, r7
 8008df2:	f7f7 fa03 	bl	80001fc <__adddf3>
 8008df6:	4602      	mov	r2, r0
 8008df8:	460b      	mov	r3, r1
 8008dfa:	a10b      	add	r1, pc, #44	; (adr r1, 8008e28 <__ieee754_asin+0x418>)
 8008dfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e00:	f7f7 f9fa 	bl	80001f8 <__aeabi_dsub>
 8008e04:	4602      	mov	r2, r0
 8008e06:	460b      	mov	r3, r1
 8008e08:	4620      	mov	r0, r4
 8008e0a:	4629      	mov	r1, r5
 8008e0c:	f7f7 f9f4 	bl	80001f8 <__aeabi_dsub>
 8008e10:	4602      	mov	r2, r0
 8008e12:	460b      	mov	r3, r1
 8008e14:	a104      	add	r1, pc, #16	; (adr r1, 8008e28 <__ieee754_asin+0x418>)
 8008e16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e1a:	e6dd      	b.n	8008bd8 <__ieee754_asin+0x1c8>
 8008e1c:	f3af 8000 	nop.w
 8008e20:	33145c07 	.word	0x33145c07
 8008e24:	3c91a626 	.word	0x3c91a626
 8008e28:	54442d18 	.word	0x54442d18
 8008e2c:	3fe921fb 	.word	0x3fe921fb

08008e30 <__ieee754_atan2>:
 8008e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e34:	ec57 6b11 	vmov	r6, r7, d1
 8008e38:	4273      	negs	r3, r6
 8008e3a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8008e3e:	4333      	orrs	r3, r6
 8008e40:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8008fe8 <__ieee754_atan2+0x1b8>
 8008e44:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008e48:	4573      	cmp	r3, lr
 8008e4a:	ec51 0b10 	vmov	r0, r1, d0
 8008e4e:	ee11 8a10 	vmov	r8, s2
 8008e52:	d80a      	bhi.n	8008e6a <__ieee754_atan2+0x3a>
 8008e54:	4244      	negs	r4, r0
 8008e56:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008e5a:	4304      	orrs	r4, r0
 8008e5c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008e60:	4574      	cmp	r4, lr
 8008e62:	468c      	mov	ip, r1
 8008e64:	ee10 9a10 	vmov	r9, s0
 8008e68:	d907      	bls.n	8008e7a <__ieee754_atan2+0x4a>
 8008e6a:	4632      	mov	r2, r6
 8008e6c:	463b      	mov	r3, r7
 8008e6e:	f7f7 f9c5 	bl	80001fc <__adddf3>
 8008e72:	ec41 0b10 	vmov	d0, r0, r1
 8008e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e7a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008e7e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008e82:	4334      	orrs	r4, r6
 8008e84:	d103      	bne.n	8008e8e <__ieee754_atan2+0x5e>
 8008e86:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e8a:	f000 b961 	b.w	8009150 <atan>
 8008e8e:	17bc      	asrs	r4, r7, #30
 8008e90:	f004 0402 	and.w	r4, r4, #2
 8008e94:	ea53 0909 	orrs.w	r9, r3, r9
 8008e98:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008e9c:	d107      	bne.n	8008eae <__ieee754_atan2+0x7e>
 8008e9e:	2c02      	cmp	r4, #2
 8008ea0:	d073      	beq.n	8008f8a <__ieee754_atan2+0x15a>
 8008ea2:	2c03      	cmp	r4, #3
 8008ea4:	d1e5      	bne.n	8008e72 <__ieee754_atan2+0x42>
 8008ea6:	a13e      	add	r1, pc, #248	; (adr r1, 8008fa0 <__ieee754_atan2+0x170>)
 8008ea8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008eac:	e7e1      	b.n	8008e72 <__ieee754_atan2+0x42>
 8008eae:	ea52 0808 	orrs.w	r8, r2, r8
 8008eb2:	d106      	bne.n	8008ec2 <__ieee754_atan2+0x92>
 8008eb4:	f1bc 0f00 	cmp.w	ip, #0
 8008eb8:	da6b      	bge.n	8008f92 <__ieee754_atan2+0x162>
 8008eba:	a13b      	add	r1, pc, #236	; (adr r1, 8008fa8 <__ieee754_atan2+0x178>)
 8008ebc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ec0:	e7d7      	b.n	8008e72 <__ieee754_atan2+0x42>
 8008ec2:	4572      	cmp	r2, lr
 8008ec4:	d120      	bne.n	8008f08 <__ieee754_atan2+0xd8>
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d111      	bne.n	8008eee <__ieee754_atan2+0xbe>
 8008eca:	2c02      	cmp	r4, #2
 8008ecc:	d007      	beq.n	8008ede <__ieee754_atan2+0xae>
 8008ece:	2c03      	cmp	r4, #3
 8008ed0:	d009      	beq.n	8008ee6 <__ieee754_atan2+0xb6>
 8008ed2:	2c01      	cmp	r4, #1
 8008ed4:	d155      	bne.n	8008f82 <__ieee754_atan2+0x152>
 8008ed6:	a136      	add	r1, pc, #216	; (adr r1, 8008fb0 <__ieee754_atan2+0x180>)
 8008ed8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008edc:	e7c9      	b.n	8008e72 <__ieee754_atan2+0x42>
 8008ede:	a136      	add	r1, pc, #216	; (adr r1, 8008fb8 <__ieee754_atan2+0x188>)
 8008ee0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ee4:	e7c5      	b.n	8008e72 <__ieee754_atan2+0x42>
 8008ee6:	a136      	add	r1, pc, #216	; (adr r1, 8008fc0 <__ieee754_atan2+0x190>)
 8008ee8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008eec:	e7c1      	b.n	8008e72 <__ieee754_atan2+0x42>
 8008eee:	2c02      	cmp	r4, #2
 8008ef0:	d04b      	beq.n	8008f8a <__ieee754_atan2+0x15a>
 8008ef2:	2c03      	cmp	r4, #3
 8008ef4:	d0d7      	beq.n	8008ea6 <__ieee754_atan2+0x76>
 8008ef6:	2c01      	cmp	r4, #1
 8008ef8:	f04f 0000 	mov.w	r0, #0
 8008efc:	d102      	bne.n	8008f04 <__ieee754_atan2+0xd4>
 8008efe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008f02:	e7b6      	b.n	8008e72 <__ieee754_atan2+0x42>
 8008f04:	2100      	movs	r1, #0
 8008f06:	e7b4      	b.n	8008e72 <__ieee754_atan2+0x42>
 8008f08:	4573      	cmp	r3, lr
 8008f0a:	d0d3      	beq.n	8008eb4 <__ieee754_atan2+0x84>
 8008f0c:	1a9b      	subs	r3, r3, r2
 8008f0e:	151b      	asrs	r3, r3, #20
 8008f10:	2b3c      	cmp	r3, #60	; 0x3c
 8008f12:	dc1e      	bgt.n	8008f52 <__ieee754_atan2+0x122>
 8008f14:	2f00      	cmp	r7, #0
 8008f16:	da01      	bge.n	8008f1c <__ieee754_atan2+0xec>
 8008f18:	333c      	adds	r3, #60	; 0x3c
 8008f1a:	db1e      	blt.n	8008f5a <__ieee754_atan2+0x12a>
 8008f1c:	4632      	mov	r2, r6
 8008f1e:	463b      	mov	r3, r7
 8008f20:	f7f7 fc4c 	bl	80007bc <__aeabi_ddiv>
 8008f24:	ec41 0b10 	vmov	d0, r0, r1
 8008f28:	f000 fab2 	bl	8009490 <fabs>
 8008f2c:	f000 f910 	bl	8009150 <atan>
 8008f30:	ec51 0b10 	vmov	r0, r1, d0
 8008f34:	2c01      	cmp	r4, #1
 8008f36:	d013      	beq.n	8008f60 <__ieee754_atan2+0x130>
 8008f38:	2c02      	cmp	r4, #2
 8008f3a:	d015      	beq.n	8008f68 <__ieee754_atan2+0x138>
 8008f3c:	2c00      	cmp	r4, #0
 8008f3e:	d098      	beq.n	8008e72 <__ieee754_atan2+0x42>
 8008f40:	a321      	add	r3, pc, #132	; (adr r3, 8008fc8 <__ieee754_atan2+0x198>)
 8008f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f46:	f7f7 f957 	bl	80001f8 <__aeabi_dsub>
 8008f4a:	a321      	add	r3, pc, #132	; (adr r3, 8008fd0 <__ieee754_atan2+0x1a0>)
 8008f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f50:	e014      	b.n	8008f7c <__ieee754_atan2+0x14c>
 8008f52:	a121      	add	r1, pc, #132	; (adr r1, 8008fd8 <__ieee754_atan2+0x1a8>)
 8008f54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f58:	e7ec      	b.n	8008f34 <__ieee754_atan2+0x104>
 8008f5a:	2000      	movs	r0, #0
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	e7e9      	b.n	8008f34 <__ieee754_atan2+0x104>
 8008f60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f64:	4619      	mov	r1, r3
 8008f66:	e784      	b.n	8008e72 <__ieee754_atan2+0x42>
 8008f68:	a317      	add	r3, pc, #92	; (adr r3, 8008fc8 <__ieee754_atan2+0x198>)
 8008f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6e:	f7f7 f943 	bl	80001f8 <__aeabi_dsub>
 8008f72:	4602      	mov	r2, r0
 8008f74:	460b      	mov	r3, r1
 8008f76:	a116      	add	r1, pc, #88	; (adr r1, 8008fd0 <__ieee754_atan2+0x1a0>)
 8008f78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f7c:	f7f7 f93c 	bl	80001f8 <__aeabi_dsub>
 8008f80:	e777      	b.n	8008e72 <__ieee754_atan2+0x42>
 8008f82:	a117      	add	r1, pc, #92	; (adr r1, 8008fe0 <__ieee754_atan2+0x1b0>)
 8008f84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f88:	e773      	b.n	8008e72 <__ieee754_atan2+0x42>
 8008f8a:	a111      	add	r1, pc, #68	; (adr r1, 8008fd0 <__ieee754_atan2+0x1a0>)
 8008f8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f90:	e76f      	b.n	8008e72 <__ieee754_atan2+0x42>
 8008f92:	a111      	add	r1, pc, #68	; (adr r1, 8008fd8 <__ieee754_atan2+0x1a8>)
 8008f94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f98:	e76b      	b.n	8008e72 <__ieee754_atan2+0x42>
 8008f9a:	bf00      	nop
 8008f9c:	f3af 8000 	nop.w
 8008fa0:	54442d18 	.word	0x54442d18
 8008fa4:	c00921fb 	.word	0xc00921fb
 8008fa8:	54442d18 	.word	0x54442d18
 8008fac:	bff921fb 	.word	0xbff921fb
 8008fb0:	54442d18 	.word	0x54442d18
 8008fb4:	bfe921fb 	.word	0xbfe921fb
 8008fb8:	7f3321d2 	.word	0x7f3321d2
 8008fbc:	4002d97c 	.word	0x4002d97c
 8008fc0:	7f3321d2 	.word	0x7f3321d2
 8008fc4:	c002d97c 	.word	0xc002d97c
 8008fc8:	33145c07 	.word	0x33145c07
 8008fcc:	3ca1a626 	.word	0x3ca1a626
 8008fd0:	54442d18 	.word	0x54442d18
 8008fd4:	400921fb 	.word	0x400921fb
 8008fd8:	54442d18 	.word	0x54442d18
 8008fdc:	3ff921fb 	.word	0x3ff921fb
 8008fe0:	54442d18 	.word	0x54442d18
 8008fe4:	3fe921fb 	.word	0x3fe921fb
 8008fe8:	7ff00000 	.word	0x7ff00000

08008fec <__ieee754_sqrt>:
 8008fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff0:	4955      	ldr	r1, [pc, #340]	; (8009148 <__ieee754_sqrt+0x15c>)
 8008ff2:	ec55 4b10 	vmov	r4, r5, d0
 8008ff6:	43a9      	bics	r1, r5
 8008ff8:	462b      	mov	r3, r5
 8008ffa:	462a      	mov	r2, r5
 8008ffc:	d112      	bne.n	8009024 <__ieee754_sqrt+0x38>
 8008ffe:	ee10 2a10 	vmov	r2, s0
 8009002:	ee10 0a10 	vmov	r0, s0
 8009006:	4629      	mov	r1, r5
 8009008:	f7f7 faae 	bl	8000568 <__aeabi_dmul>
 800900c:	4602      	mov	r2, r0
 800900e:	460b      	mov	r3, r1
 8009010:	4620      	mov	r0, r4
 8009012:	4629      	mov	r1, r5
 8009014:	f7f7 f8f2 	bl	80001fc <__adddf3>
 8009018:	4604      	mov	r4, r0
 800901a:	460d      	mov	r5, r1
 800901c:	ec45 4b10 	vmov	d0, r4, r5
 8009020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009024:	2d00      	cmp	r5, #0
 8009026:	ee10 0a10 	vmov	r0, s0
 800902a:	4621      	mov	r1, r4
 800902c:	dc0f      	bgt.n	800904e <__ieee754_sqrt+0x62>
 800902e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009032:	4330      	orrs	r0, r6
 8009034:	d0f2      	beq.n	800901c <__ieee754_sqrt+0x30>
 8009036:	b155      	cbz	r5, 800904e <__ieee754_sqrt+0x62>
 8009038:	ee10 2a10 	vmov	r2, s0
 800903c:	4620      	mov	r0, r4
 800903e:	4629      	mov	r1, r5
 8009040:	f7f7 f8da 	bl	80001f8 <__aeabi_dsub>
 8009044:	4602      	mov	r2, r0
 8009046:	460b      	mov	r3, r1
 8009048:	f7f7 fbb8 	bl	80007bc <__aeabi_ddiv>
 800904c:	e7e4      	b.n	8009018 <__ieee754_sqrt+0x2c>
 800904e:	151b      	asrs	r3, r3, #20
 8009050:	d073      	beq.n	800913a <__ieee754_sqrt+0x14e>
 8009052:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009056:	07dd      	lsls	r5, r3, #31
 8009058:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800905c:	bf48      	it	mi
 800905e:	0fc8      	lsrmi	r0, r1, #31
 8009060:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009064:	bf44      	itt	mi
 8009066:	0049      	lslmi	r1, r1, #1
 8009068:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800906c:	2500      	movs	r5, #0
 800906e:	1058      	asrs	r0, r3, #1
 8009070:	0fcb      	lsrs	r3, r1, #31
 8009072:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8009076:	0049      	lsls	r1, r1, #1
 8009078:	2316      	movs	r3, #22
 800907a:	462c      	mov	r4, r5
 800907c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009080:	19a7      	adds	r7, r4, r6
 8009082:	4297      	cmp	r7, r2
 8009084:	bfde      	ittt	le
 8009086:	19bc      	addle	r4, r7, r6
 8009088:	1bd2      	suble	r2, r2, r7
 800908a:	19ad      	addle	r5, r5, r6
 800908c:	0fcf      	lsrs	r7, r1, #31
 800908e:	3b01      	subs	r3, #1
 8009090:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8009094:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009098:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800909c:	d1f0      	bne.n	8009080 <__ieee754_sqrt+0x94>
 800909e:	f04f 0c20 	mov.w	ip, #32
 80090a2:	469e      	mov	lr, r3
 80090a4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80090a8:	42a2      	cmp	r2, r4
 80090aa:	eb06 070e 	add.w	r7, r6, lr
 80090ae:	dc02      	bgt.n	80090b6 <__ieee754_sqrt+0xca>
 80090b0:	d112      	bne.n	80090d8 <__ieee754_sqrt+0xec>
 80090b2:	428f      	cmp	r7, r1
 80090b4:	d810      	bhi.n	80090d8 <__ieee754_sqrt+0xec>
 80090b6:	2f00      	cmp	r7, #0
 80090b8:	eb07 0e06 	add.w	lr, r7, r6
 80090bc:	da42      	bge.n	8009144 <__ieee754_sqrt+0x158>
 80090be:	f1be 0f00 	cmp.w	lr, #0
 80090c2:	db3f      	blt.n	8009144 <__ieee754_sqrt+0x158>
 80090c4:	f104 0801 	add.w	r8, r4, #1
 80090c8:	1b12      	subs	r2, r2, r4
 80090ca:	428f      	cmp	r7, r1
 80090cc:	bf88      	it	hi
 80090ce:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80090d2:	1bc9      	subs	r1, r1, r7
 80090d4:	4433      	add	r3, r6
 80090d6:	4644      	mov	r4, r8
 80090d8:	0052      	lsls	r2, r2, #1
 80090da:	f1bc 0c01 	subs.w	ip, ip, #1
 80090de:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80090e2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80090e6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80090ea:	d1dd      	bne.n	80090a8 <__ieee754_sqrt+0xbc>
 80090ec:	430a      	orrs	r2, r1
 80090ee:	d006      	beq.n	80090fe <__ieee754_sqrt+0x112>
 80090f0:	1c5c      	adds	r4, r3, #1
 80090f2:	bf13      	iteet	ne
 80090f4:	3301      	addne	r3, #1
 80090f6:	3501      	addeq	r5, #1
 80090f8:	4663      	moveq	r3, ip
 80090fa:	f023 0301 	bicne.w	r3, r3, #1
 80090fe:	106a      	asrs	r2, r5, #1
 8009100:	085b      	lsrs	r3, r3, #1
 8009102:	07e9      	lsls	r1, r5, #31
 8009104:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009108:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800910c:	bf48      	it	mi
 800910e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009112:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8009116:	461c      	mov	r4, r3
 8009118:	e780      	b.n	800901c <__ieee754_sqrt+0x30>
 800911a:	0aca      	lsrs	r2, r1, #11
 800911c:	3815      	subs	r0, #21
 800911e:	0549      	lsls	r1, r1, #21
 8009120:	2a00      	cmp	r2, #0
 8009122:	d0fa      	beq.n	800911a <__ieee754_sqrt+0x12e>
 8009124:	02d6      	lsls	r6, r2, #11
 8009126:	d50a      	bpl.n	800913e <__ieee754_sqrt+0x152>
 8009128:	f1c3 0420 	rsb	r4, r3, #32
 800912c:	fa21 f404 	lsr.w	r4, r1, r4
 8009130:	1e5d      	subs	r5, r3, #1
 8009132:	4099      	lsls	r1, r3
 8009134:	4322      	orrs	r2, r4
 8009136:	1b43      	subs	r3, r0, r5
 8009138:	e78b      	b.n	8009052 <__ieee754_sqrt+0x66>
 800913a:	4618      	mov	r0, r3
 800913c:	e7f0      	b.n	8009120 <__ieee754_sqrt+0x134>
 800913e:	0052      	lsls	r2, r2, #1
 8009140:	3301      	adds	r3, #1
 8009142:	e7ef      	b.n	8009124 <__ieee754_sqrt+0x138>
 8009144:	46a0      	mov	r8, r4
 8009146:	e7bf      	b.n	80090c8 <__ieee754_sqrt+0xdc>
 8009148:	7ff00000 	.word	0x7ff00000
 800914c:	00000000 	.word	0x00000000

08009150 <atan>:
 8009150:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009154:	ec55 4b10 	vmov	r4, r5, d0
 8009158:	4bc3      	ldr	r3, [pc, #780]	; (8009468 <atan+0x318>)
 800915a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800915e:	429e      	cmp	r6, r3
 8009160:	46ab      	mov	fp, r5
 8009162:	dd18      	ble.n	8009196 <atan+0x46>
 8009164:	4bc1      	ldr	r3, [pc, #772]	; (800946c <atan+0x31c>)
 8009166:	429e      	cmp	r6, r3
 8009168:	dc01      	bgt.n	800916e <atan+0x1e>
 800916a:	d109      	bne.n	8009180 <atan+0x30>
 800916c:	b144      	cbz	r4, 8009180 <atan+0x30>
 800916e:	4622      	mov	r2, r4
 8009170:	462b      	mov	r3, r5
 8009172:	4620      	mov	r0, r4
 8009174:	4629      	mov	r1, r5
 8009176:	f7f7 f841 	bl	80001fc <__adddf3>
 800917a:	4604      	mov	r4, r0
 800917c:	460d      	mov	r5, r1
 800917e:	e006      	b.n	800918e <atan+0x3e>
 8009180:	f1bb 0f00 	cmp.w	fp, #0
 8009184:	f340 8131 	ble.w	80093ea <atan+0x29a>
 8009188:	a59b      	add	r5, pc, #620	; (adr r5, 80093f8 <atan+0x2a8>)
 800918a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800918e:	ec45 4b10 	vmov	d0, r4, r5
 8009192:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009196:	4bb6      	ldr	r3, [pc, #728]	; (8009470 <atan+0x320>)
 8009198:	429e      	cmp	r6, r3
 800919a:	dc14      	bgt.n	80091c6 <atan+0x76>
 800919c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80091a0:	429e      	cmp	r6, r3
 80091a2:	dc0d      	bgt.n	80091c0 <atan+0x70>
 80091a4:	a396      	add	r3, pc, #600	; (adr r3, 8009400 <atan+0x2b0>)
 80091a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091aa:	ee10 0a10 	vmov	r0, s0
 80091ae:	4629      	mov	r1, r5
 80091b0:	f7f7 f824 	bl	80001fc <__adddf3>
 80091b4:	2200      	movs	r2, #0
 80091b6:	4baf      	ldr	r3, [pc, #700]	; (8009474 <atan+0x324>)
 80091b8:	f7f7 fc66 	bl	8000a88 <__aeabi_dcmpgt>
 80091bc:	2800      	cmp	r0, #0
 80091be:	d1e6      	bne.n	800918e <atan+0x3e>
 80091c0:	f04f 3aff 	mov.w	sl, #4294967295
 80091c4:	e02b      	b.n	800921e <atan+0xce>
 80091c6:	f000 f963 	bl	8009490 <fabs>
 80091ca:	4bab      	ldr	r3, [pc, #684]	; (8009478 <atan+0x328>)
 80091cc:	429e      	cmp	r6, r3
 80091ce:	ec55 4b10 	vmov	r4, r5, d0
 80091d2:	f300 80bf 	bgt.w	8009354 <atan+0x204>
 80091d6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80091da:	429e      	cmp	r6, r3
 80091dc:	f300 80a0 	bgt.w	8009320 <atan+0x1d0>
 80091e0:	ee10 2a10 	vmov	r2, s0
 80091e4:	ee10 0a10 	vmov	r0, s0
 80091e8:	462b      	mov	r3, r5
 80091ea:	4629      	mov	r1, r5
 80091ec:	f7f7 f806 	bl	80001fc <__adddf3>
 80091f0:	2200      	movs	r2, #0
 80091f2:	4ba0      	ldr	r3, [pc, #640]	; (8009474 <atan+0x324>)
 80091f4:	f7f7 f800 	bl	80001f8 <__aeabi_dsub>
 80091f8:	2200      	movs	r2, #0
 80091fa:	4606      	mov	r6, r0
 80091fc:	460f      	mov	r7, r1
 80091fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009202:	4620      	mov	r0, r4
 8009204:	4629      	mov	r1, r5
 8009206:	f7f6 fff9 	bl	80001fc <__adddf3>
 800920a:	4602      	mov	r2, r0
 800920c:	460b      	mov	r3, r1
 800920e:	4630      	mov	r0, r6
 8009210:	4639      	mov	r1, r7
 8009212:	f7f7 fad3 	bl	80007bc <__aeabi_ddiv>
 8009216:	f04f 0a00 	mov.w	sl, #0
 800921a:	4604      	mov	r4, r0
 800921c:	460d      	mov	r5, r1
 800921e:	4622      	mov	r2, r4
 8009220:	462b      	mov	r3, r5
 8009222:	4620      	mov	r0, r4
 8009224:	4629      	mov	r1, r5
 8009226:	f7f7 f99f 	bl	8000568 <__aeabi_dmul>
 800922a:	4602      	mov	r2, r0
 800922c:	460b      	mov	r3, r1
 800922e:	4680      	mov	r8, r0
 8009230:	4689      	mov	r9, r1
 8009232:	f7f7 f999 	bl	8000568 <__aeabi_dmul>
 8009236:	a374      	add	r3, pc, #464	; (adr r3, 8009408 <atan+0x2b8>)
 8009238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923c:	4606      	mov	r6, r0
 800923e:	460f      	mov	r7, r1
 8009240:	f7f7 f992 	bl	8000568 <__aeabi_dmul>
 8009244:	a372      	add	r3, pc, #456	; (adr r3, 8009410 <atan+0x2c0>)
 8009246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924a:	f7f6 ffd7 	bl	80001fc <__adddf3>
 800924e:	4632      	mov	r2, r6
 8009250:	463b      	mov	r3, r7
 8009252:	f7f7 f989 	bl	8000568 <__aeabi_dmul>
 8009256:	a370      	add	r3, pc, #448	; (adr r3, 8009418 <atan+0x2c8>)
 8009258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925c:	f7f6 ffce 	bl	80001fc <__adddf3>
 8009260:	4632      	mov	r2, r6
 8009262:	463b      	mov	r3, r7
 8009264:	f7f7 f980 	bl	8000568 <__aeabi_dmul>
 8009268:	a36d      	add	r3, pc, #436	; (adr r3, 8009420 <atan+0x2d0>)
 800926a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926e:	f7f6 ffc5 	bl	80001fc <__adddf3>
 8009272:	4632      	mov	r2, r6
 8009274:	463b      	mov	r3, r7
 8009276:	f7f7 f977 	bl	8000568 <__aeabi_dmul>
 800927a:	a36b      	add	r3, pc, #428	; (adr r3, 8009428 <atan+0x2d8>)
 800927c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009280:	f7f6 ffbc 	bl	80001fc <__adddf3>
 8009284:	4632      	mov	r2, r6
 8009286:	463b      	mov	r3, r7
 8009288:	f7f7 f96e 	bl	8000568 <__aeabi_dmul>
 800928c:	a368      	add	r3, pc, #416	; (adr r3, 8009430 <atan+0x2e0>)
 800928e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009292:	f7f6 ffb3 	bl	80001fc <__adddf3>
 8009296:	4642      	mov	r2, r8
 8009298:	464b      	mov	r3, r9
 800929a:	f7f7 f965 	bl	8000568 <__aeabi_dmul>
 800929e:	a366      	add	r3, pc, #408	; (adr r3, 8009438 <atan+0x2e8>)
 80092a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a4:	4680      	mov	r8, r0
 80092a6:	4689      	mov	r9, r1
 80092a8:	4630      	mov	r0, r6
 80092aa:	4639      	mov	r1, r7
 80092ac:	f7f7 f95c 	bl	8000568 <__aeabi_dmul>
 80092b0:	a363      	add	r3, pc, #396	; (adr r3, 8009440 <atan+0x2f0>)
 80092b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b6:	f7f6 ff9f 	bl	80001f8 <__aeabi_dsub>
 80092ba:	4632      	mov	r2, r6
 80092bc:	463b      	mov	r3, r7
 80092be:	f7f7 f953 	bl	8000568 <__aeabi_dmul>
 80092c2:	a361      	add	r3, pc, #388	; (adr r3, 8009448 <atan+0x2f8>)
 80092c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c8:	f7f6 ff96 	bl	80001f8 <__aeabi_dsub>
 80092cc:	4632      	mov	r2, r6
 80092ce:	463b      	mov	r3, r7
 80092d0:	f7f7 f94a 	bl	8000568 <__aeabi_dmul>
 80092d4:	a35e      	add	r3, pc, #376	; (adr r3, 8009450 <atan+0x300>)
 80092d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092da:	f7f6 ff8d 	bl	80001f8 <__aeabi_dsub>
 80092de:	4632      	mov	r2, r6
 80092e0:	463b      	mov	r3, r7
 80092e2:	f7f7 f941 	bl	8000568 <__aeabi_dmul>
 80092e6:	a35c      	add	r3, pc, #368	; (adr r3, 8009458 <atan+0x308>)
 80092e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ec:	f7f6 ff84 	bl	80001f8 <__aeabi_dsub>
 80092f0:	4632      	mov	r2, r6
 80092f2:	463b      	mov	r3, r7
 80092f4:	f7f7 f938 	bl	8000568 <__aeabi_dmul>
 80092f8:	4602      	mov	r2, r0
 80092fa:	460b      	mov	r3, r1
 80092fc:	4640      	mov	r0, r8
 80092fe:	4649      	mov	r1, r9
 8009300:	f7f6 ff7c 	bl	80001fc <__adddf3>
 8009304:	4622      	mov	r2, r4
 8009306:	462b      	mov	r3, r5
 8009308:	f7f7 f92e 	bl	8000568 <__aeabi_dmul>
 800930c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009310:	4602      	mov	r2, r0
 8009312:	460b      	mov	r3, r1
 8009314:	d14b      	bne.n	80093ae <atan+0x25e>
 8009316:	4620      	mov	r0, r4
 8009318:	4629      	mov	r1, r5
 800931a:	f7f6 ff6d 	bl	80001f8 <__aeabi_dsub>
 800931e:	e72c      	b.n	800917a <atan+0x2a>
 8009320:	ee10 0a10 	vmov	r0, s0
 8009324:	2200      	movs	r2, #0
 8009326:	4b53      	ldr	r3, [pc, #332]	; (8009474 <atan+0x324>)
 8009328:	4629      	mov	r1, r5
 800932a:	f7f6 ff65 	bl	80001f8 <__aeabi_dsub>
 800932e:	2200      	movs	r2, #0
 8009330:	4606      	mov	r6, r0
 8009332:	460f      	mov	r7, r1
 8009334:	4b4f      	ldr	r3, [pc, #316]	; (8009474 <atan+0x324>)
 8009336:	4620      	mov	r0, r4
 8009338:	4629      	mov	r1, r5
 800933a:	f7f6 ff5f 	bl	80001fc <__adddf3>
 800933e:	4602      	mov	r2, r0
 8009340:	460b      	mov	r3, r1
 8009342:	4630      	mov	r0, r6
 8009344:	4639      	mov	r1, r7
 8009346:	f7f7 fa39 	bl	80007bc <__aeabi_ddiv>
 800934a:	f04f 0a01 	mov.w	sl, #1
 800934e:	4604      	mov	r4, r0
 8009350:	460d      	mov	r5, r1
 8009352:	e764      	b.n	800921e <atan+0xce>
 8009354:	4b49      	ldr	r3, [pc, #292]	; (800947c <atan+0x32c>)
 8009356:	429e      	cmp	r6, r3
 8009358:	dc1d      	bgt.n	8009396 <atan+0x246>
 800935a:	ee10 0a10 	vmov	r0, s0
 800935e:	2200      	movs	r2, #0
 8009360:	4b47      	ldr	r3, [pc, #284]	; (8009480 <atan+0x330>)
 8009362:	4629      	mov	r1, r5
 8009364:	f7f6 ff48 	bl	80001f8 <__aeabi_dsub>
 8009368:	2200      	movs	r2, #0
 800936a:	4606      	mov	r6, r0
 800936c:	460f      	mov	r7, r1
 800936e:	4b44      	ldr	r3, [pc, #272]	; (8009480 <atan+0x330>)
 8009370:	4620      	mov	r0, r4
 8009372:	4629      	mov	r1, r5
 8009374:	f7f7 f8f8 	bl	8000568 <__aeabi_dmul>
 8009378:	2200      	movs	r2, #0
 800937a:	4b3e      	ldr	r3, [pc, #248]	; (8009474 <atan+0x324>)
 800937c:	f7f6 ff3e 	bl	80001fc <__adddf3>
 8009380:	4602      	mov	r2, r0
 8009382:	460b      	mov	r3, r1
 8009384:	4630      	mov	r0, r6
 8009386:	4639      	mov	r1, r7
 8009388:	f7f7 fa18 	bl	80007bc <__aeabi_ddiv>
 800938c:	f04f 0a02 	mov.w	sl, #2
 8009390:	4604      	mov	r4, r0
 8009392:	460d      	mov	r5, r1
 8009394:	e743      	b.n	800921e <atan+0xce>
 8009396:	462b      	mov	r3, r5
 8009398:	ee10 2a10 	vmov	r2, s0
 800939c:	2000      	movs	r0, #0
 800939e:	4939      	ldr	r1, [pc, #228]	; (8009484 <atan+0x334>)
 80093a0:	f7f7 fa0c 	bl	80007bc <__aeabi_ddiv>
 80093a4:	f04f 0a03 	mov.w	sl, #3
 80093a8:	4604      	mov	r4, r0
 80093aa:	460d      	mov	r5, r1
 80093ac:	e737      	b.n	800921e <atan+0xce>
 80093ae:	4b36      	ldr	r3, [pc, #216]	; (8009488 <atan+0x338>)
 80093b0:	4e36      	ldr	r6, [pc, #216]	; (800948c <atan+0x33c>)
 80093b2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80093b6:	4456      	add	r6, sl
 80093b8:	449a      	add	sl, r3
 80093ba:	e9da 2300 	ldrd	r2, r3, [sl]
 80093be:	f7f6 ff1b 	bl	80001f8 <__aeabi_dsub>
 80093c2:	4622      	mov	r2, r4
 80093c4:	462b      	mov	r3, r5
 80093c6:	f7f6 ff17 	bl	80001f8 <__aeabi_dsub>
 80093ca:	4602      	mov	r2, r0
 80093cc:	460b      	mov	r3, r1
 80093ce:	e9d6 0100 	ldrd	r0, r1, [r6]
 80093d2:	f7f6 ff11 	bl	80001f8 <__aeabi_dsub>
 80093d6:	f1bb 0f00 	cmp.w	fp, #0
 80093da:	4604      	mov	r4, r0
 80093dc:	460d      	mov	r5, r1
 80093de:	f6bf aed6 	bge.w	800918e <atan+0x3e>
 80093e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093e6:	461d      	mov	r5, r3
 80093e8:	e6d1      	b.n	800918e <atan+0x3e>
 80093ea:	a51d      	add	r5, pc, #116	; (adr r5, 8009460 <atan+0x310>)
 80093ec:	e9d5 4500 	ldrd	r4, r5, [r5]
 80093f0:	e6cd      	b.n	800918e <atan+0x3e>
 80093f2:	bf00      	nop
 80093f4:	f3af 8000 	nop.w
 80093f8:	54442d18 	.word	0x54442d18
 80093fc:	3ff921fb 	.word	0x3ff921fb
 8009400:	8800759c 	.word	0x8800759c
 8009404:	7e37e43c 	.word	0x7e37e43c
 8009408:	e322da11 	.word	0xe322da11
 800940c:	3f90ad3a 	.word	0x3f90ad3a
 8009410:	24760deb 	.word	0x24760deb
 8009414:	3fa97b4b 	.word	0x3fa97b4b
 8009418:	a0d03d51 	.word	0xa0d03d51
 800941c:	3fb10d66 	.word	0x3fb10d66
 8009420:	c54c206e 	.word	0xc54c206e
 8009424:	3fb745cd 	.word	0x3fb745cd
 8009428:	920083ff 	.word	0x920083ff
 800942c:	3fc24924 	.word	0x3fc24924
 8009430:	5555550d 	.word	0x5555550d
 8009434:	3fd55555 	.word	0x3fd55555
 8009438:	2c6a6c2f 	.word	0x2c6a6c2f
 800943c:	bfa2b444 	.word	0xbfa2b444
 8009440:	52defd9a 	.word	0x52defd9a
 8009444:	3fadde2d 	.word	0x3fadde2d
 8009448:	af749a6d 	.word	0xaf749a6d
 800944c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009450:	fe231671 	.word	0xfe231671
 8009454:	3fbc71c6 	.word	0x3fbc71c6
 8009458:	9998ebc4 	.word	0x9998ebc4
 800945c:	3fc99999 	.word	0x3fc99999
 8009460:	54442d18 	.word	0x54442d18
 8009464:	bff921fb 	.word	0xbff921fb
 8009468:	440fffff 	.word	0x440fffff
 800946c:	7ff00000 	.word	0x7ff00000
 8009470:	3fdbffff 	.word	0x3fdbffff
 8009474:	3ff00000 	.word	0x3ff00000
 8009478:	3ff2ffff 	.word	0x3ff2ffff
 800947c:	40037fff 	.word	0x40037fff
 8009480:	3ff80000 	.word	0x3ff80000
 8009484:	bff00000 	.word	0xbff00000
 8009488:	08009598 	.word	0x08009598
 800948c:	08009578 	.word	0x08009578

08009490 <fabs>:
 8009490:	ec51 0b10 	vmov	r0, r1, d0
 8009494:	ee10 2a10 	vmov	r2, s0
 8009498:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800949c:	ec43 2b10 	vmov	d0, r2, r3
 80094a0:	4770      	bx	lr

080094a2 <matherr>:
 80094a2:	2000      	movs	r0, #0
 80094a4:	4770      	bx	lr
	...

080094a8 <nan>:
 80094a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80094b0 <nan+0x8>
 80094ac:	4770      	bx	lr
 80094ae:	bf00      	nop
 80094b0:	00000000 	.word	0x00000000
 80094b4:	7ff80000 	.word	0x7ff80000

080094b8 <_init>:
 80094b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ba:	bf00      	nop
 80094bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094be:	bc08      	pop	{r3}
 80094c0:	469e      	mov	lr, r3
 80094c2:	4770      	bx	lr

080094c4 <_fini>:
 80094c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094c6:	bf00      	nop
 80094c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ca:	bc08      	pop	{r3}
 80094cc:	469e      	mov	lr, r3
 80094ce:	4770      	bx	lr
